
ECE_198.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d7c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08004f1c  08004f1c  00014f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fe8  08004fe8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08004fe8  08004fe8  00014fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ff0  08004ff0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ff0  08004ff0  00014ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ff4  08004ff4  00014ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08004ff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  2000006c  08005064  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08005064  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bd74  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b7e  00000000  00000000  0002be53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af0  00000000  00000000  0002d9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000889  00000000  00000000  0002e4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017365  00000000  00000000  0002ed51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000de83  00000000  00000000  000460b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093a5b  00000000  00000000  00053f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000332c  00000000  00000000  000e7994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000eacc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004f04 	.word	0x08004f04

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08004f04 	.word	0x08004f04

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2f>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000854:	bf24      	itt	cs
 8000856:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800085a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800085e:	d90d      	bls.n	800087c <__aeabi_d2f+0x30>
 8000860:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000864:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000868:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800086c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000870:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000874:	bf08      	it	eq
 8000876:	f020 0001 	biceq.w	r0, r0, #1
 800087a:	4770      	bx	lr
 800087c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000880:	d121      	bne.n	80008c6 <__aeabi_d2f+0x7a>
 8000882:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000886:	bfbc      	itt	lt
 8000888:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800088c:	4770      	bxlt	lr
 800088e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000892:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000896:	f1c2 0218 	rsb	r2, r2, #24
 800089a:	f1c2 0c20 	rsb	ip, r2, #32
 800089e:	fa10 f30c 	lsls.w	r3, r0, ip
 80008a2:	fa20 f002 	lsr.w	r0, r0, r2
 80008a6:	bf18      	it	ne
 80008a8:	f040 0001 	orrne.w	r0, r0, #1
 80008ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008b8:	ea40 000c 	orr.w	r0, r0, ip
 80008bc:	fa23 f302 	lsr.w	r3, r3, r2
 80008c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008c4:	e7cc      	b.n	8000860 <__aeabi_d2f+0x14>
 80008c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ca:	d107      	bne.n	80008dc <__aeabi_d2f+0x90>
 80008cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008d0:	bf1e      	ittt	ne
 80008d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008da:	4770      	bxne	lr
 80008dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000900:	f000 b970 	b.w	8000be4 <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	9e08      	ldr	r6, [sp, #32]
 8000922:	460d      	mov	r5, r1
 8000924:	4604      	mov	r4, r0
 8000926:	460f      	mov	r7, r1
 8000928:	2b00      	cmp	r3, #0
 800092a:	d14a      	bne.n	80009c2 <__udivmoddi4+0xa6>
 800092c:	428a      	cmp	r2, r1
 800092e:	4694      	mov	ip, r2
 8000930:	d965      	bls.n	80009fe <__udivmoddi4+0xe2>
 8000932:	fab2 f382 	clz	r3, r2
 8000936:	b143      	cbz	r3, 800094a <__udivmoddi4+0x2e>
 8000938:	fa02 fc03 	lsl.w	ip, r2, r3
 800093c:	f1c3 0220 	rsb	r2, r3, #32
 8000940:	409f      	lsls	r7, r3
 8000942:	fa20 f202 	lsr.w	r2, r0, r2
 8000946:	4317      	orrs	r7, r2
 8000948:	409c      	lsls	r4, r3
 800094a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800094e:	fa1f f58c 	uxth.w	r5, ip
 8000952:	fbb7 f1fe 	udiv	r1, r7, lr
 8000956:	0c22      	lsrs	r2, r4, #16
 8000958:	fb0e 7711 	mls	r7, lr, r1, r7
 800095c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000960:	fb01 f005 	mul.w	r0, r1, r5
 8000964:	4290      	cmp	r0, r2
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x62>
 8000968:	eb1c 0202 	adds.w	r2, ip, r2
 800096c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000970:	f080 811c 	bcs.w	8000bac <__udivmoddi4+0x290>
 8000974:	4290      	cmp	r0, r2
 8000976:	f240 8119 	bls.w	8000bac <__udivmoddi4+0x290>
 800097a:	3902      	subs	r1, #2
 800097c:	4462      	add	r2, ip
 800097e:	1a12      	subs	r2, r2, r0
 8000980:	b2a4      	uxth	r4, r4
 8000982:	fbb2 f0fe 	udiv	r0, r2, lr
 8000986:	fb0e 2210 	mls	r2, lr, r0, r2
 800098a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800098e:	fb00 f505 	mul.w	r5, r0, r5
 8000992:	42a5      	cmp	r5, r4
 8000994:	d90a      	bls.n	80009ac <__udivmoddi4+0x90>
 8000996:	eb1c 0404 	adds.w	r4, ip, r4
 800099a:	f100 32ff 	add.w	r2, r0, #4294967295
 800099e:	f080 8107 	bcs.w	8000bb0 <__udivmoddi4+0x294>
 80009a2:	42a5      	cmp	r5, r4
 80009a4:	f240 8104 	bls.w	8000bb0 <__udivmoddi4+0x294>
 80009a8:	4464      	add	r4, ip
 80009aa:	3802      	subs	r0, #2
 80009ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009b0:	1b64      	subs	r4, r4, r5
 80009b2:	2100      	movs	r1, #0
 80009b4:	b11e      	cbz	r6, 80009be <__udivmoddi4+0xa2>
 80009b6:	40dc      	lsrs	r4, r3
 80009b8:	2300      	movs	r3, #0
 80009ba:	e9c6 4300 	strd	r4, r3, [r6]
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	428b      	cmp	r3, r1
 80009c4:	d908      	bls.n	80009d8 <__udivmoddi4+0xbc>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	f000 80ed 	beq.w	8000ba6 <__udivmoddi4+0x28a>
 80009cc:	2100      	movs	r1, #0
 80009ce:	e9c6 0500 	strd	r0, r5, [r6]
 80009d2:	4608      	mov	r0, r1
 80009d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d8:	fab3 f183 	clz	r1, r3
 80009dc:	2900      	cmp	r1, #0
 80009de:	d149      	bne.n	8000a74 <__udivmoddi4+0x158>
 80009e0:	42ab      	cmp	r3, r5
 80009e2:	d302      	bcc.n	80009ea <__udivmoddi4+0xce>
 80009e4:	4282      	cmp	r2, r0
 80009e6:	f200 80f8 	bhi.w	8000bda <__udivmoddi4+0x2be>
 80009ea:	1a84      	subs	r4, r0, r2
 80009ec:	eb65 0203 	sbc.w	r2, r5, r3
 80009f0:	2001      	movs	r0, #1
 80009f2:	4617      	mov	r7, r2
 80009f4:	2e00      	cmp	r6, #0
 80009f6:	d0e2      	beq.n	80009be <__udivmoddi4+0xa2>
 80009f8:	e9c6 4700 	strd	r4, r7, [r6]
 80009fc:	e7df      	b.n	80009be <__udivmoddi4+0xa2>
 80009fe:	b902      	cbnz	r2, 8000a02 <__udivmoddi4+0xe6>
 8000a00:	deff      	udf	#255	; 0xff
 8000a02:	fab2 f382 	clz	r3, r2
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	f040 8090 	bne.w	8000b2c <__udivmoddi4+0x210>
 8000a0c:	1a8a      	subs	r2, r1, r2
 8000a0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a12:	fa1f fe8c 	uxth.w	lr, ip
 8000a16:	2101      	movs	r1, #1
 8000a18:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a1c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a20:	0c22      	lsrs	r2, r4, #16
 8000a22:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a26:	fb0e f005 	mul.w	r0, lr, r5
 8000a2a:	4290      	cmp	r0, r2
 8000a2c:	d908      	bls.n	8000a40 <__udivmoddi4+0x124>
 8000a2e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a32:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a36:	d202      	bcs.n	8000a3e <__udivmoddi4+0x122>
 8000a38:	4290      	cmp	r0, r2
 8000a3a:	f200 80cb 	bhi.w	8000bd4 <__udivmoddi4+0x2b8>
 8000a3e:	4645      	mov	r5, r8
 8000a40:	1a12      	subs	r2, r2, r0
 8000a42:	b2a4      	uxth	r4, r4
 8000a44:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a48:	fb07 2210 	mls	r2, r7, r0, r2
 8000a4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a50:	fb0e fe00 	mul.w	lr, lr, r0
 8000a54:	45a6      	cmp	lr, r4
 8000a56:	d908      	bls.n	8000a6a <__udivmoddi4+0x14e>
 8000a58:	eb1c 0404 	adds.w	r4, ip, r4
 8000a5c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a60:	d202      	bcs.n	8000a68 <__udivmoddi4+0x14c>
 8000a62:	45a6      	cmp	lr, r4
 8000a64:	f200 80bb 	bhi.w	8000bde <__udivmoddi4+0x2c2>
 8000a68:	4610      	mov	r0, r2
 8000a6a:	eba4 040e 	sub.w	r4, r4, lr
 8000a6e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a72:	e79f      	b.n	80009b4 <__udivmoddi4+0x98>
 8000a74:	f1c1 0720 	rsb	r7, r1, #32
 8000a78:	408b      	lsls	r3, r1
 8000a7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a82:	fa05 f401 	lsl.w	r4, r5, r1
 8000a86:	fa20 f307 	lsr.w	r3, r0, r7
 8000a8a:	40fd      	lsrs	r5, r7
 8000a8c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a90:	4323      	orrs	r3, r4
 8000a92:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a96:	fa1f fe8c 	uxth.w	lr, ip
 8000a9a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a9e:	0c1c      	lsrs	r4, r3, #16
 8000aa0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000aa4:	fb08 f50e 	mul.w	r5, r8, lr
 8000aa8:	42a5      	cmp	r5, r4
 8000aaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000aae:	fa00 f001 	lsl.w	r0, r0, r1
 8000ab2:	d90b      	bls.n	8000acc <__udivmoddi4+0x1b0>
 8000ab4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000abc:	f080 8088 	bcs.w	8000bd0 <__udivmoddi4+0x2b4>
 8000ac0:	42a5      	cmp	r5, r4
 8000ac2:	f240 8085 	bls.w	8000bd0 <__udivmoddi4+0x2b4>
 8000ac6:	f1a8 0802 	sub.w	r8, r8, #2
 8000aca:	4464      	add	r4, ip
 8000acc:	1b64      	subs	r4, r4, r5
 8000ace:	b29d      	uxth	r5, r3
 8000ad0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ad4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ad8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000adc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ae0:	45a6      	cmp	lr, r4
 8000ae2:	d908      	bls.n	8000af6 <__udivmoddi4+0x1da>
 8000ae4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ae8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000aec:	d26c      	bcs.n	8000bc8 <__udivmoddi4+0x2ac>
 8000aee:	45a6      	cmp	lr, r4
 8000af0:	d96a      	bls.n	8000bc8 <__udivmoddi4+0x2ac>
 8000af2:	3b02      	subs	r3, #2
 8000af4:	4464      	add	r4, ip
 8000af6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000afa:	fba3 9502 	umull	r9, r5, r3, r2
 8000afe:	eba4 040e 	sub.w	r4, r4, lr
 8000b02:	42ac      	cmp	r4, r5
 8000b04:	46c8      	mov	r8, r9
 8000b06:	46ae      	mov	lr, r5
 8000b08:	d356      	bcc.n	8000bb8 <__udivmoddi4+0x29c>
 8000b0a:	d053      	beq.n	8000bb4 <__udivmoddi4+0x298>
 8000b0c:	b156      	cbz	r6, 8000b24 <__udivmoddi4+0x208>
 8000b0e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b12:	eb64 040e 	sbc.w	r4, r4, lr
 8000b16:	fa04 f707 	lsl.w	r7, r4, r7
 8000b1a:	40ca      	lsrs	r2, r1
 8000b1c:	40cc      	lsrs	r4, r1
 8000b1e:	4317      	orrs	r7, r2
 8000b20:	e9c6 7400 	strd	r7, r4, [r6]
 8000b24:	4618      	mov	r0, r3
 8000b26:	2100      	movs	r1, #0
 8000b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2c:	f1c3 0120 	rsb	r1, r3, #32
 8000b30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b34:	fa20 f201 	lsr.w	r2, r0, r1
 8000b38:	fa25 f101 	lsr.w	r1, r5, r1
 8000b3c:	409d      	lsls	r5, r3
 8000b3e:	432a      	orrs	r2, r5
 8000b40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b44:	fa1f fe8c 	uxth.w	lr, ip
 8000b48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b4c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b50:	0c11      	lsrs	r1, r2, #16
 8000b52:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b56:	fb00 f50e 	mul.w	r5, r0, lr
 8000b5a:	428d      	cmp	r5, r1
 8000b5c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b60:	d908      	bls.n	8000b74 <__udivmoddi4+0x258>
 8000b62:	eb1c 0101 	adds.w	r1, ip, r1
 8000b66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b6a:	d22f      	bcs.n	8000bcc <__udivmoddi4+0x2b0>
 8000b6c:	428d      	cmp	r5, r1
 8000b6e:	d92d      	bls.n	8000bcc <__udivmoddi4+0x2b0>
 8000b70:	3802      	subs	r0, #2
 8000b72:	4461      	add	r1, ip
 8000b74:	1b49      	subs	r1, r1, r5
 8000b76:	b292      	uxth	r2, r2
 8000b78:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b7c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b84:	fb05 f10e 	mul.w	r1, r5, lr
 8000b88:	4291      	cmp	r1, r2
 8000b8a:	d908      	bls.n	8000b9e <__udivmoddi4+0x282>
 8000b8c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b90:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b94:	d216      	bcs.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b96:	4291      	cmp	r1, r2
 8000b98:	d914      	bls.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b9a:	3d02      	subs	r5, #2
 8000b9c:	4462      	add	r2, ip
 8000b9e:	1a52      	subs	r2, r2, r1
 8000ba0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ba4:	e738      	b.n	8000a18 <__udivmoddi4+0xfc>
 8000ba6:	4631      	mov	r1, r6
 8000ba8:	4630      	mov	r0, r6
 8000baa:	e708      	b.n	80009be <__udivmoddi4+0xa2>
 8000bac:	4639      	mov	r1, r7
 8000bae:	e6e6      	b.n	800097e <__udivmoddi4+0x62>
 8000bb0:	4610      	mov	r0, r2
 8000bb2:	e6fb      	b.n	80009ac <__udivmoddi4+0x90>
 8000bb4:	4548      	cmp	r0, r9
 8000bb6:	d2a9      	bcs.n	8000b0c <__udivmoddi4+0x1f0>
 8000bb8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bbc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	e7a3      	b.n	8000b0c <__udivmoddi4+0x1f0>
 8000bc4:	4645      	mov	r5, r8
 8000bc6:	e7ea      	b.n	8000b9e <__udivmoddi4+0x282>
 8000bc8:	462b      	mov	r3, r5
 8000bca:	e794      	b.n	8000af6 <__udivmoddi4+0x1da>
 8000bcc:	4640      	mov	r0, r8
 8000bce:	e7d1      	b.n	8000b74 <__udivmoddi4+0x258>
 8000bd0:	46d0      	mov	r8, sl
 8000bd2:	e77b      	b.n	8000acc <__udivmoddi4+0x1b0>
 8000bd4:	3d02      	subs	r5, #2
 8000bd6:	4462      	add	r2, ip
 8000bd8:	e732      	b.n	8000a40 <__udivmoddi4+0x124>
 8000bda:	4608      	mov	r0, r1
 8000bdc:	e70a      	b.n	80009f4 <__udivmoddi4+0xd8>
 8000bde:	4464      	add	r4, ip
 8000be0:	3802      	subs	r0, #2
 8000be2:	e742      	b.n	8000a6a <__udivmoddi4+0x14e>

08000be4 <__aeabi_idiv0>:
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000bf2:	4a38      	ldr	r2, [pc, #224]	; (8000cd4 <HD44780_Init+0xec>)
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000bf8:	4b37      	ldr	r3, [pc, #220]	; (8000cd8 <HD44780_Init+0xf0>)
 8000bfa:	2208      	movs	r2, #8
 8000bfc:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000bfe:	4b37      	ldr	r3, [pc, #220]	; (8000cdc <HD44780_Init+0xf4>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000c04:	4b33      	ldr	r3, [pc, #204]	; (8000cd4 <HD44780_Init+0xec>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d907      	bls.n	8000c1c <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000c0c:	4b33      	ldr	r3, [pc, #204]	; (8000cdc <HD44780_Init+0xf4>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	f043 0308 	orr.w	r3, r3, #8
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	4b31      	ldr	r3, [pc, #196]	; (8000cdc <HD44780_Init+0xf4>)
 8000c18:	701a      	strb	r2, [r3, #0]
 8000c1a:	e006      	b.n	8000c2a <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000c1c:	4b2f      	ldr	r3, [pc, #188]	; (8000cdc <HD44780_Init+0xf4>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	f043 0304 	orr.w	r3, r3, #4
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4b2d      	ldr	r3, [pc, #180]	; (8000cdc <HD44780_Init+0xf4>)
 8000c28:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000c2a:	f000 f985 	bl	8000f38 <DelayInit>
  HAL_Delay(50);
 8000c2e:	2032      	movs	r0, #50	; 0x32
 8000c30:	f000 ff4c 	bl	8001acc <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HD44780_Init+0xf0>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 f943 	bl	8000ec4 <ExpanderWrite>
  HAL_Delay(1000);
 8000c3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c42:	f000 ff43 	bl	8001acc <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000c46:	2030      	movs	r0, #48	; 0x30
 8000c48:	f000 f92b 	bl	8000ea2 <Write4Bits>
  DelayUS(4500);
 8000c4c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000c50:	f000 f99c 	bl	8000f8c <DelayUS>

  Write4Bits(0x03 << 4);
 8000c54:	2030      	movs	r0, #48	; 0x30
 8000c56:	f000 f924 	bl	8000ea2 <Write4Bits>
  DelayUS(4500);
 8000c5a:	f241 1094 	movw	r0, #4500	; 0x1194
 8000c5e:	f000 f995 	bl	8000f8c <DelayUS>

  Write4Bits(0x03 << 4);
 8000c62:	2030      	movs	r0, #48	; 0x30
 8000c64:	f000 f91d 	bl	8000ea2 <Write4Bits>
  DelayUS(4500);
 8000c68:	f241 1094 	movw	r0, #4500	; 0x1194
 8000c6c:	f000 f98e 	bl	8000f8c <DelayUS>

  Write4Bits(0x02 << 4);
 8000c70:	2020      	movs	r0, #32
 8000c72:	f000 f916 	bl	8000ea2 <Write4Bits>
  DelayUS(100);
 8000c76:	2064      	movs	r0, #100	; 0x64
 8000c78:	f000 f988 	bl	8000f8c <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000c7c:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <HD44780_Init+0xf4>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	f043 0320 	orr.w	r3, r3, #32
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 f8ce 	bl	8000e28 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000c8c:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <HD44780_Init+0xf8>)
 8000c8e:	2204      	movs	r2, #4
 8000c90:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000c92:	f000 f875 	bl	8000d80 <HD44780_Display>
  HD44780_Clear();
 8000c96:	f000 f82b 	bl	8000cf0 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HD44780_Init+0xfc>)
 8000c9c:	2202      	movs	r2, #2
 8000c9e:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000ca0:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <HD44780_Init+0xfc>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	f043 0304 	orr.w	r3, r3, #4
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 f8bc 	bl	8000e28 <SendCommand>
  DelayUS(4500);
 8000cb0:	f241 1094 	movw	r0, #4500	; 0x1194
 8000cb4:	f000 f96a 	bl	8000f8c <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000cb8:	490b      	ldr	r1, [pc, #44]	; (8000ce8 <HD44780_Init+0x100>)
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f000 f876 	bl	8000dac <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000cc0:	490a      	ldr	r1, [pc, #40]	; (8000cec <HD44780_Init+0x104>)
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	f000 f872 	bl	8000dac <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000cc8:	f000 f81d 	bl	8000d06 <HD44780_Home>
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	2000008b 	.word	0x2000008b
 8000cd8:	2000008c 	.word	0x2000008c
 8000cdc:	20000088 	.word	0x20000088
 8000ce0:	20000089 	.word	0x20000089
 8000ce4:	2000008a 	.word	0x2000008a
 8000ce8:	20000000 	.word	0x20000000
 8000cec:	20000008 	.word	0x20000008

08000cf0 <HD44780_Clear>:

void HD44780_Clear()
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	f000 f897 	bl	8000e28 <SendCommand>
  DelayUS(2000);
 8000cfa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cfe:	f000 f945 	bl	8000f8c <DelayUS>
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HD44780_Home>:

void HD44780_Home()
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000d0a:	2002      	movs	r0, #2
 8000d0c:	f000 f88c 	bl	8000e28 <SendCommand>
  DelayUS(2000);
 8000d10:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d14:	f000 f93a 	bl	8000f8c <DelayUS>
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000d1c:	b590      	push	{r4, r7, lr}
 8000d1e:	b087      	sub	sp, #28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	460a      	mov	r2, r1
 8000d26:	71fb      	strb	r3, [r7, #7]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <HD44780_SetCursor+0x5c>)
 8000d2e:	f107 0408 	add.w	r4, r7, #8
 8000d32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000d38:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <HD44780_SetCursor+0x60>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	79ba      	ldrb	r2, [r7, #6]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d303      	bcc.n	8000d4a <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <HD44780_SetCursor+0x60>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000d4a:	79bb      	ldrb	r3, [r7, #6]
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	3318      	adds	r3, #24
 8000d50:	443b      	add	r3, r7
 8000d52:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	b25b      	sxtb	r3, r3
 8000d60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d64:	b25b      	sxtb	r3, r3
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 f85d 	bl	8000e28 <SendCommand>
}
 8000d6e:	bf00      	nop
 8000d70:	371c      	adds	r7, #28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd90      	pop	{r4, r7, pc}
 8000d76:	bf00      	nop
 8000d78:	08004f1c 	.word	0x08004f1c
 8000d7c:	2000008b 	.word	0x2000008b

08000d80 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <HD44780_Display+0x28>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	f043 0304 	orr.w	r3, r3, #4
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HD44780_Display+0x28>)
 8000d90:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000d92:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <HD44780_Display+0x28>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	f043 0308 	orr.w	r3, r3, #8
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f000 f843 	bl	8000e28 <SendCommand>
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000089 	.word	0x20000089

08000dac <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	b25b      	sxtb	r3, r3
 8000dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dca:	b25b      	sxtb	r3, r3
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 f82a 	bl	8000e28 <SendCommand>
  for (int i=0; i<8; i++)
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	e009      	b.n	8000dee <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	683a      	ldr	r2, [r7, #0]
 8000dde:	4413      	add	r3, r2
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 f82e 	bl	8000e44 <SendChar>
  for (int i=0; i<8; i++)
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	3301      	adds	r3, #1
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	2b07      	cmp	r3, #7
 8000df2:	ddf2      	ble.n	8000dda <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000df4:	bf00      	nop
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000e06:	e006      	b.n	8000e16 <HD44780_PrintStr+0x18>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	1c5a      	adds	r2, r3, #1
 8000e0c:	607a      	str	r2, [r7, #4]
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f000 f817 	bl	8000e44 <SendChar>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d1f4      	bne.n	8000e08 <HD44780_PrintStr+0xa>
}
 8000e1e:	bf00      	nop
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	2100      	movs	r1, #0
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 f812 	bl	8000e60 <Send>
}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	2101      	movs	r1, #1
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 f804 	bl	8000e60 <Send>
}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	460a      	mov	r2, r1
 8000e6a:	71fb      	strb	r3, [r7, #7]
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	f023 030f 	bic.w	r3, r3, #15
 8000e76:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	011b      	lsls	r3, r3, #4
 8000e7c:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000e7e:	7bfa      	ldrb	r2, [r7, #15]
 8000e80:	79bb      	ldrb	r3, [r7, #6]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 f80b 	bl	8000ea2 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000e8c:	7bba      	ldrb	r2, [r7, #14]
 8000e8e:	79bb      	ldrb	r3, [r7, #6]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	4618      	mov	r0, r3
 8000e96:	f000 f804 	bl	8000ea2 <Write4Bits>
}
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 f808 	bl	8000ec4 <ExpanderWrite>
  PulseEnable(value);
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 f820 	bl	8000efc <PulseEnable>
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af02      	add	r7, sp, #8
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <ExpanderWrite+0x30>)
 8000ed0:	781a      	ldrb	r2, [r3, #0]
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000eda:	f107 020f 	add.w	r2, r7, #15
 8000ede:	230a      	movs	r3, #10
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	214e      	movs	r1, #78	; 0x4e
 8000ee6:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <ExpanderWrite+0x34>)
 8000ee8:	f001 fda2 	bl	8002a30 <HAL_I2C_Master_Transmit>
}
 8000eec:	bf00      	nop
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	2000008c 	.word	0x2000008c
 8000ef8:	200000d8 	.word	0x200000d8

08000efc <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	f043 0304 	orr.w	r3, r3, #4
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ffd8 	bl	8000ec4 <ExpanderWrite>
  DelayUS(20);
 8000f14:	2014      	movs	r0, #20
 8000f16:	f000 f839 	bl	8000f8c <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	f023 0304 	bic.w	r3, r3, #4
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ffce 	bl	8000ec4 <ExpanderWrite>
  DelayUS(20);
 8000f28:	2014      	movs	r0, #20
 8000f2a:	f000 f82f 	bl	8000f8c <DelayUS>
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <DelayInit>:

static void DelayInit(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <DelayInit+0x4c>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	4a10      	ldr	r2, [pc, #64]	; (8000f84 <DelayInit+0x4c>)
 8000f42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f46:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <DelayInit+0x4c>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	; (8000f84 <DelayInit+0x4c>)
 8000f4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f52:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <DelayInit+0x50>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <DelayInit+0x50>)
 8000f5a:	f023 0301 	bic.w	r3, r3, #1
 8000f5e:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000f60:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <DelayInit+0x50>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a08      	ldr	r2, [pc, #32]	; (8000f88 <DelayInit+0x50>)
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <DelayInit+0x50>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000f72:	bf00      	nop
  __ASM volatile ("NOP");
 8000f74:	bf00      	nop
  __ASM volatile ("NOP");
 8000f76:	bf00      	nop
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000edf0 	.word	0xe000edf0
 8000f88:	e0001000 	.word	0xe0001000

08000f8c <DelayUS>:

static void DelayUS(uint32_t us) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b087      	sub	sp, #28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <DelayUS+0x44>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0e      	ldr	r2, [pc, #56]	; (8000fd4 <DelayUS+0x48>)
 8000f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9e:	0c9a      	lsrs	r2, r3, #18
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	fb02 f303 	mul.w	r3, r2, r3
 8000fa6:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <DelayUS+0x4c>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <DelayUS+0x4c>)
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d8f6      	bhi.n	8000fae <DelayUS+0x22>
}
 8000fc0:	bf00      	nop
 8000fc2:	bf00      	nop
 8000fc4:	371c      	adds	r7, #28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000010 	.word	0x20000010
 8000fd4:	431bde83 	.word	0x431bde83
 8000fd8:	e0001000 	.word	0xe0001000
 8000fdc:	00000000 	.word	0x00000000

08000fe0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b096      	sub	sp, #88	; 0x58
 8000fe4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe6:	f000 fcff 	bl	80019e8 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint16_t potentiometerValue;
  uint16_t user_temp = 20;
 8000fea:	2314      	movs	r3, #20
 8000fec:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  uint16_t init_temp;
  enum stage curr = reset;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff6:	f000 f9c9 	bl	800138c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffa:	f000 fadb 	bl	80015b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ffe:	f000 faaf 	bl	8001560 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001002:	f000 fa7f 	bl	8001504 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001006:	f000 fa2b 	bl	8001460 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  // Display vars below:
  HD44780_Init(2);
 800100a:	2002      	movs	r0, #2
 800100c:	f7ff fdec 	bl	8000be8 <HD44780_Init>
  HD44780_Clear();
 8001010:	f7ff fe6e 	bl	8000cf0 <HD44780_Clear>
  HD44780_SetCursor(0,0);
 8001014:	2100      	movs	r1, #0
 8001016:	2000      	movs	r0, #0
 8001018:	f7ff fe80 	bl	8000d1c <HD44780_SetCursor>
  HD44780_PrintStr("Hi there!");
 800101c:	48ce      	ldr	r0, [pc, #824]	; (8001358 <main+0x378>)
 800101e:	f7ff feee 	bl	8000dfe <HD44780_PrintStr>
  HAL_Delay(1700);
 8001022:	f240 60a4 	movw	r0, #1700	; 0x6a4
 8001026:	f000 fd51 	bl	8001acc <HAL_Delay>
  HD44780_Clear();
 800102a:	f7ff fe61 	bl	8000cf0 <HD44780_Clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(curr==reset) {
 800102e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001032:	2b00      	cmp	r3, #0
 8001034:	d17b      	bne.n	800112e <main+0x14e>
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0) {
 8001036:	2102      	movs	r1, #2
 8001038:	48c8      	ldr	r0, [pc, #800]	; (800135c <main+0x37c>)
 800103a:	f001 fb83 	bl	8002744 <HAL_GPIO_ReadPin>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d160      	bne.n	8001106 <main+0x126>
			  user_temp = 20; // reset once
 8001044:	2314      	movs	r3, #20
 8001046:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			  curr = set_temp;
 800104a:	2301      	movs	r3, #1
 800104c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			  // Take temperature measurement
			  char i2cdata[2];
			  float temperature;
			  HAL_I2C_Mem_Read(&hi2c1, 0xB4, 0x07, 1, (uint8_t*)i2cdata, 2, 100);
 8001050:	2364      	movs	r3, #100	; 0x64
 8001052:	9302      	str	r3, [sp, #8]
 8001054:	2302      	movs	r3, #2
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2301      	movs	r3, #1
 8001060:	2207      	movs	r2, #7
 8001062:	21b4      	movs	r1, #180	; 0xb4
 8001064:	48be      	ldr	r0, [pc, #760]	; (8001360 <main+0x380>)
 8001066:	f001 fde1 	bl	8002c2c <HAL_I2C_Mem_Read>
			  int raw_temp = ((i2cdata[1] << 8) | (i2cdata[0]));
 800106a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800106e:	021b      	lsls	r3, r3, #8
 8001070:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001074:	4313      	orrs	r3, r2
 8001076:	633b      	str	r3, [r7, #48]	; 0x30
			  temperature = raw_temp*0.02 - 273.15;
 8001078:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800107a:	f7ff fb7d 	bl	8000778 <__aeabi_i2d>
 800107e:	a3b2      	add	r3, pc, #712	; (adr r3, 8001348 <main+0x368>)
 8001080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001084:	f7ff f8fc 	bl	8000280 <__aeabi_dmul>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4610      	mov	r0, r2
 800108e:	4619      	mov	r1, r3
 8001090:	a3af      	add	r3, pc, #700	; (adr r3, 8001350 <main+0x370>)
 8001092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001096:	f7ff fa21 	bl	80004dc <__aeabi_dsub>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4610      	mov	r0, r2
 80010a0:	4619      	mov	r1, r3
 80010a2:	f7ff fbd3 	bl	800084c <__aeabi_d2f>
 80010a6:	4603      	mov	r3, r0
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
			  init_temp = temperature;
 80010aa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010b2:	ee17 3a90 	vmov	r3, s15
 80010b6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			  HAL_Delay(10);
 80010ba:	200a      	movs	r0, #10
 80010bc:	f000 fd06 	bl	8001acc <HAL_Delay>
			  // Print to display
			  HD44780_Clear();
 80010c0:	f7ff fe16 	bl	8000cf0 <HD44780_Clear>
			  HD44780_SetCursor(0,0);
 80010c4:	2100      	movs	r1, #0
 80010c6:	2000      	movs	r0, #0
 80010c8:	f7ff fe28 	bl	8000d1c <HD44780_SetCursor>
			  char tempString[10];
			  sprintf(tempString, "%d", (int)temperature);
 80010cc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010d4:	f107 031c 	add.w	r3, r7, #28
 80010d8:	ee17 2a90 	vmov	r2, s15
 80010dc:	49a1      	ldr	r1, [pc, #644]	; (8001364 <main+0x384>)
 80010de:	4618      	mov	r0, r3
 80010e0:	f003 fa6c 	bl	80045bc <siprintf>
			  HD44780_PrintStr("Measured temperature:");
 80010e4:	48a0      	ldr	r0, [pc, #640]	; (8001368 <main+0x388>)
 80010e6:	f7ff fe8a 	bl	8000dfe <HD44780_PrintStr>
			  HD44780_SetCursor(0,1);
 80010ea:	2101      	movs	r1, #1
 80010ec:	2000      	movs	r0, #0
 80010ee:	f7ff fe15 	bl	8000d1c <HD44780_SetCursor>
			  HD44780_PrintStr(tempString);
 80010f2:	f107 031c 	add.w	r3, r7, #28
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fe81 	bl	8000dfe <HD44780_PrintStr>
			  HAL_Delay(1000);
 80010fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001100:	f000 fce4 	bl	8001acc <HAL_Delay>
 8001104:	e793      	b.n	800102e <main+0x4e>
		  } else {
			  HD44780_Clear();
 8001106:	f7ff fdf3 	bl	8000cf0 <HD44780_Clear>
			  HD44780_SetCursor(0,0);
 800110a:	2100      	movs	r1, #0
 800110c:	2000      	movs	r0, #0
 800110e:	f7ff fe05 	bl	8000d1c <HD44780_SetCursor>
			  HD44780_PrintStr("Push button");
 8001112:	4896      	ldr	r0, [pc, #600]	; (800136c <main+0x38c>)
 8001114:	f7ff fe73 	bl	8000dfe <HD44780_PrintStr>
			  HD44780_SetCursor(0, 1);
 8001118:	2101      	movs	r1, #1
 800111a:	2000      	movs	r0, #0
 800111c:	f7ff fdfe 	bl	8000d1c <HD44780_SetCursor>
			  HD44780_PrintStr("to start");
 8001120:	4893      	ldr	r0, [pc, #588]	; (8001370 <main+0x390>)
 8001122:	f7ff fe6c 	bl	8000dfe <HD44780_PrintStr>
			  HAL_Delay(1);
 8001126:	2001      	movs	r0, #1
 8001128:	f000 fcd0 	bl	8001acc <HAL_Delay>
 800112c:	e77f      	b.n	800102e <main+0x4e>
		  }
	  } else if(curr==set_temp) {
 800112e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001132:	2b01      	cmp	r3, #1
 8001134:	d147      	bne.n	80011c6 <main+0x1e6>
		  HAL_ADC_Start(&hadc1); // take potentiometer input
 8001136:	488f      	ldr	r0, [pc, #572]	; (8001374 <main+0x394>)
 8001138:	f000 fd30 	bl	8001b9c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800113c:	f04f 31ff 	mov.w	r1, #4294967295
 8001140:	488c      	ldr	r0, [pc, #560]	; (8001374 <main+0x394>)
 8001142:	f000 fddf 	bl	8001d04 <HAL_ADC_PollForConversion>
		  potentiometerValue = HAL_ADC_GetValue(&hadc1); // take potentiometer value
 8001146:	488b      	ldr	r0, [pc, #556]	; (8001374 <main+0x394>)
 8001148:	f000 fe67 	bl	8001e1a <HAL_ADC_GetValue>
 800114c:	4603      	mov	r3, r0
 800114e:	86fb      	strh	r3, [r7, #54]	; 0x36
		  uint16_t targetTemp = ((potentiometerValue)*(init_temp - 20)/4095)+20; // LINEAR INTERPOLATION FORMULA
 8001150:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001152:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8001156:	3a14      	subs	r2, #20
 8001158:	fb02 f303 	mul.w	r3, r2, r3
 800115c:	4a86      	ldr	r2, [pc, #536]	; (8001378 <main+0x398>)
 800115e:	fb82 1203 	smull	r1, r2, r2, r3
 8001162:	441a      	add	r2, r3
 8001164:	12d2      	asrs	r2, r2, #11
 8001166:	17db      	asrs	r3, r3, #31
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	b29b      	uxth	r3, r3
 800116c:	3314      	adds	r3, #20
 800116e:	86bb      	strh	r3, [r7, #52]	; 0x34
		  // Set display params
		  HD44780_Clear();
 8001170:	f7ff fdbe 	bl	8000cf0 <HD44780_Clear>
		  HD44780_SetCursor(0,0);
 8001174:	2100      	movs	r1, #0
 8001176:	2000      	movs	r0, #0
 8001178:	f7ff fdd0 	bl	8000d1c <HD44780_SetCursor>
		  HD44780_PrintStr("Set temperature:"); // print message and temperature
 800117c:	487f      	ldr	r0, [pc, #508]	; (800137c <main+0x39c>)
 800117e:	f7ff fe3e 	bl	8000dfe <HD44780_PrintStr>
		  char tempString[10];
		  sprintf(tempString, "%hu", targetTemp);
 8001182:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	497d      	ldr	r1, [pc, #500]	; (8001380 <main+0x3a0>)
 800118a:	4618      	mov	r0, r3
 800118c:	f003 fa16 	bl	80045bc <siprintf>
		  HD44780_SetCursor(0,1);
 8001190:	2101      	movs	r1, #1
 8001192:	2000      	movs	r0, #0
 8001194:	f7ff fdc2 	bl	8000d1c <HD44780_SetCursor>
		  HD44780_PrintStr(tempString); // temperature out!
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fe2e 	bl	8000dfe <HD44780_PrintStr>
		  HAL_Delay(10);
 80011a2:	200a      	movs	r0, #10
 80011a4:	f000 fc92 	bl	8001acc <HAL_Delay>
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0) {
 80011a8:	2102      	movs	r1, #2
 80011aa:	486c      	ldr	r0, [pc, #432]	; (800135c <main+0x37c>)
 80011ac:	f001 faca 	bl	8002744 <HAL_GPIO_ReadPin>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f47f af3b 	bne.w	800102e <main+0x4e>
			  user_temp = targetTemp;
 80011b8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80011ba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			  curr = watch_temp;
 80011be:	2302      	movs	r3, #2
 80011c0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80011c4:	e733      	b.n	800102e <main+0x4e>
		  }
	  } else if(curr==watch_temp) {
 80011c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	f040 8082 	bne.w	80012d4 <main+0x2f4>
		  // TODO: take temperature measurement -> DONE
		  char i2cdata[2];
		  float temperature;
		  HAL_I2C_Mem_Read(&hi2c1, 0xB4, 0x07, 1, (uint8_t*)i2cdata, 2, 100);
 80011d0:	2364      	movs	r3, #100	; 0x64
 80011d2:	9302      	str	r3, [sp, #8]
 80011d4:	2302      	movs	r3, #2
 80011d6:	9301      	str	r3, [sp, #4]
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2301      	movs	r3, #1
 80011e0:	2207      	movs	r2, #7
 80011e2:	21b4      	movs	r1, #180	; 0xb4
 80011e4:	485e      	ldr	r0, [pc, #376]	; (8001360 <main+0x380>)
 80011e6:	f001 fd21 	bl	8002c2c <HAL_I2C_Mem_Read>
		  int raw_temp = ((i2cdata[1] << 8) | (i2cdata[0]));
 80011ea:	7b7b      	ldrb	r3, [r7, #13]
 80011ec:	021b      	lsls	r3, r3, #8
 80011ee:	7b3a      	ldrb	r2, [r7, #12]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	63fb      	str	r3, [r7, #60]	; 0x3c
		  temperature = raw_temp*0.02 - 273.15;
 80011f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80011f6:	f7ff fabf 	bl	8000778 <__aeabi_i2d>
 80011fa:	a353      	add	r3, pc, #332	; (adr r3, 8001348 <main+0x368>)
 80011fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001200:	f7ff f83e 	bl	8000280 <__aeabi_dmul>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4610      	mov	r0, r2
 800120a:	4619      	mov	r1, r3
 800120c:	a350      	add	r3, pc, #320	; (adr r3, 8001350 <main+0x370>)
 800120e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001212:	f7ff f963 	bl	80004dc <__aeabi_dsub>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4610      	mov	r0, r2
 800121c:	4619      	mov	r1, r3
 800121e:	f7ff fb15 	bl	800084c <__aeabi_d2f>
 8001222:	4603      	mov	r3, r0
 8001224:	63bb      	str	r3, [r7, #56]	; 0x38
		  // TODO: print to display -> DONE
		  HD44780_Clear();
 8001226:	f7ff fd63 	bl	8000cf0 <HD44780_Clear>
		  HD44780_SetCursor(0,0);
 800122a:	2100      	movs	r1, #0
 800122c:	2000      	movs	r0, #0
 800122e:	f7ff fd75 	bl	8000d1c <HD44780_SetCursor>
		  char tempString[10];
		  sprintf(tempString, "%d", (int)temperature);
 8001232:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001236:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800123a:	463b      	mov	r3, r7
 800123c:	ee17 2a90 	vmov	r2, s15
 8001240:	4948      	ldr	r1, [pc, #288]	; (8001364 <main+0x384>)
 8001242:	4618      	mov	r0, r3
 8001244:	f003 f9ba 	bl	80045bc <siprintf>
		  HD44780_PrintStr("Measured temp:");
 8001248:	484e      	ldr	r0, [pc, #312]	; (8001384 <main+0x3a4>)
 800124a:	f7ff fdd8 	bl	8000dfe <HD44780_PrintStr>
		  HD44780_PrintStr(tempString);
 800124e:	463b      	mov	r3, r7
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fdd4 	bl	8000dfe <HD44780_PrintStr>
		  // TODO: compare with user temp, if close, then BUZZ -> DONE
		  HAL_Delay(1000); // allows user one second before buzz check and activate
 8001256:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800125a:	f000 fc37 	bl	8001acc <HAL_Delay>
		  if(abs(user_temp - temperature)<=5) {
 800125e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001262:	ee07 3a90 	vmov	s15, r3
 8001266:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800126a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800126e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001272:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001276:	ee17 3a90 	vmov	r3, s15
 800127a:	f113 0f05 	cmn.w	r3, #5
 800127e:	db13      	blt.n	80012a8 <main+0x2c8>
 8001280:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001284:	ee07 3a90 	vmov	s15, r3
 8001288:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800128c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001290:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001294:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001298:	ee17 3a90 	vmov	r3, s15
 800129c:	2b05      	cmp	r3, #5
 800129e:	dc03      	bgt.n	80012a8 <main+0x2c8>
			  curr = buzz;
 80012a0:	2303      	movs	r3, #3
 80012a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			  continue;
 80012a6:	e04c      	b.n	8001342 <main+0x362>
		  } else if(temperature < user_temp) {
 80012a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80012ac:	ee07 3a90 	vmov	s15, r3
 80012b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80012b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c0:	d503      	bpl.n	80012ca <main+0x2ea>
			  curr = buzz; // new redundancy
 80012c2:	2303      	movs	r3, #3
 80012c4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			  continue;
 80012c8:	e03b      	b.n	8001342 <main+0x362>
		  }
		  HAL_Delay(9000); // between temp measurements, an overall delay of 10 seconds (subject to change)
 80012ca:	f242 3028 	movw	r0, #9000	; 0x2328
 80012ce:	f000 fbfd 	bl	8001acc <HAL_Delay>
 80012d2:	e6ac      	b.n	800102e <main+0x4e>
	  } else if(curr==buzz) {
 80012d4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80012d8:	2b03      	cmp	r3, #3
 80012da:	f47f aea8 	bne.w	800102e <main+0x4e>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80012de:	2201      	movs	r2, #1
 80012e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012e4:	481d      	ldr	r0, [pc, #116]	; (800135c <main+0x37c>)
 80012e6:	f001 fa45 	bl	8002774 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 80012ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012ee:	f000 fbed 	bl	8001acc <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012f8:	4818      	ldr	r0, [pc, #96]	; (800135c <main+0x37c>)
 80012fa:	f001 fa3b 	bl	8002774 <HAL_GPIO_WritePin>
		  // Print display prompt
		  HD44780_Clear();
 80012fe:	f7ff fcf7 	bl	8000cf0 <HD44780_Clear>
		  HD44780_SetCursor(0,0);
 8001302:	2100      	movs	r1, #0
 8001304:	2000      	movs	r0, #0
 8001306:	f7ff fd09 	bl	8000d1c <HD44780_SetCursor>
		  HD44780_PrintStr("Push button");
 800130a:	4818      	ldr	r0, [pc, #96]	; (800136c <main+0x38c>)
 800130c:	f7ff fd77 	bl	8000dfe <HD44780_PrintStr>
		  HD44780_SetCursor(0, 1);
 8001310:	2101      	movs	r1, #1
 8001312:	2000      	movs	r0, #0
 8001314:	f7ff fd02 	bl	8000d1c <HD44780_SetCursor>
		  HD44780_PrintStr("to stop");
 8001318:	481b      	ldr	r0, [pc, #108]	; (8001388 <main+0x3a8>)
 800131a:	f7ff fd70 	bl	8000dfe <HD44780_PrintStr>
		  HAL_Delay(1);
 800131e:	2001      	movs	r0, #1
 8001320:	f000 fbd4 	bl	8001acc <HAL_Delay>
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0) {
 8001324:	2102      	movs	r1, #2
 8001326:	480d      	ldr	r0, [pc, #52]	; (800135c <main+0x37c>)
 8001328:	f001 fa0c 	bl	8002744 <HAL_GPIO_ReadPin>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	f47f ae7d 	bne.w	800102e <main+0x4e>
			  curr = reset;
 8001334:	2300      	movs	r3, #0
 8001336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			  HAL_Delay(1000); // new feature - delay
 800133a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800133e:	f000 fbc5 	bl	8001acc <HAL_Delay>
	  if(curr==reset) {
 8001342:	e674      	b.n	800102e <main+0x4e>
 8001344:	f3af 8000 	nop.w
 8001348:	47ae147b 	.word	0x47ae147b
 800134c:	3f947ae1 	.word	0x3f947ae1
 8001350:	66666666 	.word	0x66666666
 8001354:	40711266 	.word	0x40711266
 8001358:	08004f2c 	.word	0x08004f2c
 800135c:	40020000 	.word	0x40020000
 8001360:	200000d8 	.word	0x200000d8
 8001364:	08004f38 	.word	0x08004f38
 8001368:	08004f3c 	.word	0x08004f3c
 800136c:	08004f54 	.word	0x08004f54
 8001370:	08004f60 	.word	0x08004f60
 8001374:	20000090 	.word	0x20000090
 8001378:	80080081 	.word	0x80080081
 800137c:	08004f6c 	.word	0x08004f6c
 8001380:	08004f80 	.word	0x08004f80
 8001384:	08004f84 	.word	0x08004f84
 8001388:	08004f94 	.word	0x08004f94

0800138c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b094      	sub	sp, #80	; 0x50
 8001390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001392:	f107 0320 	add.w	r3, r7, #32
 8001396:	2230      	movs	r2, #48	; 0x30
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f003 f92e 	bl	80045fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b0:	2300      	movs	r3, #0
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	4b28      	ldr	r3, [pc, #160]	; (8001458 <SystemClock_Config+0xcc>)
 80013b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b8:	4a27      	ldr	r2, [pc, #156]	; (8001458 <SystemClock_Config+0xcc>)
 80013ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013be:	6413      	str	r3, [r2, #64]	; 0x40
 80013c0:	4b25      	ldr	r3, [pc, #148]	; (8001458 <SystemClock_Config+0xcc>)
 80013c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80013cc:	2300      	movs	r3, #0
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	4b22      	ldr	r3, [pc, #136]	; (800145c <SystemClock_Config+0xd0>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013d8:	4a20      	ldr	r2, [pc, #128]	; (800145c <SystemClock_Config+0xd0>)
 80013da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	4b1e      	ldr	r3, [pc, #120]	; (800145c <SystemClock_Config+0xd0>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013ec:	2302      	movs	r3, #2
 80013ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013f0:	2301      	movs	r3, #1
 80013f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013f4:	2310      	movs	r3, #16
 80013f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f8:	2302      	movs	r3, #2
 80013fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013fc:	2300      	movs	r3, #0
 80013fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001400:	2308      	movs	r3, #8
 8001402:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001404:	2348      	movs	r3, #72	; 0x48
 8001406:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001408:	2302      	movs	r3, #2
 800140a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800140c:	2307      	movs	r3, #7
 800140e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001410:	f107 0320 	add.w	r3, r7, #32
 8001414:	4618      	mov	r0, r3
 8001416:	f002 f977 	bl	8003708 <HAL_RCC_OscConfig>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001420:	f000 f944 	bl	80016ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001424:	230f      	movs	r3, #15
 8001426:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001428:	2302      	movs	r3, #2
 800142a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001430:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001434:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001436:	2300      	movs	r3, #0
 8001438:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800143a:	f107 030c 	add.w	r3, r7, #12
 800143e:	2102      	movs	r1, #2
 8001440:	4618      	mov	r0, r3
 8001442:	f002 fbd9 	bl	8003bf8 <HAL_RCC_ClockConfig>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800144c:	f000 f92e 	bl	80016ac <Error_Handler>
  }
}
 8001450:	bf00      	nop
 8001452:	3750      	adds	r7, #80	; 0x50
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40023800 	.word	0x40023800
 800145c:	40007000 	.word	0x40007000

08001460 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001466:	463b      	mov	r3, r7
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001472:	4b21      	ldr	r3, [pc, #132]	; (80014f8 <MX_ADC1_Init+0x98>)
 8001474:	4a21      	ldr	r2, [pc, #132]	; (80014fc <MX_ADC1_Init+0x9c>)
 8001476:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001478:	4b1f      	ldr	r3, [pc, #124]	; (80014f8 <MX_ADC1_Init+0x98>)
 800147a:	2200      	movs	r2, #0
 800147c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800147e:	4b1e      	ldr	r3, [pc, #120]	; (80014f8 <MX_ADC1_Init+0x98>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001484:	4b1c      	ldr	r3, [pc, #112]	; (80014f8 <MX_ADC1_Init+0x98>)
 8001486:	2200      	movs	r2, #0
 8001488:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800148a:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <MX_ADC1_Init+0x98>)
 800148c:	2200      	movs	r2, #0
 800148e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001490:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <MX_ADC1_Init+0x98>)
 8001492:	2200      	movs	r2, #0
 8001494:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001498:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <MX_ADC1_Init+0x98>)
 800149a:	2200      	movs	r2, #0
 800149c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800149e:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <MX_ADC1_Init+0x98>)
 80014a0:	4a17      	ldr	r2, [pc, #92]	; (8001500 <MX_ADC1_Init+0xa0>)
 80014a2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014a4:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <MX_ADC1_Init+0x98>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014aa:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <MX_ADC1_Init+0x98>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <MX_ADC1_Init+0x98>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014b8:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <MX_ADC1_Init+0x98>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014be:	480e      	ldr	r0, [pc, #56]	; (80014f8 <MX_ADC1_Init+0x98>)
 80014c0:	f000 fb28 	bl	8001b14 <HAL_ADC_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80014ca:	f000 f8ef 	bl	80016ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014d2:	2301      	movs	r3, #1
 80014d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014da:	463b      	mov	r3, r7
 80014dc:	4619      	mov	r1, r3
 80014de:	4806      	ldr	r0, [pc, #24]	; (80014f8 <MX_ADC1_Init+0x98>)
 80014e0:	f000 fca8 	bl	8001e34 <HAL_ADC_ConfigChannel>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80014ea:	f000 f8df 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000090 	.word	0x20000090
 80014fc:	40012000 	.word	0x40012000
 8001500:	0f000001 	.word	0x0f000001

08001504 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <MX_I2C1_Init+0x50>)
 800150a:	4a13      	ldr	r2, [pc, #76]	; (8001558 <MX_I2C1_Init+0x54>)
 800150c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <MX_I2C1_Init+0x50>)
 8001510:	4a12      	ldr	r2, [pc, #72]	; (800155c <MX_I2C1_Init+0x58>)
 8001512:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <MX_I2C1_Init+0x50>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800151a:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <MX_I2C1_Init+0x50>)
 800151c:	2200      	movs	r2, #0
 800151e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <MX_I2C1_Init+0x50>)
 8001522:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001526:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001528:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <MX_I2C1_Init+0x50>)
 800152a:	2200      	movs	r2, #0
 800152c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <MX_I2C1_Init+0x50>)
 8001530:	2200      	movs	r2, #0
 8001532:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001534:	4b07      	ldr	r3, [pc, #28]	; (8001554 <MX_I2C1_Init+0x50>)
 8001536:	2200      	movs	r2, #0
 8001538:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <MX_I2C1_Init+0x50>)
 800153c:	2200      	movs	r2, #0
 800153e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001540:	4804      	ldr	r0, [pc, #16]	; (8001554 <MX_I2C1_Init+0x50>)
 8001542:	f001 f931 	bl	80027a8 <HAL_I2C_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800154c:	f000 f8ae 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}
 8001554:	200000d8 	.word	0x200000d8
 8001558:	40005400 	.word	0x40005400
 800155c:	000186a0 	.word	0x000186a0

08001560 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 8001566:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <MX_USART2_UART_Init+0x50>)
 8001568:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 800156c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001570:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 8001586:	220c      	movs	r2, #12
 8001588:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001596:	4805      	ldr	r0, [pc, #20]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 8001598:	f002 fd4e 	bl	8004038 <HAL_UART_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015a2:	f000 f883 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	2000012c 	.word	0x2000012c
 80015b0:	40004400 	.word	0x40004400

080015b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
 80015c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	4b34      	ldr	r3, [pc, #208]	; (80016a0 <MX_GPIO_Init+0xec>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a33      	ldr	r2, [pc, #204]	; (80016a0 <MX_GPIO_Init+0xec>)
 80015d4:	f043 0304 	orr.w	r3, r3, #4
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <MX_GPIO_Init+0xec>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	4b2d      	ldr	r3, [pc, #180]	; (80016a0 <MX_GPIO_Init+0xec>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a2c      	ldr	r2, [pc, #176]	; (80016a0 <MX_GPIO_Init+0xec>)
 80015f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b2a      	ldr	r3, [pc, #168]	; (80016a0 <MX_GPIO_Init+0xec>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	4b26      	ldr	r3, [pc, #152]	; (80016a0 <MX_GPIO_Init+0xec>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a25      	ldr	r2, [pc, #148]	; (80016a0 <MX_GPIO_Init+0xec>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <MX_GPIO_Init+0xec>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	4b1f      	ldr	r3, [pc, #124]	; (80016a0 <MX_GPIO_Init+0xec>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a1e      	ldr	r2, [pc, #120]	; (80016a0 <MX_GPIO_Init+0xec>)
 8001628:	f043 0302 	orr.w	r3, r3, #2
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <MX_GPIO_Init+0xec>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 800163a:	2200      	movs	r2, #0
 800163c:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001640:	4818      	ldr	r0, [pc, #96]	; (80016a4 <MX_GPIO_Init+0xf0>)
 8001642:	f001 f897 	bl	8002774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001646:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800164a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800164c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	4619      	mov	r1, r3
 800165c:	4812      	ldr	r0, [pc, #72]	; (80016a8 <MX_GPIO_Init+0xf4>)
 800165e:	f000 feed 	bl	800243c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001662:	2302      	movs	r3, #2
 8001664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001666:	2300      	movs	r3, #0
 8001668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4619      	mov	r1, r3
 8001674:	480b      	ldr	r0, [pc, #44]	; (80016a4 <MX_GPIO_Init+0xf0>)
 8001676:	f000 fee1 	bl	800243c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 800167a:	f44f 7308 	mov.w	r3, #544	; 0x220
 800167e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001680:	2301      	movs	r3, #1
 8001682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001688:	2300      	movs	r3, #0
 800168a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4619      	mov	r1, r3
 8001692:	4804      	ldr	r0, [pc, #16]	; (80016a4 <MX_GPIO_Init+0xf0>)
 8001694:	f000 fed2 	bl	800243c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001698:	bf00      	nop
 800169a:	3728      	adds	r7, #40	; 0x28
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020000 	.word	0x40020000
 80016a8:	40020800 	.word	0x40020800

080016ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b0:	b672      	cpsid	i
}
 80016b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <Error_Handler+0x8>
	...

080016b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <HAL_MspInit+0x4c>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	4a0f      	ldr	r2, [pc, #60]	; (8001704 <HAL_MspInit+0x4c>)
 80016c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016cc:	6453      	str	r3, [r2, #68]	; 0x44
 80016ce:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <HAL_MspInit+0x4c>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	603b      	str	r3, [r7, #0]
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <HAL_MspInit+0x4c>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	4a08      	ldr	r2, [pc, #32]	; (8001704 <HAL_MspInit+0x4c>)
 80016e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_MspInit+0x4c>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f2:	603b      	str	r3, [r7, #0]
 80016f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016f6:	2007      	movs	r0, #7
 80016f8:	f000 fe6c 	bl	80023d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40023800 	.word	0x40023800

08001708 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	; 0x28
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a17      	ldr	r2, [pc, #92]	; (8001784 <HAL_ADC_MspInit+0x7c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d127      	bne.n	800177a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	4b16      	ldr	r3, [pc, #88]	; (8001788 <HAL_ADC_MspInit+0x80>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	4a15      	ldr	r2, [pc, #84]	; (8001788 <HAL_ADC_MspInit+0x80>)
 8001734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001738:	6453      	str	r3, [r2, #68]	; 0x44
 800173a:	4b13      	ldr	r3, [pc, #76]	; (8001788 <HAL_ADC_MspInit+0x80>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <HAL_ADC_MspInit+0x80>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a0e      	ldr	r2, [pc, #56]	; (8001788 <HAL_ADC_MspInit+0x80>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <HAL_ADC_MspInit+0x80>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001762:	2301      	movs	r3, #1
 8001764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001766:	2303      	movs	r3, #3
 8001768:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	4619      	mov	r1, r3
 8001774:	4805      	ldr	r0, [pc, #20]	; (800178c <HAL_ADC_MspInit+0x84>)
 8001776:	f000 fe61 	bl	800243c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800177a:	bf00      	nop
 800177c:	3728      	adds	r7, #40	; 0x28
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40012000 	.word	0x40012000
 8001788:	40023800 	.word	0x40023800
 800178c:	40020000 	.word	0x40020000

08001790 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08a      	sub	sp, #40	; 0x28
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a19      	ldr	r2, [pc, #100]	; (8001814 <HAL_I2C_MspInit+0x84>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d12c      	bne.n	800180c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	4b18      	ldr	r3, [pc, #96]	; (8001818 <HAL_I2C_MspInit+0x88>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a17      	ldr	r2, [pc, #92]	; (8001818 <HAL_I2C_MspInit+0x88>)
 80017bc:	f043 0302 	orr.w	r3, r3, #2
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <HAL_I2C_MspInit+0x88>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017d4:	2312      	movs	r3, #18
 80017d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017dc:	2303      	movs	r3, #3
 80017de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017e0:	2304      	movs	r3, #4
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	4619      	mov	r1, r3
 80017ea:	480c      	ldr	r0, [pc, #48]	; (800181c <HAL_I2C_MspInit+0x8c>)
 80017ec:	f000 fe26 	bl	800243c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017f0:	2300      	movs	r3, #0
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <HAL_I2C_MspInit+0x88>)
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	4a07      	ldr	r2, [pc, #28]	; (8001818 <HAL_I2C_MspInit+0x88>)
 80017fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001800:	4b05      	ldr	r3, [pc, #20]	; (8001818 <HAL_I2C_MspInit+0x88>)
 8001802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800180c:	bf00      	nop
 800180e:	3728      	adds	r7, #40	; 0x28
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40005400 	.word	0x40005400
 8001818:	40023800 	.word	0x40023800
 800181c:	40020400 	.word	0x40020400

08001820 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	; 0x28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a19      	ldr	r2, [pc, #100]	; (80018a4 <HAL_UART_MspInit+0x84>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d12b      	bne.n	800189a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	4b18      	ldr	r3, [pc, #96]	; (80018a8 <HAL_UART_MspInit+0x88>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	4a17      	ldr	r2, [pc, #92]	; (80018a8 <HAL_UART_MspInit+0x88>)
 800184c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001850:	6413      	str	r3, [r2, #64]	; 0x40
 8001852:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <HAL_UART_MspInit+0x88>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <HAL_UART_MspInit+0x88>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a10      	ldr	r2, [pc, #64]	; (80018a8 <HAL_UART_MspInit+0x88>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <HAL_UART_MspInit+0x88>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800187a:	230c      	movs	r3, #12
 800187c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	2302      	movs	r3, #2
 8001880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800188a:	2307      	movs	r3, #7
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	4619      	mov	r1, r3
 8001894:	4805      	ldr	r0, [pc, #20]	; (80018ac <HAL_UART_MspInit+0x8c>)
 8001896:	f000 fdd1 	bl	800243c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800189a:	bf00      	nop
 800189c:	3728      	adds	r7, #40	; 0x28
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40004400 	.word	0x40004400
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40020000 	.word	0x40020000

080018b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <NMI_Handler+0x4>

080018b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <HardFault_Handler+0x4>

080018bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <MemManage_Handler+0x4>

080018c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c6:	e7fe      	b.n	80018c6 <BusFault_Handler+0x4>

080018c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018cc:	e7fe      	b.n	80018cc <UsageFault_Handler+0x4>

080018ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018fc:	f000 f8c6 	bl	8001a8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}

08001904 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800190c:	4a14      	ldr	r2, [pc, #80]	; (8001960 <_sbrk+0x5c>)
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <_sbrk+0x60>)
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001918:	4b13      	ldr	r3, [pc, #76]	; (8001968 <_sbrk+0x64>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d102      	bne.n	8001926 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <_sbrk+0x64>)
 8001922:	4a12      	ldr	r2, [pc, #72]	; (800196c <_sbrk+0x68>)
 8001924:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001926:	4b10      	ldr	r3, [pc, #64]	; (8001968 <_sbrk+0x64>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	429a      	cmp	r2, r3
 8001932:	d207      	bcs.n	8001944 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001934:	f002 fe6a 	bl	800460c <__errno>
 8001938:	4603      	mov	r3, r0
 800193a:	220c      	movs	r2, #12
 800193c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800193e:	f04f 33ff 	mov.w	r3, #4294967295
 8001942:	e009      	b.n	8001958 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001944:	4b08      	ldr	r3, [pc, #32]	; (8001968 <_sbrk+0x64>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800194a:	4b07      	ldr	r3, [pc, #28]	; (8001968 <_sbrk+0x64>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	4a05      	ldr	r2, [pc, #20]	; (8001968 <_sbrk+0x64>)
 8001954:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001956:	68fb      	ldr	r3, [r7, #12]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20018000 	.word	0x20018000
 8001964:	00000400 	.word	0x00000400
 8001968:	20000170 	.word	0x20000170
 800196c:	200002c0 	.word	0x200002c0

08001970 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <SystemInit+0x20>)
 8001976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800197a:	4a05      	ldr	r2, [pc, #20]	; (8001990 <SystemInit+0x20>)
 800197c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001980:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001994:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001998:	480d      	ldr	r0, [pc, #52]	; (80019d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800199a:	490e      	ldr	r1, [pc, #56]	; (80019d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800199c:	4a0e      	ldr	r2, [pc, #56]	; (80019d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800199e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019a0:	e002      	b.n	80019a8 <LoopCopyDataInit>

080019a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019a6:	3304      	adds	r3, #4

080019a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019ac:	d3f9      	bcc.n	80019a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ae:	4a0b      	ldr	r2, [pc, #44]	; (80019dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019b0:	4c0b      	ldr	r4, [pc, #44]	; (80019e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b4:	e001      	b.n	80019ba <LoopFillZerobss>

080019b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b8:	3204      	adds	r2, #4

080019ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019bc:	d3fb      	bcc.n	80019b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019be:	f7ff ffd7 	bl	8001970 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019c2:	f002 fe29 	bl	8004618 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019c6:	f7ff fb0b 	bl	8000fe0 <main>
  bx  lr    
 80019ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019cc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80019d8:	08004ff8 	.word	0x08004ff8
  ldr r2, =_sbss
 80019dc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80019e0:	200002c0 	.word	0x200002c0

080019e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019e4:	e7fe      	b.n	80019e4 <ADC_IRQHandler>
	...

080019e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019ec:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <HAL_Init+0x40>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a0d      	ldr	r2, [pc, #52]	; (8001a28 <HAL_Init+0x40>)
 80019f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <HAL_Init+0x40>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <HAL_Init+0x40>)
 80019fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a04:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <HAL_Init+0x40>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a07      	ldr	r2, [pc, #28]	; (8001a28 <HAL_Init+0x40>)
 8001a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a10:	2003      	movs	r0, #3
 8001a12:	f000 fcdf 	bl	80023d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a16:	2000      	movs	r0, #0
 8001a18:	f000 f808 	bl	8001a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a1c:	f7ff fe4c 	bl	80016b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023c00 	.word	0x40023c00

08001a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <HAL_InitTick+0x54>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <HAL_InitTick+0x58>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 fce9 	bl	8002422 <HAL_SYSTICK_Config>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e00e      	b.n	8001a78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b0f      	cmp	r3, #15
 8001a5e:	d80a      	bhi.n	8001a76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a60:	2200      	movs	r2, #0
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	f04f 30ff 	mov.w	r0, #4294967295
 8001a68:	f000 fcbf 	bl	80023ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a6c:	4a06      	ldr	r2, [pc, #24]	; (8001a88 <HAL_InitTick+0x5c>)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	e000      	b.n	8001a78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000010 	.word	0x20000010
 8001a84:	20000018 	.word	0x20000018
 8001a88:	20000014 	.word	0x20000014

08001a8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_IncTick+0x20>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	461a      	mov	r2, r3
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_IncTick+0x24>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <HAL_IncTick+0x24>)
 8001a9e:	6013      	str	r3, [r2, #0]
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	20000018 	.word	0x20000018
 8001ab0:	20000174 	.word	0x20000174

08001ab4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab8:	4b03      	ldr	r3, [pc, #12]	; (8001ac8 <HAL_GetTick+0x14>)
 8001aba:	681b      	ldr	r3, [r3, #0]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20000174 	.word	0x20000174

08001acc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad4:	f7ff ffee 	bl	8001ab4 <HAL_GetTick>
 8001ad8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae4:	d005      	beq.n	8001af2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ae6:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <HAL_Delay+0x44>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	461a      	mov	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	4413      	add	r3, r2
 8001af0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001af2:	bf00      	nop
 8001af4:	f7ff ffde 	bl	8001ab4 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d8f7      	bhi.n	8001af4 <HAL_Delay+0x28>
  {
  }
}
 8001b04:	bf00      	nop
 8001b06:	bf00      	nop
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000018 	.word	0x20000018

08001b14 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e033      	b.n	8001b92 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d109      	bne.n	8001b46 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff fde8 	bl	8001708 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f003 0310 	and.w	r3, r3, #16
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d118      	bne.n	8001b84 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b5a:	f023 0302 	bic.w	r3, r3, #2
 8001b5e:	f043 0202 	orr.w	r2, r3, #2
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 fa86 	bl	8002078 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	f023 0303 	bic.w	r3, r3, #3
 8001b7a:	f043 0201 	orr.w	r2, r3, #1
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	641a      	str	r2, [r3, #64]	; 0x40
 8001b82:	e001      	b.n	8001b88 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
	...

08001b9c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d101      	bne.n	8001bb6 <HAL_ADC_Start+0x1a>
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e097      	b.n	8001ce6 <HAL_ADC_Start+0x14a>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d018      	beq.n	8001bfe <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0201 	orr.w	r2, r2, #1
 8001bda:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bdc:	4b45      	ldr	r3, [pc, #276]	; (8001cf4 <HAL_ADC_Start+0x158>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a45      	ldr	r2, [pc, #276]	; (8001cf8 <HAL_ADC_Start+0x15c>)
 8001be2:	fba2 2303 	umull	r2, r3, r2, r3
 8001be6:	0c9a      	lsrs	r2, r3, #18
 8001be8:	4613      	mov	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4413      	add	r3, r2
 8001bee:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001bf0:	e002      	b.n	8001bf8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f9      	bne.n	8001bf2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d15f      	bne.n	8001ccc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c10:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c14:	f023 0301 	bic.w	r3, r3, #1
 8001c18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d007      	beq.n	8001c3e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c36:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c4a:	d106      	bne.n	8001c5a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c50:	f023 0206 	bic.w	r2, r3, #6
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	645a      	str	r2, [r3, #68]	; 0x44
 8001c58:	e002      	b.n	8001c60 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c68:	4b24      	ldr	r3, [pc, #144]	; (8001cfc <HAL_ADC_Start+0x160>)
 8001c6a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c74:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f003 031f 	and.w	r3, r3, #31
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10f      	bne.n	8001ca2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d129      	bne.n	8001ce4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689a      	ldr	r2, [r3, #8]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	e020      	b.n	8001ce4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a16      	ldr	r2, [pc, #88]	; (8001d00 <HAL_ADC_Start+0x164>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d11b      	bne.n	8001ce4 <HAL_ADC_Start+0x148>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d114      	bne.n	8001ce4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	e00b      	b.n	8001ce4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	f043 0210 	orr.w	r2, r3, #16
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cdc:	f043 0201 	orr.w	r2, r3, #1
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	20000010 	.word	0x20000010
 8001cf8:	431bde83 	.word	0x431bde83
 8001cfc:	40012300 	.word	0x40012300
 8001d00:	40012000 	.word	0x40012000

08001d04 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d20:	d113      	bne.n	8001d4a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d30:	d10b      	bne.n	8001d4a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	f043 0220 	orr.w	r2, r3, #32
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e063      	b.n	8001e12 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001d4a:	f7ff feb3 	bl	8001ab4 <HAL_GetTick>
 8001d4e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d50:	e021      	b.n	8001d96 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d58:	d01d      	beq.n	8001d96 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d007      	beq.n	8001d70 <HAL_ADC_PollForConversion+0x6c>
 8001d60:	f7ff fea8 	bl	8001ab4 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d212      	bcs.n	8001d96 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d00b      	beq.n	8001d96 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f043 0204 	orr.w	r2, r3, #4
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e03d      	b.n	8001e12 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d1d6      	bne.n	8001d52 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f06f 0212 	mvn.w	r2, #18
 8001dac:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d123      	bne.n	8001e10 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d11f      	bne.n	8001e10 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d006      	beq.n	8001dec <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d111      	bne.n	8001e10 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d105      	bne.n	8001e10 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	f043 0201 	orr.w	r2, r3, #1
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d101      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x1c>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e105      	b.n	800205c <HAL_ADC_ConfigChannel+0x228>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b09      	cmp	r3, #9
 8001e5e:	d925      	bls.n	8001eac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68d9      	ldr	r1, [r3, #12]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4613      	mov	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4413      	add	r3, r2
 8001e74:	3b1e      	subs	r3, #30
 8001e76:	2207      	movs	r2, #7
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43da      	mvns	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	400a      	ands	r2, r1
 8001e84:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68d9      	ldr	r1, [r3, #12]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	4618      	mov	r0, r3
 8001e98:	4603      	mov	r3, r0
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4403      	add	r3, r0
 8001e9e:	3b1e      	subs	r3, #30
 8001ea0:	409a      	lsls	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	e022      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6919      	ldr	r1, [r3, #16]
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4613      	mov	r3, r2
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	4413      	add	r3, r2
 8001ec0:	2207      	movs	r2, #7
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43da      	mvns	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	400a      	ands	r2, r1
 8001ece:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6919      	ldr	r1, [r3, #16]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	4403      	add	r3, r0
 8001ee8:	409a      	lsls	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b06      	cmp	r3, #6
 8001ef8:	d824      	bhi.n	8001f44 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	3b05      	subs	r3, #5
 8001f0c:	221f      	movs	r2, #31
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43da      	mvns	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	400a      	ands	r2, r1
 8001f1a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	4618      	mov	r0, r3
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	3b05      	subs	r3, #5
 8001f36:	fa00 f203 	lsl.w	r2, r0, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	635a      	str	r2, [r3, #52]	; 0x34
 8001f42:	e04c      	b.n	8001fde <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b0c      	cmp	r3, #12
 8001f4a:	d824      	bhi.n	8001f96 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3b23      	subs	r3, #35	; 0x23
 8001f5e:	221f      	movs	r2, #31
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43da      	mvns	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	400a      	ands	r2, r1
 8001f6c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	3b23      	subs	r3, #35	; 0x23
 8001f88:	fa00 f203 	lsl.w	r2, r0, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	631a      	str	r2, [r3, #48]	; 0x30
 8001f94:	e023      	b.n	8001fde <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3b41      	subs	r3, #65	; 0x41
 8001fa8:	221f      	movs	r2, #31
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43da      	mvns	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	400a      	ands	r2, r1
 8001fb6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	3b41      	subs	r3, #65	; 0x41
 8001fd2:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fde:	4b22      	ldr	r3, [pc, #136]	; (8002068 <HAL_ADC_ConfigChannel+0x234>)
 8001fe0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a21      	ldr	r2, [pc, #132]	; (800206c <HAL_ADC_ConfigChannel+0x238>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d109      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x1cc>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b12      	cmp	r3, #18
 8001ff2:	d105      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a19      	ldr	r2, [pc, #100]	; (800206c <HAL_ADC_ConfigChannel+0x238>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d123      	bne.n	8002052 <HAL_ADC_ConfigChannel+0x21e>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2b10      	cmp	r3, #16
 8002010:	d003      	beq.n	800201a <HAL_ADC_ConfigChannel+0x1e6>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2b11      	cmp	r3, #17
 8002018:	d11b      	bne.n	8002052 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b10      	cmp	r3, #16
 800202c:	d111      	bne.n	8002052 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800202e:	4b10      	ldr	r3, [pc, #64]	; (8002070 <HAL_ADC_ConfigChannel+0x23c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a10      	ldr	r2, [pc, #64]	; (8002074 <HAL_ADC_ConfigChannel+0x240>)
 8002034:	fba2 2303 	umull	r2, r3, r2, r3
 8002038:	0c9a      	lsrs	r2, r3, #18
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002044:	e002      	b.n	800204c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	3b01      	subs	r3, #1
 800204a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f9      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	40012300 	.word	0x40012300
 800206c:	40012000 	.word	0x40012000
 8002070:	20000010 	.word	0x20000010
 8002074:	431bde83 	.word	0x431bde83

08002078 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002080:	4b79      	ldr	r3, [pc, #484]	; (8002268 <ADC_Init+0x1f0>)
 8002082:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	431a      	orrs	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6859      	ldr	r1, [r3, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	021a      	lsls	r2, r3, #8
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6859      	ldr	r1, [r3, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6899      	ldr	r1, [r3, #8]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210a:	4a58      	ldr	r2, [pc, #352]	; (800226c <ADC_Init+0x1f4>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d022      	beq.n	8002156 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800211e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6899      	ldr	r1, [r3, #8]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002140:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6899      	ldr	r1, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	e00f      	b.n	8002176 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002164:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002174:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0202 	bic.w	r2, r2, #2
 8002184:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6899      	ldr	r1, [r3, #8]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	7e1b      	ldrb	r3, [r3, #24]
 8002190:	005a      	lsls	r2, r3, #1
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d01b      	beq.n	80021dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6859      	ldr	r1, [r3, #4]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	3b01      	subs	r3, #1
 80021d0:	035a      	lsls	r2, r3, #13
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	e007      	b.n	80021ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	3b01      	subs	r3, #1
 8002208:	051a      	lsls	r2, r3, #20
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002220:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6899      	ldr	r1, [r3, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800222e:	025a      	lsls	r2, r3, #9
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002246:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6899      	ldr	r1, [r3, #8]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	029a      	lsls	r2, r3, #10
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	609a      	str	r2, [r3, #8]
}
 800225c:	bf00      	nop
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	40012300 	.word	0x40012300
 800226c:	0f000001 	.word	0x0f000001

08002270 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002280:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002286:	68ba      	ldr	r2, [r7, #8]
 8002288:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800228c:	4013      	ands	r3, r2
 800228e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002298:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800229c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022a2:	4a04      	ldr	r2, [pc, #16]	; (80022b4 <__NVIC_SetPriorityGrouping+0x44>)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	60d3      	str	r3, [r2, #12]
}
 80022a8:	bf00      	nop
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022bc:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <__NVIC_GetPriorityGrouping+0x18>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	0a1b      	lsrs	r3, r3, #8
 80022c2:	f003 0307 	and.w	r3, r3, #7
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	6039      	str	r1, [r7, #0]
 80022de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	db0a      	blt.n	80022fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	490c      	ldr	r1, [pc, #48]	; (8002320 <__NVIC_SetPriority+0x4c>)
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	0112      	lsls	r2, r2, #4
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	440b      	add	r3, r1
 80022f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022fc:	e00a      	b.n	8002314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	b2da      	uxtb	r2, r3
 8002302:	4908      	ldr	r1, [pc, #32]	; (8002324 <__NVIC_SetPriority+0x50>)
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	3b04      	subs	r3, #4
 800230c:	0112      	lsls	r2, r2, #4
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	440b      	add	r3, r1
 8002312:	761a      	strb	r2, [r3, #24]
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	e000e100 	.word	0xe000e100
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002328:	b480      	push	{r7}
 800232a:	b089      	sub	sp, #36	; 0x24
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f1c3 0307 	rsb	r3, r3, #7
 8002342:	2b04      	cmp	r3, #4
 8002344:	bf28      	it	cs
 8002346:	2304      	movcs	r3, #4
 8002348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	3304      	adds	r3, #4
 800234e:	2b06      	cmp	r3, #6
 8002350:	d902      	bls.n	8002358 <NVIC_EncodePriority+0x30>
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3b03      	subs	r3, #3
 8002356:	e000      	b.n	800235a <NVIC_EncodePriority+0x32>
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800235c:	f04f 32ff 	mov.w	r2, #4294967295
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43da      	mvns	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	401a      	ands	r2, r3
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002370:	f04f 31ff 	mov.w	r1, #4294967295
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	fa01 f303 	lsl.w	r3, r1, r3
 800237a:	43d9      	mvns	r1, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002380:	4313      	orrs	r3, r2
         );
}
 8002382:	4618      	mov	r0, r3
 8002384:	3724      	adds	r7, #36	; 0x24
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
	...

08002390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3b01      	subs	r3, #1
 800239c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023a0:	d301      	bcc.n	80023a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023a2:	2301      	movs	r3, #1
 80023a4:	e00f      	b.n	80023c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023a6:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <SysTick_Config+0x40>)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ae:	210f      	movs	r1, #15
 80023b0:	f04f 30ff 	mov.w	r0, #4294967295
 80023b4:	f7ff ff8e 	bl	80022d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b8:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <SysTick_Config+0x40>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023be:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <SysTick_Config+0x40>)
 80023c0:	2207      	movs	r2, #7
 80023c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	e000e010 	.word	0xe000e010

080023d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7ff ff47 	bl	8002270 <__NVIC_SetPriorityGrouping>
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b086      	sub	sp, #24
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	4603      	mov	r3, r0
 80023f2:	60b9      	str	r1, [r7, #8]
 80023f4:	607a      	str	r2, [r7, #4]
 80023f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023fc:	f7ff ff5c 	bl	80022b8 <__NVIC_GetPriorityGrouping>
 8002400:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	68b9      	ldr	r1, [r7, #8]
 8002406:	6978      	ldr	r0, [r7, #20]
 8002408:	f7ff ff8e 	bl	8002328 <NVIC_EncodePriority>
 800240c:	4602      	mov	r2, r0
 800240e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff ff5d 	bl	80022d4 <__NVIC_SetPriority>
}
 800241a:	bf00      	nop
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b082      	sub	sp, #8
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff ffb0 	bl	8002390 <SysTick_Config>
 8002430:	4603      	mov	r3, r0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800243c:	b480      	push	{r7}
 800243e:	b089      	sub	sp, #36	; 0x24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800244e:	2300      	movs	r3, #0
 8002450:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
 8002456:	e159      	b.n	800270c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002458:	2201      	movs	r2, #1
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	4013      	ands	r3, r2
 800246a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	429a      	cmp	r2, r3
 8002472:	f040 8148 	bne.w	8002706 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	2b01      	cmp	r3, #1
 8002480:	d005      	beq.n	800248e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800248a:	2b02      	cmp	r3, #2
 800248c:	d130      	bne.n	80024f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	2203      	movs	r2, #3
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43db      	mvns	r3, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4013      	ands	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024c4:	2201      	movs	r2, #1
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	43db      	mvns	r3, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4013      	ands	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	091b      	lsrs	r3, r3, #4
 80024da:	f003 0201 	and.w	r2, r3, #1
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	d017      	beq.n	800252c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	2203      	movs	r2, #3
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 0303 	and.w	r3, r3, #3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d123      	bne.n	8002580 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	08da      	lsrs	r2, r3, #3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3208      	adds	r2, #8
 8002540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002544:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	220f      	movs	r2, #15
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4013      	ands	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4313      	orrs	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	08da      	lsrs	r2, r3, #3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3208      	adds	r2, #8
 800257a:	69b9      	ldr	r1, [r7, #24]
 800257c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	2203      	movs	r2, #3
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 0203 	and.w	r2, r3, #3
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 80a2 	beq.w	8002706 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	4b57      	ldr	r3, [pc, #348]	; (8002724 <HAL_GPIO_Init+0x2e8>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	4a56      	ldr	r2, [pc, #344]	; (8002724 <HAL_GPIO_Init+0x2e8>)
 80025cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025d0:	6453      	str	r3, [r2, #68]	; 0x44
 80025d2:	4b54      	ldr	r3, [pc, #336]	; (8002724 <HAL_GPIO_Init+0x2e8>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025de:	4a52      	ldr	r2, [pc, #328]	; (8002728 <HAL_GPIO_Init+0x2ec>)
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	089b      	lsrs	r3, r3, #2
 80025e4:	3302      	adds	r3, #2
 80025e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	220f      	movs	r2, #15
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43db      	mvns	r3, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4013      	ands	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a49      	ldr	r2, [pc, #292]	; (800272c <HAL_GPIO_Init+0x2f0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d019      	beq.n	800263e <HAL_GPIO_Init+0x202>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a48      	ldr	r2, [pc, #288]	; (8002730 <HAL_GPIO_Init+0x2f4>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d013      	beq.n	800263a <HAL_GPIO_Init+0x1fe>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a47      	ldr	r2, [pc, #284]	; (8002734 <HAL_GPIO_Init+0x2f8>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00d      	beq.n	8002636 <HAL_GPIO_Init+0x1fa>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a46      	ldr	r2, [pc, #280]	; (8002738 <HAL_GPIO_Init+0x2fc>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d007      	beq.n	8002632 <HAL_GPIO_Init+0x1f6>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a45      	ldr	r2, [pc, #276]	; (800273c <HAL_GPIO_Init+0x300>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d101      	bne.n	800262e <HAL_GPIO_Init+0x1f2>
 800262a:	2304      	movs	r3, #4
 800262c:	e008      	b.n	8002640 <HAL_GPIO_Init+0x204>
 800262e:	2307      	movs	r3, #7
 8002630:	e006      	b.n	8002640 <HAL_GPIO_Init+0x204>
 8002632:	2303      	movs	r3, #3
 8002634:	e004      	b.n	8002640 <HAL_GPIO_Init+0x204>
 8002636:	2302      	movs	r3, #2
 8002638:	e002      	b.n	8002640 <HAL_GPIO_Init+0x204>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <HAL_GPIO_Init+0x204>
 800263e:	2300      	movs	r3, #0
 8002640:	69fa      	ldr	r2, [r7, #28]
 8002642:	f002 0203 	and.w	r2, r2, #3
 8002646:	0092      	lsls	r2, r2, #2
 8002648:	4093      	lsls	r3, r2
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4313      	orrs	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002650:	4935      	ldr	r1, [pc, #212]	; (8002728 <HAL_GPIO_Init+0x2ec>)
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	089b      	lsrs	r3, r3, #2
 8002656:	3302      	adds	r3, #2
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800265e:	4b38      	ldr	r3, [pc, #224]	; (8002740 <HAL_GPIO_Init+0x304>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	43db      	mvns	r3, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4013      	ands	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002682:	4a2f      	ldr	r2, [pc, #188]	; (8002740 <HAL_GPIO_Init+0x304>)
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002688:	4b2d      	ldr	r3, [pc, #180]	; (8002740 <HAL_GPIO_Init+0x304>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026ac:	4a24      	ldr	r2, [pc, #144]	; (8002740 <HAL_GPIO_Init+0x304>)
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026b2:	4b23      	ldr	r3, [pc, #140]	; (8002740 <HAL_GPIO_Init+0x304>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	43db      	mvns	r3, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4013      	ands	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026d6:	4a1a      	ldr	r2, [pc, #104]	; (8002740 <HAL_GPIO_Init+0x304>)
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026dc:	4b18      	ldr	r3, [pc, #96]	; (8002740 <HAL_GPIO_Init+0x304>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d003      	beq.n	8002700 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002700:	4a0f      	ldr	r2, [pc, #60]	; (8002740 <HAL_GPIO_Init+0x304>)
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	3301      	adds	r3, #1
 800270a:	61fb      	str	r3, [r7, #28]
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	2b0f      	cmp	r3, #15
 8002710:	f67f aea2 	bls.w	8002458 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002714:	bf00      	nop
 8002716:	bf00      	nop
 8002718:	3724      	adds	r7, #36	; 0x24
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40023800 	.word	0x40023800
 8002728:	40013800 	.word	0x40013800
 800272c:	40020000 	.word	0x40020000
 8002730:	40020400 	.word	0x40020400
 8002734:	40020800 	.word	0x40020800
 8002738:	40020c00 	.word	0x40020c00
 800273c:	40021000 	.word	0x40021000
 8002740:	40013c00 	.word	0x40013c00

08002744 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	887b      	ldrh	r3, [r7, #2]
 8002756:	4013      	ands	r3, r2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800275c:	2301      	movs	r3, #1
 800275e:	73fb      	strb	r3, [r7, #15]
 8002760:	e001      	b.n	8002766 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002762:	2300      	movs	r3, #0
 8002764:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002766:	7bfb      	ldrb	r3, [r7, #15]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	807b      	strh	r3, [r7, #2]
 8002780:	4613      	mov	r3, r2
 8002782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002784:	787b      	ldrb	r3, [r7, #1]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800278a:	887a      	ldrh	r2, [r7, #2]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002790:	e003      	b.n	800279a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002792:	887b      	ldrh	r3, [r7, #2]
 8002794:	041a      	lsls	r2, r3, #16
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	619a      	str	r2, [r3, #24]
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
	...

080027a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e12b      	b.n	8002a12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7fe ffde 	bl	8001790 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2224      	movs	r2, #36	; 0x24
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0201 	bic.w	r2, r2, #1
 80027ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800280a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800280c:	f001 fbec 	bl	8003fe8 <HAL_RCC_GetPCLK1Freq>
 8002810:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	4a81      	ldr	r2, [pc, #516]	; (8002a1c <HAL_I2C_Init+0x274>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d807      	bhi.n	800282c <HAL_I2C_Init+0x84>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4a80      	ldr	r2, [pc, #512]	; (8002a20 <HAL_I2C_Init+0x278>)
 8002820:	4293      	cmp	r3, r2
 8002822:	bf94      	ite	ls
 8002824:	2301      	movls	r3, #1
 8002826:	2300      	movhi	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	e006      	b.n	800283a <HAL_I2C_Init+0x92>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4a7d      	ldr	r2, [pc, #500]	; (8002a24 <HAL_I2C_Init+0x27c>)
 8002830:	4293      	cmp	r3, r2
 8002832:	bf94      	ite	ls
 8002834:	2301      	movls	r3, #1
 8002836:	2300      	movhi	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e0e7      	b.n	8002a12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4a78      	ldr	r2, [pc, #480]	; (8002a28 <HAL_I2C_Init+0x280>)
 8002846:	fba2 2303 	umull	r2, r3, r2, r3
 800284a:	0c9b      	lsrs	r3, r3, #18
 800284c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	430a      	orrs	r2, r1
 8002860:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	4a6a      	ldr	r2, [pc, #424]	; (8002a1c <HAL_I2C_Init+0x274>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d802      	bhi.n	800287c <HAL_I2C_Init+0xd4>
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	3301      	adds	r3, #1
 800287a:	e009      	b.n	8002890 <HAL_I2C_Init+0xe8>
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002882:	fb02 f303 	mul.w	r3, r2, r3
 8002886:	4a69      	ldr	r2, [pc, #420]	; (8002a2c <HAL_I2C_Init+0x284>)
 8002888:	fba2 2303 	umull	r2, r3, r2, r3
 800288c:	099b      	lsrs	r3, r3, #6
 800288e:	3301      	adds	r3, #1
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6812      	ldr	r2, [r2, #0]
 8002894:	430b      	orrs	r3, r1
 8002896:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	495c      	ldr	r1, [pc, #368]	; (8002a1c <HAL_I2C_Init+0x274>)
 80028ac:	428b      	cmp	r3, r1
 80028ae:	d819      	bhi.n	80028e4 <HAL_I2C_Init+0x13c>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	1e59      	subs	r1, r3, #1
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80028be:	1c59      	adds	r1, r3, #1
 80028c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80028c4:	400b      	ands	r3, r1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00a      	beq.n	80028e0 <HAL_I2C_Init+0x138>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	1e59      	subs	r1, r3, #1
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80028d8:	3301      	adds	r3, #1
 80028da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028de:	e051      	b.n	8002984 <HAL_I2C_Init+0x1dc>
 80028e0:	2304      	movs	r3, #4
 80028e2:	e04f      	b.n	8002984 <HAL_I2C_Init+0x1dc>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d111      	bne.n	8002910 <HAL_I2C_Init+0x168>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	1e58      	subs	r0, r3, #1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6859      	ldr	r1, [r3, #4]
 80028f4:	460b      	mov	r3, r1
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	440b      	add	r3, r1
 80028fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80028fe:	3301      	adds	r3, #1
 8002900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002904:	2b00      	cmp	r3, #0
 8002906:	bf0c      	ite	eq
 8002908:	2301      	moveq	r3, #1
 800290a:	2300      	movne	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	e012      	b.n	8002936 <HAL_I2C_Init+0x18e>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	1e58      	subs	r0, r3, #1
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6859      	ldr	r1, [r3, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	0099      	lsls	r1, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	fbb0 f3f3 	udiv	r3, r0, r3
 8002926:	3301      	adds	r3, #1
 8002928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800292c:	2b00      	cmp	r3, #0
 800292e:	bf0c      	ite	eq
 8002930:	2301      	moveq	r3, #1
 8002932:	2300      	movne	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_I2C_Init+0x196>
 800293a:	2301      	movs	r3, #1
 800293c:	e022      	b.n	8002984 <HAL_I2C_Init+0x1dc>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10e      	bne.n	8002964 <HAL_I2C_Init+0x1bc>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	1e58      	subs	r0, r3, #1
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6859      	ldr	r1, [r3, #4]
 800294e:	460b      	mov	r3, r1
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	440b      	add	r3, r1
 8002954:	fbb0 f3f3 	udiv	r3, r0, r3
 8002958:	3301      	adds	r3, #1
 800295a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800295e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002962:	e00f      	b.n	8002984 <HAL_I2C_Init+0x1dc>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	1e58      	subs	r0, r3, #1
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6859      	ldr	r1, [r3, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	0099      	lsls	r1, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	fbb0 f3f3 	udiv	r3, r0, r3
 800297a:	3301      	adds	r3, #1
 800297c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002980:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	6809      	ldr	r1, [r1, #0]
 8002988:	4313      	orrs	r3, r2
 800298a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69da      	ldr	r2, [r3, #28]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6911      	ldr	r1, [r2, #16]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	68d2      	ldr	r2, [r2, #12]
 80029be:	4311      	orrs	r1, r2
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	430b      	orrs	r3, r1
 80029c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	695a      	ldr	r2, [r3, #20]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0201 	orr.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2220      	movs	r2, #32
 80029fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	000186a0 	.word	0x000186a0
 8002a20:	001e847f 	.word	0x001e847f
 8002a24:	003d08ff 	.word	0x003d08ff
 8002a28:	431bde83 	.word	0x431bde83
 8002a2c:	10624dd3 	.word	0x10624dd3

08002a30 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af02      	add	r7, sp, #8
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	607a      	str	r2, [r7, #4]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	817b      	strh	r3, [r7, #10]
 8002a40:	4613      	mov	r3, r2
 8002a42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a44:	f7ff f836 	bl	8001ab4 <HAL_GetTick>
 8002a48:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b20      	cmp	r3, #32
 8002a54:	f040 80e0 	bne.w	8002c18 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	2319      	movs	r3, #25
 8002a5e:	2201      	movs	r2, #1
 8002a60:	4970      	ldr	r1, [pc, #448]	; (8002c24 <HAL_I2C_Master_Transmit+0x1f4>)
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 fc72 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e0d3      	b.n	8002c1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <HAL_I2C_Master_Transmit+0x50>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e0cc      	b.n	8002c1a <HAL_I2C_Master_Transmit+0x1ea>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d007      	beq.n	8002aa6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f042 0201 	orr.w	r2, r2, #1
 8002aa4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ab4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2221      	movs	r2, #33	; 0x21
 8002aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2210      	movs	r2, #16
 8002ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	893a      	ldrh	r2, [r7, #8]
 8002ad6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	4a50      	ldr	r2, [pc, #320]	; (8002c28 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ae6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ae8:	8979      	ldrh	r1, [r7, #10]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	6a3a      	ldr	r2, [r7, #32]
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 fac2 	bl	8003078 <I2C_MasterRequestWrite>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e08d      	b.n	8002c1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002afe:	2300      	movs	r3, #0
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	613b      	str	r3, [r7, #16]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b14:	e066      	b.n	8002be4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	6a39      	ldr	r1, [r7, #32]
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 fcec 	bl	80034f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00d      	beq.n	8002b42 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d107      	bne.n	8002b3e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e06b      	b.n	8002c1a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	781a      	ldrb	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d11b      	bne.n	8002bb8 <HAL_I2C_Master_Transmit+0x188>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d017      	beq.n	8002bb8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	781a      	ldrb	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	1c5a      	adds	r2, r3, #1
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	6a39      	ldr	r1, [r7, #32]
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 fcdc 	bl	800357a <I2C_WaitOnBTFFlagUntilTimeout>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00d      	beq.n	8002be4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d107      	bne.n	8002be0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bde:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e01a      	b.n	8002c1a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d194      	bne.n	8002b16 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c14:	2300      	movs	r3, #0
 8002c16:	e000      	b.n	8002c1a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c18:	2302      	movs	r3, #2
  }
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	00100002 	.word	0x00100002
 8002c28:	ffff0000 	.word	0xffff0000

08002c2c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08c      	sub	sp, #48	; 0x30
 8002c30:	af02      	add	r7, sp, #8
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	4608      	mov	r0, r1
 8002c36:	4611      	mov	r1, r2
 8002c38:	461a      	mov	r2, r3
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	817b      	strh	r3, [r7, #10]
 8002c3e:	460b      	mov	r3, r1
 8002c40:	813b      	strh	r3, [r7, #8]
 8002c42:	4613      	mov	r3, r2
 8002c44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c46:	f7fe ff35 	bl	8001ab4 <HAL_GetTick>
 8002c4a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b20      	cmp	r3, #32
 8002c56:	f040 8208 	bne.w	800306a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	2319      	movs	r3, #25
 8002c60:	2201      	movs	r2, #1
 8002c62:	497b      	ldr	r1, [pc, #492]	; (8002e50 <HAL_I2C_Mem_Read+0x224>)
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 fb71 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002c70:	2302      	movs	r3, #2
 8002c72:	e1fb      	b.n	800306c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d101      	bne.n	8002c82 <HAL_I2C_Mem_Read+0x56>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	e1f4      	b.n	800306c <HAL_I2C_Mem_Read+0x440>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d007      	beq.n	8002ca8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0201 	orr.w	r2, r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2222      	movs	r2, #34	; 0x22
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2240      	movs	r2, #64	; 0x40
 8002cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002cd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4a5b      	ldr	r2, [pc, #364]	; (8002e54 <HAL_I2C_Mem_Read+0x228>)
 8002ce8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cea:	88f8      	ldrh	r0, [r7, #6]
 8002cec:	893a      	ldrh	r2, [r7, #8]
 8002cee:	8979      	ldrh	r1, [r7, #10]
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	9301      	str	r3, [sp, #4]
 8002cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 fa3e 	bl	800317c <I2C_RequestMemoryRead>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e1b0      	b.n	800306c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d113      	bne.n	8002d3a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d12:	2300      	movs	r3, #0
 8002d14:	623b      	str	r3, [r7, #32]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	623b      	str	r3, [r7, #32]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	623b      	str	r3, [r7, #32]
 8002d26:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	e184      	b.n	8003044 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d11b      	bne.n	8002d7a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d52:	2300      	movs	r3, #0
 8002d54:	61fb      	str	r3, [r7, #28]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	61fb      	str	r3, [r7, #28]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	61fb      	str	r3, [r7, #28]
 8002d66:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	e164      	b.n	8003044 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d11b      	bne.n	8002dba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d90:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002da0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002da2:	2300      	movs	r3, #0
 8002da4:	61bb      	str	r3, [r7, #24]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	61bb      	str	r3, [r7, #24]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	61bb      	str	r3, [r7, #24]
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	e144      	b.n	8003044 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002dd0:	e138      	b.n	8003044 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd6:	2b03      	cmp	r3, #3
 8002dd8:	f200 80f1 	bhi.w	8002fbe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d123      	bne.n	8002e2c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 fc07 	bl	80035fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e139      	b.n	800306c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	691a      	ldr	r2, [r3, #16]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e14:	3b01      	subs	r3, #1
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e2a:	e10b      	b.n	8003044 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d14e      	bne.n	8002ed2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	4906      	ldr	r1, [pc, #24]	; (8002e58 <HAL_I2C_Mem_Read+0x22c>)
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 fa84 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d008      	beq.n	8002e5c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e10e      	b.n	800306c <HAL_I2C_Mem_Read+0x440>
 8002e4e:	bf00      	nop
 8002e50:	00100002 	.word	0x00100002
 8002e54:	ffff0000 	.word	0xffff0000
 8002e58:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	691a      	ldr	r2, [r3, #16]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	3b01      	subs	r3, #1
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	691a      	ldr	r2, [r3, #16]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ed0:	e0b8      	b.n	8003044 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed8:	2200      	movs	r2, #0
 8002eda:	4966      	ldr	r1, [pc, #408]	; (8003074 <HAL_I2C_Mem_Read+0x448>)
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 fa35 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e0bf      	b.n	800306c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002efa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691a      	ldr	r2, [r3, #16]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f34:	2200      	movs	r2, #0
 8002f36:	494f      	ldr	r1, [pc, #316]	; (8003074 <HAL_I2C_Mem_Read+0x448>)
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 fa07 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e091      	b.n	800306c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691a      	ldr	r2, [r3, #16]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	691a      	ldr	r2, [r3, #16]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fbc:	e042      	b.n	8003044 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 fb1a 	bl	80035fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e04c      	b.n	800306c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	b2d2      	uxtb	r2, r2
 8002fde:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	1c5a      	adds	r2, r3, #1
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	2b04      	cmp	r3, #4
 8003010:	d118      	bne.n	8003044 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302e:	3b01      	subs	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303a:	b29b      	uxth	r3, r3
 800303c:	3b01      	subs	r3, #1
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003048:	2b00      	cmp	r3, #0
 800304a:	f47f aec2 	bne.w	8002dd2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003066:	2300      	movs	r3, #0
 8003068:	e000      	b.n	800306c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800306a:	2302      	movs	r3, #2
  }
}
 800306c:	4618      	mov	r0, r3
 800306e:	3728      	adds	r7, #40	; 0x28
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	00010004 	.word	0x00010004

08003078 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b088      	sub	sp, #32
 800307c:	af02      	add	r7, sp, #8
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	607a      	str	r2, [r7, #4]
 8003082:	603b      	str	r3, [r7, #0]
 8003084:	460b      	mov	r3, r1
 8003086:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	2b08      	cmp	r3, #8
 8003092:	d006      	beq.n	80030a2 <I2C_MasterRequestWrite+0x2a>
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d003      	beq.n	80030a2 <I2C_MasterRequestWrite+0x2a>
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030a0:	d108      	bne.n	80030b4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	e00b      	b.n	80030cc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b8:	2b12      	cmp	r3, #18
 80030ba:	d107      	bne.n	80030cc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 f937 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00d      	beq.n	8003100 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030f2:	d103      	bne.n	80030fc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e035      	b.n	800316c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003108:	d108      	bne.n	800311c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800310a:	897b      	ldrh	r3, [r7, #10]
 800310c:	b2db      	uxtb	r3, r3
 800310e:	461a      	mov	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003118:	611a      	str	r2, [r3, #16]
 800311a:	e01b      	b.n	8003154 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800311c:	897b      	ldrh	r3, [r7, #10]
 800311e:	11db      	asrs	r3, r3, #7
 8003120:	b2db      	uxtb	r3, r3
 8003122:	f003 0306 	and.w	r3, r3, #6
 8003126:	b2db      	uxtb	r3, r3
 8003128:	f063 030f 	orn	r3, r3, #15
 800312c:	b2da      	uxtb	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	490e      	ldr	r1, [pc, #56]	; (8003174 <I2C_MasterRequestWrite+0xfc>)
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 f95d 	bl	80033fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e010      	b.n	800316c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800314a:	897b      	ldrh	r3, [r7, #10]
 800314c:	b2da      	uxtb	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	4907      	ldr	r1, [pc, #28]	; (8003178 <I2C_MasterRequestWrite+0x100>)
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 f94d 	bl	80033fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3718      	adds	r7, #24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	00010008 	.word	0x00010008
 8003178:	00010002 	.word	0x00010002

0800317c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b088      	sub	sp, #32
 8003180:	af02      	add	r7, sp, #8
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	4608      	mov	r0, r1
 8003186:	4611      	mov	r1, r2
 8003188:	461a      	mov	r2, r3
 800318a:	4603      	mov	r3, r0
 800318c:	817b      	strh	r3, [r7, #10]
 800318e:	460b      	mov	r3, r1
 8003190:	813b      	strh	r3, [r7, #8]
 8003192:	4613      	mov	r3, r2
 8003194:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	2200      	movs	r2, #0
 80031be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 f8c2 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00d      	beq.n	80031ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031dc:	d103      	bne.n	80031e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e0aa      	b.n	8003340 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031ea:	897b      	ldrh	r3, [r7, #10]
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	461a      	mov	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	6a3a      	ldr	r2, [r7, #32]
 80031fe:	4952      	ldr	r1, [pc, #328]	; (8003348 <I2C_RequestMemoryRead+0x1cc>)
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 f8fa 	bl	80033fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e097      	b.n	8003340 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003210:	2300      	movs	r3, #0
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	617b      	str	r3, [r7, #20]
 8003224:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003228:	6a39      	ldr	r1, [r7, #32]
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 f964 	bl	80034f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00d      	beq.n	8003252 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	2b04      	cmp	r3, #4
 800323c:	d107      	bne.n	800324e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800324c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e076      	b.n	8003340 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003252:	88fb      	ldrh	r3, [r7, #6]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d105      	bne.n	8003264 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003258:	893b      	ldrh	r3, [r7, #8]
 800325a:	b2da      	uxtb	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	611a      	str	r2, [r3, #16]
 8003262:	e021      	b.n	80032a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003264:	893b      	ldrh	r3, [r7, #8]
 8003266:	0a1b      	lsrs	r3, r3, #8
 8003268:	b29b      	uxth	r3, r3
 800326a:	b2da      	uxtb	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003274:	6a39      	ldr	r1, [r7, #32]
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 f93e 	bl	80034f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00d      	beq.n	800329e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	2b04      	cmp	r3, #4
 8003288:	d107      	bne.n	800329a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003298:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e050      	b.n	8003340 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800329e:	893b      	ldrh	r3, [r7, #8]
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032aa:	6a39      	ldr	r1, [r7, #32]
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f000 f923 	bl	80034f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00d      	beq.n	80032d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	2b04      	cmp	r3, #4
 80032be:	d107      	bne.n	80032d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e035      	b.n	8003340 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 f82b 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00d      	beq.n	8003318 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800330a:	d103      	bne.n	8003314 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003312:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e013      	b.n	8003340 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003318:	897b      	ldrh	r3, [r7, #10]
 800331a:	b2db      	uxtb	r3, r3
 800331c:	f043 0301 	orr.w	r3, r3, #1
 8003320:	b2da      	uxtb	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	6a3a      	ldr	r2, [r7, #32]
 800332c:	4906      	ldr	r1, [pc, #24]	; (8003348 <I2C_RequestMemoryRead+0x1cc>)
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 f863 	bl	80033fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e000      	b.n	8003340 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	00010002 	.word	0x00010002

0800334c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	603b      	str	r3, [r7, #0]
 8003358:	4613      	mov	r3, r2
 800335a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800335c:	e025      	b.n	80033aa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003364:	d021      	beq.n	80033aa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003366:	f7fe fba5 	bl	8001ab4 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d302      	bcc.n	800337c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d116      	bne.n	80033aa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2220      	movs	r2, #32
 8003386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	f043 0220 	orr.w	r2, r3, #32
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e023      	b.n	80033f2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	0c1b      	lsrs	r3, r3, #16
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d10d      	bne.n	80033d0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	43da      	mvns	r2, r3
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	4013      	ands	r3, r2
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	bf0c      	ite	eq
 80033c6:	2301      	moveq	r3, #1
 80033c8:	2300      	movne	r3, #0
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	461a      	mov	r2, r3
 80033ce:	e00c      	b.n	80033ea <I2C_WaitOnFlagUntilTimeout+0x9e>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	43da      	mvns	r2, r3
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	4013      	ands	r3, r2
 80033dc:	b29b      	uxth	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	bf0c      	ite	eq
 80033e2:	2301      	moveq	r3, #1
 80033e4:	2300      	movne	r3, #0
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	461a      	mov	r2, r3
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d0b6      	beq.n	800335e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b084      	sub	sp, #16
 80033fe:	af00      	add	r7, sp, #0
 8003400:	60f8      	str	r0, [r7, #12]
 8003402:	60b9      	str	r1, [r7, #8]
 8003404:	607a      	str	r2, [r7, #4]
 8003406:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003408:	e051      	b.n	80034ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003418:	d123      	bne.n	8003462 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003428:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003432:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2220      	movs	r2, #32
 800343e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	f043 0204 	orr.w	r2, r3, #4
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e046      	b.n	80034f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003468:	d021      	beq.n	80034ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800346a:	f7fe fb23 	bl	8001ab4 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	429a      	cmp	r2, r3
 8003478:	d302      	bcc.n	8003480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d116      	bne.n	80034ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2220      	movs	r2, #32
 800348a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	f043 0220 	orr.w	r2, r3, #32
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e020      	b.n	80034f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	0c1b      	lsrs	r3, r3, #16
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d10c      	bne.n	80034d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	43da      	mvns	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	4013      	ands	r3, r2
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	bf14      	ite	ne
 80034ca:	2301      	movne	r3, #1
 80034cc:	2300      	moveq	r3, #0
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	e00b      	b.n	80034ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	43da      	mvns	r2, r3
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	4013      	ands	r3, r2
 80034de:	b29b      	uxth	r3, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	bf14      	ite	ne
 80034e4:	2301      	movne	r3, #1
 80034e6:	2300      	moveq	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d18d      	bne.n	800340a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003504:	e02d      	b.n	8003562 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 f8ce 	bl	80036a8 <I2C_IsAcknowledgeFailed>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e02d      	b.n	8003572 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351c:	d021      	beq.n	8003562 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351e:	f7fe fac9 	bl	8001ab4 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	429a      	cmp	r2, r3
 800352c:	d302      	bcc.n	8003534 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d116      	bne.n	8003562 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2220      	movs	r2, #32
 800353e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	f043 0220 	orr.w	r2, r3, #32
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e007      	b.n	8003572 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356c:	2b80      	cmp	r3, #128	; 0x80
 800356e:	d1ca      	bne.n	8003506 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b084      	sub	sp, #16
 800357e:	af00      	add	r7, sp, #0
 8003580:	60f8      	str	r0, [r7, #12]
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003586:	e02d      	b.n	80035e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 f88d 	bl	80036a8 <I2C_IsAcknowledgeFailed>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e02d      	b.n	80035f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359e:	d021      	beq.n	80035e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a0:	f7fe fa88 	bl	8001ab4 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d302      	bcc.n	80035b6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d116      	bne.n	80035e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	f043 0220 	orr.w	r2, r3, #32
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e007      	b.n	80035f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	f003 0304 	and.w	r3, r3, #4
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d1ca      	bne.n	8003588 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003608:	e042      	b.n	8003690 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	f003 0310 	and.w	r3, r3, #16
 8003614:	2b10      	cmp	r3, #16
 8003616:	d119      	bne.n	800364c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f06f 0210 	mvn.w	r2, #16
 8003620:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2220      	movs	r2, #32
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e029      	b.n	80036a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800364c:	f7fe fa32 	bl	8001ab4 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	429a      	cmp	r2, r3
 800365a:	d302      	bcc.n	8003662 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d116      	bne.n	8003690 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2220      	movs	r2, #32
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	f043 0220 	orr.w	r2, r3, #32
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e007      	b.n	80036a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369a:	2b40      	cmp	r3, #64	; 0x40
 800369c:	d1b5      	bne.n	800360a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036be:	d11b      	bne.n	80036f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e4:	f043 0204 	orr.w	r2, r3, #4
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e000      	b.n	80036fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
	...

08003708 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e267      	b.n	8003bea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d075      	beq.n	8003812 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003726:	4b88      	ldr	r3, [pc, #544]	; (8003948 <HAL_RCC_OscConfig+0x240>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 030c 	and.w	r3, r3, #12
 800372e:	2b04      	cmp	r3, #4
 8003730:	d00c      	beq.n	800374c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003732:	4b85      	ldr	r3, [pc, #532]	; (8003948 <HAL_RCC_OscConfig+0x240>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800373a:	2b08      	cmp	r3, #8
 800373c:	d112      	bne.n	8003764 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800373e:	4b82      	ldr	r3, [pc, #520]	; (8003948 <HAL_RCC_OscConfig+0x240>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003746:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800374a:	d10b      	bne.n	8003764 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800374c:	4b7e      	ldr	r3, [pc, #504]	; (8003948 <HAL_RCC_OscConfig+0x240>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d05b      	beq.n	8003810 <HAL_RCC_OscConfig+0x108>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d157      	bne.n	8003810 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e242      	b.n	8003bea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800376c:	d106      	bne.n	800377c <HAL_RCC_OscConfig+0x74>
 800376e:	4b76      	ldr	r3, [pc, #472]	; (8003948 <HAL_RCC_OscConfig+0x240>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a75      	ldr	r2, [pc, #468]	; (8003948 <HAL_RCC_OscConfig+0x240>)
 8003774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003778:	6013      	str	r3, [r2, #0]
 800377a:	e01d      	b.n	80037b8 <HAL_RCC_OscConfig+0xb0>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003784:	d10c      	bne.n	80037a0 <HAL_RCC_OscConfig+0x98>
 8003786:	4b70      	ldr	r3, [pc, #448]	; (8003948 <HAL_RCC_OscConfig+0x240>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a6f      	ldr	r2, [pc, #444]	; (8003948 <HAL_RCC_OscConfig+0x240>)
 800378c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	4b6d      	ldr	r3, [pc, #436]	; (8003948 <HAL_RCC_OscConfig+0x240>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a6c      	ldr	r2, [pc, #432]	; (8003948 <HAL_RCC_OscConfig+0x240>)
 8003798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	e00b      	b.n	80037b8 <HAL_RCC_OscConfig+0xb0>
 80037a0:	4b69      	ldr	r3, [pc, #420]	; (8003948 <HAL_RCC_OscConfig+0x240>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a68      	ldr	r2, [pc, #416]	; (8003948 <HAL_RCC_OscConfig+0x240>)
 80037a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037aa:	6013      	str	r3, [r2, #0]
 80037ac:	4b66      	ldr	r3, [pc, #408]	; (8003948 <HAL_RCC_OscConfig+0x240>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a65      	ldr	r2, [pc, #404]	; (8003948 <HAL_RCC_OscConfig+0x240>)
 80037b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d013      	beq.n	80037e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c0:	f7fe f978 	bl	8001ab4 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037c8:	f7fe f974 	bl	8001ab4 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b64      	cmp	r3, #100	; 0x64
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e207      	b.n	8003bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037da:	4b5b      	ldr	r3, [pc, #364]	; (8003948 <HAL_RCC_OscConfig+0x240>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d0f0      	beq.n	80037c8 <HAL_RCC_OscConfig+0xc0>
 80037e6:	e014      	b.n	8003812 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e8:	f7fe f964 	bl	8001ab4 <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037f0:	f7fe f960 	bl	8001ab4 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b64      	cmp	r3, #100	; 0x64
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e1f3      	b.n	8003bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003802:	4b51      	ldr	r3, [pc, #324]	; (8003948 <HAL_RCC_OscConfig+0x240>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1f0      	bne.n	80037f0 <HAL_RCC_OscConfig+0xe8>
 800380e:	e000      	b.n	8003812 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d063      	beq.n	80038e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800381e:	4b4a      	ldr	r3, [pc, #296]	; (8003948 <HAL_RCC_OscConfig+0x240>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 030c 	and.w	r3, r3, #12
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00b      	beq.n	8003842 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800382a:	4b47      	ldr	r3, [pc, #284]	; (8003948 <HAL_RCC_OscConfig+0x240>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003832:	2b08      	cmp	r3, #8
 8003834:	d11c      	bne.n	8003870 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003836:	4b44      	ldr	r3, [pc, #272]	; (8003948 <HAL_RCC_OscConfig+0x240>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d116      	bne.n	8003870 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003842:	4b41      	ldr	r3, [pc, #260]	; (8003948 <HAL_RCC_OscConfig+0x240>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d005      	beq.n	800385a <HAL_RCC_OscConfig+0x152>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d001      	beq.n	800385a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e1c7      	b.n	8003bea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800385a:	4b3b      	ldr	r3, [pc, #236]	; (8003948 <HAL_RCC_OscConfig+0x240>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	4937      	ldr	r1, [pc, #220]	; (8003948 <HAL_RCC_OscConfig+0x240>)
 800386a:	4313      	orrs	r3, r2
 800386c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800386e:	e03a      	b.n	80038e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d020      	beq.n	80038ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003878:	4b34      	ldr	r3, [pc, #208]	; (800394c <HAL_RCC_OscConfig+0x244>)
 800387a:	2201      	movs	r2, #1
 800387c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387e:	f7fe f919 	bl	8001ab4 <HAL_GetTick>
 8003882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003884:	e008      	b.n	8003898 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003886:	f7fe f915 	bl	8001ab4 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d901      	bls.n	8003898 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e1a8      	b.n	8003bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003898:	4b2b      	ldr	r3, [pc, #172]	; (8003948 <HAL_RCC_OscConfig+0x240>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0f0      	beq.n	8003886 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a4:	4b28      	ldr	r3, [pc, #160]	; (8003948 <HAL_RCC_OscConfig+0x240>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	4925      	ldr	r1, [pc, #148]	; (8003948 <HAL_RCC_OscConfig+0x240>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	600b      	str	r3, [r1, #0]
 80038b8:	e015      	b.n	80038e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ba:	4b24      	ldr	r3, [pc, #144]	; (800394c <HAL_RCC_OscConfig+0x244>)
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c0:	f7fe f8f8 	bl	8001ab4 <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038c8:	f7fe f8f4 	bl	8001ab4 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e187      	b.n	8003bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038da:	4b1b      	ldr	r3, [pc, #108]	; (8003948 <HAL_RCC_OscConfig+0x240>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1f0      	bne.n	80038c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0308 	and.w	r3, r3, #8
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d036      	beq.n	8003960 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d016      	beq.n	8003928 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038fa:	4b15      	ldr	r3, [pc, #84]	; (8003950 <HAL_RCC_OscConfig+0x248>)
 80038fc:	2201      	movs	r2, #1
 80038fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003900:	f7fe f8d8 	bl	8001ab4 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003908:	f7fe f8d4 	bl	8001ab4 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e167      	b.n	8003bea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800391a:	4b0b      	ldr	r3, [pc, #44]	; (8003948 <HAL_RCC_OscConfig+0x240>)
 800391c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0f0      	beq.n	8003908 <HAL_RCC_OscConfig+0x200>
 8003926:	e01b      	b.n	8003960 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003928:	4b09      	ldr	r3, [pc, #36]	; (8003950 <HAL_RCC_OscConfig+0x248>)
 800392a:	2200      	movs	r2, #0
 800392c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800392e:	f7fe f8c1 	bl	8001ab4 <HAL_GetTick>
 8003932:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003934:	e00e      	b.n	8003954 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003936:	f7fe f8bd 	bl	8001ab4 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d907      	bls.n	8003954 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e150      	b.n	8003bea <HAL_RCC_OscConfig+0x4e2>
 8003948:	40023800 	.word	0x40023800
 800394c:	42470000 	.word	0x42470000
 8003950:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003954:	4b88      	ldr	r3, [pc, #544]	; (8003b78 <HAL_RCC_OscConfig+0x470>)
 8003956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1ea      	bne.n	8003936 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 8097 	beq.w	8003a9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800396e:	2300      	movs	r3, #0
 8003970:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003972:	4b81      	ldr	r3, [pc, #516]	; (8003b78 <HAL_RCC_OscConfig+0x470>)
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10f      	bne.n	800399e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800397e:	2300      	movs	r3, #0
 8003980:	60bb      	str	r3, [r7, #8]
 8003982:	4b7d      	ldr	r3, [pc, #500]	; (8003b78 <HAL_RCC_OscConfig+0x470>)
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	4a7c      	ldr	r2, [pc, #496]	; (8003b78 <HAL_RCC_OscConfig+0x470>)
 8003988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800398c:	6413      	str	r3, [r2, #64]	; 0x40
 800398e:	4b7a      	ldr	r3, [pc, #488]	; (8003b78 <HAL_RCC_OscConfig+0x470>)
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003996:	60bb      	str	r3, [r7, #8]
 8003998:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800399a:	2301      	movs	r3, #1
 800399c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800399e:	4b77      	ldr	r3, [pc, #476]	; (8003b7c <HAL_RCC_OscConfig+0x474>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d118      	bne.n	80039dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039aa:	4b74      	ldr	r3, [pc, #464]	; (8003b7c <HAL_RCC_OscConfig+0x474>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a73      	ldr	r2, [pc, #460]	; (8003b7c <HAL_RCC_OscConfig+0x474>)
 80039b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039b6:	f7fe f87d 	bl	8001ab4 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039be:	f7fe f879 	bl	8001ab4 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e10c      	b.n	8003bea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d0:	4b6a      	ldr	r3, [pc, #424]	; (8003b7c <HAL_RCC_OscConfig+0x474>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0f0      	beq.n	80039be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d106      	bne.n	80039f2 <HAL_RCC_OscConfig+0x2ea>
 80039e4:	4b64      	ldr	r3, [pc, #400]	; (8003b78 <HAL_RCC_OscConfig+0x470>)
 80039e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e8:	4a63      	ldr	r2, [pc, #396]	; (8003b78 <HAL_RCC_OscConfig+0x470>)
 80039ea:	f043 0301 	orr.w	r3, r3, #1
 80039ee:	6713      	str	r3, [r2, #112]	; 0x70
 80039f0:	e01c      	b.n	8003a2c <HAL_RCC_OscConfig+0x324>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	2b05      	cmp	r3, #5
 80039f8:	d10c      	bne.n	8003a14 <HAL_RCC_OscConfig+0x30c>
 80039fa:	4b5f      	ldr	r3, [pc, #380]	; (8003b78 <HAL_RCC_OscConfig+0x470>)
 80039fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fe:	4a5e      	ldr	r2, [pc, #376]	; (8003b78 <HAL_RCC_OscConfig+0x470>)
 8003a00:	f043 0304 	orr.w	r3, r3, #4
 8003a04:	6713      	str	r3, [r2, #112]	; 0x70
 8003a06:	4b5c      	ldr	r3, [pc, #368]	; (8003b78 <HAL_RCC_OscConfig+0x470>)
 8003a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0a:	4a5b      	ldr	r2, [pc, #364]	; (8003b78 <HAL_RCC_OscConfig+0x470>)
 8003a0c:	f043 0301 	orr.w	r3, r3, #1
 8003a10:	6713      	str	r3, [r2, #112]	; 0x70
 8003a12:	e00b      	b.n	8003a2c <HAL_RCC_OscConfig+0x324>
 8003a14:	4b58      	ldr	r3, [pc, #352]	; (8003b78 <HAL_RCC_OscConfig+0x470>)
 8003a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a18:	4a57      	ldr	r2, [pc, #348]	; (8003b78 <HAL_RCC_OscConfig+0x470>)
 8003a1a:	f023 0301 	bic.w	r3, r3, #1
 8003a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a20:	4b55      	ldr	r3, [pc, #340]	; (8003b78 <HAL_RCC_OscConfig+0x470>)
 8003a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a24:	4a54      	ldr	r2, [pc, #336]	; (8003b78 <HAL_RCC_OscConfig+0x470>)
 8003a26:	f023 0304 	bic.w	r3, r3, #4
 8003a2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d015      	beq.n	8003a60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a34:	f7fe f83e 	bl	8001ab4 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a3a:	e00a      	b.n	8003a52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a3c:	f7fe f83a 	bl	8001ab4 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e0cb      	b.n	8003bea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a52:	4b49      	ldr	r3, [pc, #292]	; (8003b78 <HAL_RCC_OscConfig+0x470>)
 8003a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0ee      	beq.n	8003a3c <HAL_RCC_OscConfig+0x334>
 8003a5e:	e014      	b.n	8003a8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a60:	f7fe f828 	bl	8001ab4 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a66:	e00a      	b.n	8003a7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a68:	f7fe f824 	bl	8001ab4 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e0b5      	b.n	8003bea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a7e:	4b3e      	ldr	r3, [pc, #248]	; (8003b78 <HAL_RCC_OscConfig+0x470>)
 8003a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1ee      	bne.n	8003a68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a8a:	7dfb      	ldrb	r3, [r7, #23]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d105      	bne.n	8003a9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a90:	4b39      	ldr	r3, [pc, #228]	; (8003b78 <HAL_RCC_OscConfig+0x470>)
 8003a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a94:	4a38      	ldr	r2, [pc, #224]	; (8003b78 <HAL_RCC_OscConfig+0x470>)
 8003a96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 80a1 	beq.w	8003be8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003aa6:	4b34      	ldr	r3, [pc, #208]	; (8003b78 <HAL_RCC_OscConfig+0x470>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 030c 	and.w	r3, r3, #12
 8003aae:	2b08      	cmp	r3, #8
 8003ab0:	d05c      	beq.n	8003b6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d141      	bne.n	8003b3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aba:	4b31      	ldr	r3, [pc, #196]	; (8003b80 <HAL_RCC_OscConfig+0x478>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac0:	f7fd fff8 	bl	8001ab4 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac8:	f7fd fff4 	bl	8001ab4 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e087      	b.n	8003bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ada:	4b27      	ldr	r3, [pc, #156]	; (8003b78 <HAL_RCC_OscConfig+0x470>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1f0      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	69da      	ldr	r2, [r3, #28]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	019b      	lsls	r3, r3, #6
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afc:	085b      	lsrs	r3, r3, #1
 8003afe:	3b01      	subs	r3, #1
 8003b00:	041b      	lsls	r3, r3, #16
 8003b02:	431a      	orrs	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b08:	061b      	lsls	r3, r3, #24
 8003b0a:	491b      	ldr	r1, [pc, #108]	; (8003b78 <HAL_RCC_OscConfig+0x470>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b10:	4b1b      	ldr	r3, [pc, #108]	; (8003b80 <HAL_RCC_OscConfig+0x478>)
 8003b12:	2201      	movs	r2, #1
 8003b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b16:	f7fd ffcd 	bl	8001ab4 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b1e:	f7fd ffc9 	bl	8001ab4 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e05c      	b.n	8003bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b30:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <HAL_RCC_OscConfig+0x470>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCC_OscConfig+0x416>
 8003b3c:	e054      	b.n	8003be8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b3e:	4b10      	ldr	r3, [pc, #64]	; (8003b80 <HAL_RCC_OscConfig+0x478>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b44:	f7fd ffb6 	bl	8001ab4 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b4c:	f7fd ffb2 	bl	8001ab4 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e045      	b.n	8003bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b5e:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <HAL_RCC_OscConfig+0x470>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1f0      	bne.n	8003b4c <HAL_RCC_OscConfig+0x444>
 8003b6a:	e03d      	b.n	8003be8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d107      	bne.n	8003b84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e038      	b.n	8003bea <HAL_RCC_OscConfig+0x4e2>
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	40007000 	.word	0x40007000
 8003b80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b84:	4b1b      	ldr	r3, [pc, #108]	; (8003bf4 <HAL_RCC_OscConfig+0x4ec>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d028      	beq.n	8003be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d121      	bne.n	8003be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d11a      	bne.n	8003be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d111      	bne.n	8003be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bca:	085b      	lsrs	r3, r3, #1
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d107      	bne.n	8003be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d001      	beq.n	8003be8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e000      	b.n	8003bea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3718      	adds	r7, #24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40023800 	.word	0x40023800

08003bf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e0cc      	b.n	8003da6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c0c:	4b68      	ldr	r3, [pc, #416]	; (8003db0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d90c      	bls.n	8003c34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c1a:	4b65      	ldr	r3, [pc, #404]	; (8003db0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c22:	4b63      	ldr	r3, [pc, #396]	; (8003db0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d001      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e0b8      	b.n	8003da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d020      	beq.n	8003c82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d005      	beq.n	8003c58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c4c:	4b59      	ldr	r3, [pc, #356]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	4a58      	ldr	r2, [pc, #352]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0308 	and.w	r3, r3, #8
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d005      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c64:	4b53      	ldr	r3, [pc, #332]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	4a52      	ldr	r2, [pc, #328]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c70:	4b50      	ldr	r3, [pc, #320]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	494d      	ldr	r1, [pc, #308]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d044      	beq.n	8003d18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d107      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c96:	4b47      	ldr	r3, [pc, #284]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d119      	bne.n	8003cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e07f      	b.n	8003da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d003      	beq.n	8003cb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cb2:	2b03      	cmp	r3, #3
 8003cb4:	d107      	bne.n	8003cc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cb6:	4b3f      	ldr	r3, [pc, #252]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d109      	bne.n	8003cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e06f      	b.n	8003da6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc6:	4b3b      	ldr	r3, [pc, #236]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e067      	b.n	8003da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cd6:	4b37      	ldr	r3, [pc, #220]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f023 0203 	bic.w	r2, r3, #3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	4934      	ldr	r1, [pc, #208]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ce8:	f7fd fee4 	bl	8001ab4 <HAL_GetTick>
 8003cec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cee:	e00a      	b.n	8003d06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cf0:	f7fd fee0 	bl	8001ab4 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e04f      	b.n	8003da6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d06:	4b2b      	ldr	r3, [pc, #172]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 020c 	and.w	r2, r3, #12
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d1eb      	bne.n	8003cf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d18:	4b25      	ldr	r3, [pc, #148]	; (8003db0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d20c      	bcs.n	8003d40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d26:	4b22      	ldr	r3, [pc, #136]	; (8003db0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	b2d2      	uxtb	r2, r2
 8003d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d2e:	4b20      	ldr	r3, [pc, #128]	; (8003db0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0307 	and.w	r3, r3, #7
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d001      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e032      	b.n	8003da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d008      	beq.n	8003d5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d4c:	4b19      	ldr	r3, [pc, #100]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	4916      	ldr	r1, [pc, #88]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0308 	and.w	r3, r3, #8
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d009      	beq.n	8003d7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d6a:	4b12      	ldr	r3, [pc, #72]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	490e      	ldr	r1, [pc, #56]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d7e:	f000 f821 	bl	8003dc4 <HAL_RCC_GetSysClockFreq>
 8003d82:	4602      	mov	r2, r0
 8003d84:	4b0b      	ldr	r3, [pc, #44]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	091b      	lsrs	r3, r3, #4
 8003d8a:	f003 030f 	and.w	r3, r3, #15
 8003d8e:	490a      	ldr	r1, [pc, #40]	; (8003db8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d90:	5ccb      	ldrb	r3, [r1, r3]
 8003d92:	fa22 f303 	lsr.w	r3, r2, r3
 8003d96:	4a09      	ldr	r2, [pc, #36]	; (8003dbc <HAL_RCC_ClockConfig+0x1c4>)
 8003d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d9a:	4b09      	ldr	r3, [pc, #36]	; (8003dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fd fe44 	bl	8001a2c <HAL_InitTick>

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	40023c00 	.word	0x40023c00
 8003db4:	40023800 	.word	0x40023800
 8003db8:	08004f9c 	.word	0x08004f9c
 8003dbc:	20000010 	.word	0x20000010
 8003dc0:	20000014 	.word	0x20000014

08003dc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dc8:	b094      	sub	sp, #80	; 0x50
 8003dca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	647b      	str	r3, [r7, #68]	; 0x44
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ddc:	4b79      	ldr	r3, [pc, #484]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f003 030c 	and.w	r3, r3, #12
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d00d      	beq.n	8003e04 <HAL_RCC_GetSysClockFreq+0x40>
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	f200 80e1 	bhi.w	8003fb0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d002      	beq.n	8003df8 <HAL_RCC_GetSysClockFreq+0x34>
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d003      	beq.n	8003dfe <HAL_RCC_GetSysClockFreq+0x3a>
 8003df6:	e0db      	b.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003df8:	4b73      	ldr	r3, [pc, #460]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dfa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003dfc:	e0db      	b.n	8003fb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dfe:	4b73      	ldr	r3, [pc, #460]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x208>)
 8003e00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e02:	e0d8      	b.n	8003fb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e04:	4b6f      	ldr	r3, [pc, #444]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e0c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e0e:	4b6d      	ldr	r3, [pc, #436]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d063      	beq.n	8003ee2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e1a:	4b6a      	ldr	r3, [pc, #424]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	099b      	lsrs	r3, r3, #6
 8003e20:	2200      	movs	r2, #0
 8003e22:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e2c:	633b      	str	r3, [r7, #48]	; 0x30
 8003e2e:	2300      	movs	r3, #0
 8003e30:	637b      	str	r3, [r7, #52]	; 0x34
 8003e32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e36:	4622      	mov	r2, r4
 8003e38:	462b      	mov	r3, r5
 8003e3a:	f04f 0000 	mov.w	r0, #0
 8003e3e:	f04f 0100 	mov.w	r1, #0
 8003e42:	0159      	lsls	r1, r3, #5
 8003e44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e48:	0150      	lsls	r0, r2, #5
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	4621      	mov	r1, r4
 8003e50:	1a51      	subs	r1, r2, r1
 8003e52:	6139      	str	r1, [r7, #16]
 8003e54:	4629      	mov	r1, r5
 8003e56:	eb63 0301 	sbc.w	r3, r3, r1
 8003e5a:	617b      	str	r3, [r7, #20]
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	f04f 0300 	mov.w	r3, #0
 8003e64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e68:	4659      	mov	r1, fp
 8003e6a:	018b      	lsls	r3, r1, #6
 8003e6c:	4651      	mov	r1, sl
 8003e6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e72:	4651      	mov	r1, sl
 8003e74:	018a      	lsls	r2, r1, #6
 8003e76:	4651      	mov	r1, sl
 8003e78:	ebb2 0801 	subs.w	r8, r2, r1
 8003e7c:	4659      	mov	r1, fp
 8003e7e:	eb63 0901 	sbc.w	r9, r3, r1
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	f04f 0300 	mov.w	r3, #0
 8003e8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e96:	4690      	mov	r8, r2
 8003e98:	4699      	mov	r9, r3
 8003e9a:	4623      	mov	r3, r4
 8003e9c:	eb18 0303 	adds.w	r3, r8, r3
 8003ea0:	60bb      	str	r3, [r7, #8]
 8003ea2:	462b      	mov	r3, r5
 8003ea4:	eb49 0303 	adc.w	r3, r9, r3
 8003ea8:	60fb      	str	r3, [r7, #12]
 8003eaa:	f04f 0200 	mov.w	r2, #0
 8003eae:	f04f 0300 	mov.w	r3, #0
 8003eb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003eb6:	4629      	mov	r1, r5
 8003eb8:	024b      	lsls	r3, r1, #9
 8003eba:	4621      	mov	r1, r4
 8003ebc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ec0:	4621      	mov	r1, r4
 8003ec2:	024a      	lsls	r2, r1, #9
 8003ec4:	4610      	mov	r0, r2
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eca:	2200      	movs	r2, #0
 8003ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ece:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ed0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ed4:	f7fc fd0a 	bl	80008ec <__aeabi_uldivmod>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	460b      	mov	r3, r1
 8003edc:	4613      	mov	r3, r2
 8003ede:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ee0:	e058      	b.n	8003f94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ee2:	4b38      	ldr	r3, [pc, #224]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	099b      	lsrs	r3, r3, #6
 8003ee8:	2200      	movs	r2, #0
 8003eea:	4618      	mov	r0, r3
 8003eec:	4611      	mov	r1, r2
 8003eee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ef2:	623b      	str	r3, [r7, #32]
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003efc:	4642      	mov	r2, r8
 8003efe:	464b      	mov	r3, r9
 8003f00:	f04f 0000 	mov.w	r0, #0
 8003f04:	f04f 0100 	mov.w	r1, #0
 8003f08:	0159      	lsls	r1, r3, #5
 8003f0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f0e:	0150      	lsls	r0, r2, #5
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	4641      	mov	r1, r8
 8003f16:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f1a:	4649      	mov	r1, r9
 8003f1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f20:	f04f 0200 	mov.w	r2, #0
 8003f24:	f04f 0300 	mov.w	r3, #0
 8003f28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f34:	ebb2 040a 	subs.w	r4, r2, sl
 8003f38:	eb63 050b 	sbc.w	r5, r3, fp
 8003f3c:	f04f 0200 	mov.w	r2, #0
 8003f40:	f04f 0300 	mov.w	r3, #0
 8003f44:	00eb      	lsls	r3, r5, #3
 8003f46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f4a:	00e2      	lsls	r2, r4, #3
 8003f4c:	4614      	mov	r4, r2
 8003f4e:	461d      	mov	r5, r3
 8003f50:	4643      	mov	r3, r8
 8003f52:	18e3      	adds	r3, r4, r3
 8003f54:	603b      	str	r3, [r7, #0]
 8003f56:	464b      	mov	r3, r9
 8003f58:	eb45 0303 	adc.w	r3, r5, r3
 8003f5c:	607b      	str	r3, [r7, #4]
 8003f5e:	f04f 0200 	mov.w	r2, #0
 8003f62:	f04f 0300 	mov.w	r3, #0
 8003f66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f6a:	4629      	mov	r1, r5
 8003f6c:	028b      	lsls	r3, r1, #10
 8003f6e:	4621      	mov	r1, r4
 8003f70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f74:	4621      	mov	r1, r4
 8003f76:	028a      	lsls	r2, r1, #10
 8003f78:	4610      	mov	r0, r2
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f7e:	2200      	movs	r2, #0
 8003f80:	61bb      	str	r3, [r7, #24]
 8003f82:	61fa      	str	r2, [r7, #28]
 8003f84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f88:	f7fc fcb0 	bl	80008ec <__aeabi_uldivmod>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4613      	mov	r3, r2
 8003f92:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f94:	4b0b      	ldr	r3, [pc, #44]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	0c1b      	lsrs	r3, r3, #16
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003fa4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fae:	e002      	b.n	8003fb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fb0:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fb2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3750      	adds	r7, #80	; 0x50
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	00f42400 	.word	0x00f42400
 8003fcc:	007a1200 	.word	0x007a1200

08003fd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fd4:	4b03      	ldr	r3, [pc, #12]	; (8003fe4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	20000010 	.word	0x20000010

08003fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fec:	f7ff fff0 	bl	8003fd0 <HAL_RCC_GetHCLKFreq>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	4b05      	ldr	r3, [pc, #20]	; (8004008 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	0a9b      	lsrs	r3, r3, #10
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	4903      	ldr	r1, [pc, #12]	; (800400c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ffe:	5ccb      	ldrb	r3, [r1, r3]
 8004000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004004:	4618      	mov	r0, r3
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40023800 	.word	0x40023800
 800400c:	08004fac 	.word	0x08004fac

08004010 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004014:	f7ff ffdc 	bl	8003fd0 <HAL_RCC_GetHCLKFreq>
 8004018:	4602      	mov	r2, r0
 800401a:	4b05      	ldr	r3, [pc, #20]	; (8004030 <HAL_RCC_GetPCLK2Freq+0x20>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	0b5b      	lsrs	r3, r3, #13
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	4903      	ldr	r1, [pc, #12]	; (8004034 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004026:	5ccb      	ldrb	r3, [r1, r3]
 8004028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800402c:	4618      	mov	r0, r3
 800402e:	bd80      	pop	{r7, pc}
 8004030:	40023800 	.word	0x40023800
 8004034:	08004fac 	.word	0x08004fac

08004038 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e03f      	b.n	80040ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d106      	bne.n	8004064 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7fd fbde 	bl	8001820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2224      	movs	r2, #36	; 0x24
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68da      	ldr	r2, [r3, #12]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800407a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 f829 	bl	80040d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	691a      	ldr	r2, [r3, #16]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004090:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695a      	ldr	r2, [r3, #20]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3708      	adds	r7, #8
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
	...

080040d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040d8:	b0c0      	sub	sp, #256	; 0x100
 80040da:	af00      	add	r7, sp, #0
 80040dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80040ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f0:	68d9      	ldr	r1, [r3, #12]
 80040f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	ea40 0301 	orr.w	r3, r0, r1
 80040fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	431a      	orrs	r2, r3
 800410c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	431a      	orrs	r2, r3
 8004114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	4313      	orrs	r3, r2
 800411c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800412c:	f021 010c 	bic.w	r1, r1, #12
 8004130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800413a:	430b      	orrs	r3, r1
 800413c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800413e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800414a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800414e:	6999      	ldr	r1, [r3, #24]
 8004150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	ea40 0301 	orr.w	r3, r0, r1
 800415a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800415c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	4b8f      	ldr	r3, [pc, #572]	; (80043a0 <UART_SetConfig+0x2cc>)
 8004164:	429a      	cmp	r2, r3
 8004166:	d005      	beq.n	8004174 <UART_SetConfig+0xa0>
 8004168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	4b8d      	ldr	r3, [pc, #564]	; (80043a4 <UART_SetConfig+0x2d0>)
 8004170:	429a      	cmp	r2, r3
 8004172:	d104      	bne.n	800417e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004174:	f7ff ff4c 	bl	8004010 <HAL_RCC_GetPCLK2Freq>
 8004178:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800417c:	e003      	b.n	8004186 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800417e:	f7ff ff33 	bl	8003fe8 <HAL_RCC_GetPCLK1Freq>
 8004182:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004190:	f040 810c 	bne.w	80043ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004194:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004198:	2200      	movs	r2, #0
 800419a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800419e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80041a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80041a6:	4622      	mov	r2, r4
 80041a8:	462b      	mov	r3, r5
 80041aa:	1891      	adds	r1, r2, r2
 80041ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80041ae:	415b      	adcs	r3, r3
 80041b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80041b6:	4621      	mov	r1, r4
 80041b8:	eb12 0801 	adds.w	r8, r2, r1
 80041bc:	4629      	mov	r1, r5
 80041be:	eb43 0901 	adc.w	r9, r3, r1
 80041c2:	f04f 0200 	mov.w	r2, #0
 80041c6:	f04f 0300 	mov.w	r3, #0
 80041ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041d6:	4690      	mov	r8, r2
 80041d8:	4699      	mov	r9, r3
 80041da:	4623      	mov	r3, r4
 80041dc:	eb18 0303 	adds.w	r3, r8, r3
 80041e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80041e4:	462b      	mov	r3, r5
 80041e6:	eb49 0303 	adc.w	r3, r9, r3
 80041ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80041ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80041fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80041fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004202:	460b      	mov	r3, r1
 8004204:	18db      	adds	r3, r3, r3
 8004206:	653b      	str	r3, [r7, #80]	; 0x50
 8004208:	4613      	mov	r3, r2
 800420a:	eb42 0303 	adc.w	r3, r2, r3
 800420e:	657b      	str	r3, [r7, #84]	; 0x54
 8004210:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004214:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004218:	f7fc fb68 	bl	80008ec <__aeabi_uldivmod>
 800421c:	4602      	mov	r2, r0
 800421e:	460b      	mov	r3, r1
 8004220:	4b61      	ldr	r3, [pc, #388]	; (80043a8 <UART_SetConfig+0x2d4>)
 8004222:	fba3 2302 	umull	r2, r3, r3, r2
 8004226:	095b      	lsrs	r3, r3, #5
 8004228:	011c      	lsls	r4, r3, #4
 800422a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800422e:	2200      	movs	r2, #0
 8004230:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004234:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004238:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800423c:	4642      	mov	r2, r8
 800423e:	464b      	mov	r3, r9
 8004240:	1891      	adds	r1, r2, r2
 8004242:	64b9      	str	r1, [r7, #72]	; 0x48
 8004244:	415b      	adcs	r3, r3
 8004246:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004248:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800424c:	4641      	mov	r1, r8
 800424e:	eb12 0a01 	adds.w	sl, r2, r1
 8004252:	4649      	mov	r1, r9
 8004254:	eb43 0b01 	adc.w	fp, r3, r1
 8004258:	f04f 0200 	mov.w	r2, #0
 800425c:	f04f 0300 	mov.w	r3, #0
 8004260:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004264:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004268:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800426c:	4692      	mov	sl, r2
 800426e:	469b      	mov	fp, r3
 8004270:	4643      	mov	r3, r8
 8004272:	eb1a 0303 	adds.w	r3, sl, r3
 8004276:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800427a:	464b      	mov	r3, r9
 800427c:	eb4b 0303 	adc.w	r3, fp, r3
 8004280:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004290:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004294:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004298:	460b      	mov	r3, r1
 800429a:	18db      	adds	r3, r3, r3
 800429c:	643b      	str	r3, [r7, #64]	; 0x40
 800429e:	4613      	mov	r3, r2
 80042a0:	eb42 0303 	adc.w	r3, r2, r3
 80042a4:	647b      	str	r3, [r7, #68]	; 0x44
 80042a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80042aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80042ae:	f7fc fb1d 	bl	80008ec <__aeabi_uldivmod>
 80042b2:	4602      	mov	r2, r0
 80042b4:	460b      	mov	r3, r1
 80042b6:	4611      	mov	r1, r2
 80042b8:	4b3b      	ldr	r3, [pc, #236]	; (80043a8 <UART_SetConfig+0x2d4>)
 80042ba:	fba3 2301 	umull	r2, r3, r3, r1
 80042be:	095b      	lsrs	r3, r3, #5
 80042c0:	2264      	movs	r2, #100	; 0x64
 80042c2:	fb02 f303 	mul.w	r3, r2, r3
 80042c6:	1acb      	subs	r3, r1, r3
 80042c8:	00db      	lsls	r3, r3, #3
 80042ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80042ce:	4b36      	ldr	r3, [pc, #216]	; (80043a8 <UART_SetConfig+0x2d4>)
 80042d0:	fba3 2302 	umull	r2, r3, r3, r2
 80042d4:	095b      	lsrs	r3, r3, #5
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042dc:	441c      	add	r4, r3
 80042de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042e2:	2200      	movs	r2, #0
 80042e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80042ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80042f0:	4642      	mov	r2, r8
 80042f2:	464b      	mov	r3, r9
 80042f4:	1891      	adds	r1, r2, r2
 80042f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80042f8:	415b      	adcs	r3, r3
 80042fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004300:	4641      	mov	r1, r8
 8004302:	1851      	adds	r1, r2, r1
 8004304:	6339      	str	r1, [r7, #48]	; 0x30
 8004306:	4649      	mov	r1, r9
 8004308:	414b      	adcs	r3, r1
 800430a:	637b      	str	r3, [r7, #52]	; 0x34
 800430c:	f04f 0200 	mov.w	r2, #0
 8004310:	f04f 0300 	mov.w	r3, #0
 8004314:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004318:	4659      	mov	r1, fp
 800431a:	00cb      	lsls	r3, r1, #3
 800431c:	4651      	mov	r1, sl
 800431e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004322:	4651      	mov	r1, sl
 8004324:	00ca      	lsls	r2, r1, #3
 8004326:	4610      	mov	r0, r2
 8004328:	4619      	mov	r1, r3
 800432a:	4603      	mov	r3, r0
 800432c:	4642      	mov	r2, r8
 800432e:	189b      	adds	r3, r3, r2
 8004330:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004334:	464b      	mov	r3, r9
 8004336:	460a      	mov	r2, r1
 8004338:	eb42 0303 	adc.w	r3, r2, r3
 800433c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800434c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004350:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004354:	460b      	mov	r3, r1
 8004356:	18db      	adds	r3, r3, r3
 8004358:	62bb      	str	r3, [r7, #40]	; 0x28
 800435a:	4613      	mov	r3, r2
 800435c:	eb42 0303 	adc.w	r3, r2, r3
 8004360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004362:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004366:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800436a:	f7fc fabf 	bl	80008ec <__aeabi_uldivmod>
 800436e:	4602      	mov	r2, r0
 8004370:	460b      	mov	r3, r1
 8004372:	4b0d      	ldr	r3, [pc, #52]	; (80043a8 <UART_SetConfig+0x2d4>)
 8004374:	fba3 1302 	umull	r1, r3, r3, r2
 8004378:	095b      	lsrs	r3, r3, #5
 800437a:	2164      	movs	r1, #100	; 0x64
 800437c:	fb01 f303 	mul.w	r3, r1, r3
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	3332      	adds	r3, #50	; 0x32
 8004386:	4a08      	ldr	r2, [pc, #32]	; (80043a8 <UART_SetConfig+0x2d4>)
 8004388:	fba2 2303 	umull	r2, r3, r2, r3
 800438c:	095b      	lsrs	r3, r3, #5
 800438e:	f003 0207 	and.w	r2, r3, #7
 8004392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4422      	add	r2, r4
 800439a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800439c:	e106      	b.n	80045ac <UART_SetConfig+0x4d8>
 800439e:	bf00      	nop
 80043a0:	40011000 	.word	0x40011000
 80043a4:	40011400 	.word	0x40011400
 80043a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043b0:	2200      	movs	r2, #0
 80043b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80043b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80043ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80043be:	4642      	mov	r2, r8
 80043c0:	464b      	mov	r3, r9
 80043c2:	1891      	adds	r1, r2, r2
 80043c4:	6239      	str	r1, [r7, #32]
 80043c6:	415b      	adcs	r3, r3
 80043c8:	627b      	str	r3, [r7, #36]	; 0x24
 80043ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043ce:	4641      	mov	r1, r8
 80043d0:	1854      	adds	r4, r2, r1
 80043d2:	4649      	mov	r1, r9
 80043d4:	eb43 0501 	adc.w	r5, r3, r1
 80043d8:	f04f 0200 	mov.w	r2, #0
 80043dc:	f04f 0300 	mov.w	r3, #0
 80043e0:	00eb      	lsls	r3, r5, #3
 80043e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043e6:	00e2      	lsls	r2, r4, #3
 80043e8:	4614      	mov	r4, r2
 80043ea:	461d      	mov	r5, r3
 80043ec:	4643      	mov	r3, r8
 80043ee:	18e3      	adds	r3, r4, r3
 80043f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043f4:	464b      	mov	r3, r9
 80043f6:	eb45 0303 	adc.w	r3, r5, r3
 80043fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80043fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800440a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800440e:	f04f 0200 	mov.w	r2, #0
 8004412:	f04f 0300 	mov.w	r3, #0
 8004416:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800441a:	4629      	mov	r1, r5
 800441c:	008b      	lsls	r3, r1, #2
 800441e:	4621      	mov	r1, r4
 8004420:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004424:	4621      	mov	r1, r4
 8004426:	008a      	lsls	r2, r1, #2
 8004428:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800442c:	f7fc fa5e 	bl	80008ec <__aeabi_uldivmod>
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	4b60      	ldr	r3, [pc, #384]	; (80045b8 <UART_SetConfig+0x4e4>)
 8004436:	fba3 2302 	umull	r2, r3, r3, r2
 800443a:	095b      	lsrs	r3, r3, #5
 800443c:	011c      	lsls	r4, r3, #4
 800443e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004442:	2200      	movs	r2, #0
 8004444:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004448:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800444c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004450:	4642      	mov	r2, r8
 8004452:	464b      	mov	r3, r9
 8004454:	1891      	adds	r1, r2, r2
 8004456:	61b9      	str	r1, [r7, #24]
 8004458:	415b      	adcs	r3, r3
 800445a:	61fb      	str	r3, [r7, #28]
 800445c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004460:	4641      	mov	r1, r8
 8004462:	1851      	adds	r1, r2, r1
 8004464:	6139      	str	r1, [r7, #16]
 8004466:	4649      	mov	r1, r9
 8004468:	414b      	adcs	r3, r1
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	f04f 0200 	mov.w	r2, #0
 8004470:	f04f 0300 	mov.w	r3, #0
 8004474:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004478:	4659      	mov	r1, fp
 800447a:	00cb      	lsls	r3, r1, #3
 800447c:	4651      	mov	r1, sl
 800447e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004482:	4651      	mov	r1, sl
 8004484:	00ca      	lsls	r2, r1, #3
 8004486:	4610      	mov	r0, r2
 8004488:	4619      	mov	r1, r3
 800448a:	4603      	mov	r3, r0
 800448c:	4642      	mov	r2, r8
 800448e:	189b      	adds	r3, r3, r2
 8004490:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004494:	464b      	mov	r3, r9
 8004496:	460a      	mov	r2, r1
 8004498:	eb42 0303 	adc.w	r3, r2, r3
 800449c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80044aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80044ac:	f04f 0200 	mov.w	r2, #0
 80044b0:	f04f 0300 	mov.w	r3, #0
 80044b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80044b8:	4649      	mov	r1, r9
 80044ba:	008b      	lsls	r3, r1, #2
 80044bc:	4641      	mov	r1, r8
 80044be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044c2:	4641      	mov	r1, r8
 80044c4:	008a      	lsls	r2, r1, #2
 80044c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80044ca:	f7fc fa0f 	bl	80008ec <__aeabi_uldivmod>
 80044ce:	4602      	mov	r2, r0
 80044d0:	460b      	mov	r3, r1
 80044d2:	4611      	mov	r1, r2
 80044d4:	4b38      	ldr	r3, [pc, #224]	; (80045b8 <UART_SetConfig+0x4e4>)
 80044d6:	fba3 2301 	umull	r2, r3, r3, r1
 80044da:	095b      	lsrs	r3, r3, #5
 80044dc:	2264      	movs	r2, #100	; 0x64
 80044de:	fb02 f303 	mul.w	r3, r2, r3
 80044e2:	1acb      	subs	r3, r1, r3
 80044e4:	011b      	lsls	r3, r3, #4
 80044e6:	3332      	adds	r3, #50	; 0x32
 80044e8:	4a33      	ldr	r2, [pc, #204]	; (80045b8 <UART_SetConfig+0x4e4>)
 80044ea:	fba2 2303 	umull	r2, r3, r2, r3
 80044ee:	095b      	lsrs	r3, r3, #5
 80044f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044f4:	441c      	add	r4, r3
 80044f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044fa:	2200      	movs	r2, #0
 80044fc:	673b      	str	r3, [r7, #112]	; 0x70
 80044fe:	677a      	str	r2, [r7, #116]	; 0x74
 8004500:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004504:	4642      	mov	r2, r8
 8004506:	464b      	mov	r3, r9
 8004508:	1891      	adds	r1, r2, r2
 800450a:	60b9      	str	r1, [r7, #8]
 800450c:	415b      	adcs	r3, r3
 800450e:	60fb      	str	r3, [r7, #12]
 8004510:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004514:	4641      	mov	r1, r8
 8004516:	1851      	adds	r1, r2, r1
 8004518:	6039      	str	r1, [r7, #0]
 800451a:	4649      	mov	r1, r9
 800451c:	414b      	adcs	r3, r1
 800451e:	607b      	str	r3, [r7, #4]
 8004520:	f04f 0200 	mov.w	r2, #0
 8004524:	f04f 0300 	mov.w	r3, #0
 8004528:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800452c:	4659      	mov	r1, fp
 800452e:	00cb      	lsls	r3, r1, #3
 8004530:	4651      	mov	r1, sl
 8004532:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004536:	4651      	mov	r1, sl
 8004538:	00ca      	lsls	r2, r1, #3
 800453a:	4610      	mov	r0, r2
 800453c:	4619      	mov	r1, r3
 800453e:	4603      	mov	r3, r0
 8004540:	4642      	mov	r2, r8
 8004542:	189b      	adds	r3, r3, r2
 8004544:	66bb      	str	r3, [r7, #104]	; 0x68
 8004546:	464b      	mov	r3, r9
 8004548:	460a      	mov	r2, r1
 800454a:	eb42 0303 	adc.w	r3, r2, r3
 800454e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	663b      	str	r3, [r7, #96]	; 0x60
 800455a:	667a      	str	r2, [r7, #100]	; 0x64
 800455c:	f04f 0200 	mov.w	r2, #0
 8004560:	f04f 0300 	mov.w	r3, #0
 8004564:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004568:	4649      	mov	r1, r9
 800456a:	008b      	lsls	r3, r1, #2
 800456c:	4641      	mov	r1, r8
 800456e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004572:	4641      	mov	r1, r8
 8004574:	008a      	lsls	r2, r1, #2
 8004576:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800457a:	f7fc f9b7 	bl	80008ec <__aeabi_uldivmod>
 800457e:	4602      	mov	r2, r0
 8004580:	460b      	mov	r3, r1
 8004582:	4b0d      	ldr	r3, [pc, #52]	; (80045b8 <UART_SetConfig+0x4e4>)
 8004584:	fba3 1302 	umull	r1, r3, r3, r2
 8004588:	095b      	lsrs	r3, r3, #5
 800458a:	2164      	movs	r1, #100	; 0x64
 800458c:	fb01 f303 	mul.w	r3, r1, r3
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	3332      	adds	r3, #50	; 0x32
 8004596:	4a08      	ldr	r2, [pc, #32]	; (80045b8 <UART_SetConfig+0x4e4>)
 8004598:	fba2 2303 	umull	r2, r3, r2, r3
 800459c:	095b      	lsrs	r3, r3, #5
 800459e:	f003 020f 	and.w	r2, r3, #15
 80045a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4422      	add	r2, r4
 80045aa:	609a      	str	r2, [r3, #8]
}
 80045ac:	bf00      	nop
 80045ae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80045b2:	46bd      	mov	sp, r7
 80045b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045b8:	51eb851f 	.word	0x51eb851f

080045bc <siprintf>:
 80045bc:	b40e      	push	{r1, r2, r3}
 80045be:	b500      	push	{lr}
 80045c0:	b09c      	sub	sp, #112	; 0x70
 80045c2:	ab1d      	add	r3, sp, #116	; 0x74
 80045c4:	9002      	str	r0, [sp, #8]
 80045c6:	9006      	str	r0, [sp, #24]
 80045c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045cc:	4809      	ldr	r0, [pc, #36]	; (80045f4 <siprintf+0x38>)
 80045ce:	9107      	str	r1, [sp, #28]
 80045d0:	9104      	str	r1, [sp, #16]
 80045d2:	4909      	ldr	r1, [pc, #36]	; (80045f8 <siprintf+0x3c>)
 80045d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80045d8:	9105      	str	r1, [sp, #20]
 80045da:	6800      	ldr	r0, [r0, #0]
 80045dc:	9301      	str	r3, [sp, #4]
 80045de:	a902      	add	r1, sp, #8
 80045e0:	f000 f992 	bl	8004908 <_svfiprintf_r>
 80045e4:	9b02      	ldr	r3, [sp, #8]
 80045e6:	2200      	movs	r2, #0
 80045e8:	701a      	strb	r2, [r3, #0]
 80045ea:	b01c      	add	sp, #112	; 0x70
 80045ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80045f0:	b003      	add	sp, #12
 80045f2:	4770      	bx	lr
 80045f4:	20000068 	.word	0x20000068
 80045f8:	ffff0208 	.word	0xffff0208

080045fc <memset>:
 80045fc:	4402      	add	r2, r0
 80045fe:	4603      	mov	r3, r0
 8004600:	4293      	cmp	r3, r2
 8004602:	d100      	bne.n	8004606 <memset+0xa>
 8004604:	4770      	bx	lr
 8004606:	f803 1b01 	strb.w	r1, [r3], #1
 800460a:	e7f9      	b.n	8004600 <memset+0x4>

0800460c <__errno>:
 800460c:	4b01      	ldr	r3, [pc, #4]	; (8004614 <__errno+0x8>)
 800460e:	6818      	ldr	r0, [r3, #0]
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	20000068 	.word	0x20000068

08004618 <__libc_init_array>:
 8004618:	b570      	push	{r4, r5, r6, lr}
 800461a:	4d0d      	ldr	r5, [pc, #52]	; (8004650 <__libc_init_array+0x38>)
 800461c:	4c0d      	ldr	r4, [pc, #52]	; (8004654 <__libc_init_array+0x3c>)
 800461e:	1b64      	subs	r4, r4, r5
 8004620:	10a4      	asrs	r4, r4, #2
 8004622:	2600      	movs	r6, #0
 8004624:	42a6      	cmp	r6, r4
 8004626:	d109      	bne.n	800463c <__libc_init_array+0x24>
 8004628:	4d0b      	ldr	r5, [pc, #44]	; (8004658 <__libc_init_array+0x40>)
 800462a:	4c0c      	ldr	r4, [pc, #48]	; (800465c <__libc_init_array+0x44>)
 800462c:	f000 fc6a 	bl	8004f04 <_init>
 8004630:	1b64      	subs	r4, r4, r5
 8004632:	10a4      	asrs	r4, r4, #2
 8004634:	2600      	movs	r6, #0
 8004636:	42a6      	cmp	r6, r4
 8004638:	d105      	bne.n	8004646 <__libc_init_array+0x2e>
 800463a:	bd70      	pop	{r4, r5, r6, pc}
 800463c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004640:	4798      	blx	r3
 8004642:	3601      	adds	r6, #1
 8004644:	e7ee      	b.n	8004624 <__libc_init_array+0xc>
 8004646:	f855 3b04 	ldr.w	r3, [r5], #4
 800464a:	4798      	blx	r3
 800464c:	3601      	adds	r6, #1
 800464e:	e7f2      	b.n	8004636 <__libc_init_array+0x1e>
 8004650:	08004ff0 	.word	0x08004ff0
 8004654:	08004ff0 	.word	0x08004ff0
 8004658:	08004ff0 	.word	0x08004ff0
 800465c:	08004ff4 	.word	0x08004ff4

08004660 <__retarget_lock_acquire_recursive>:
 8004660:	4770      	bx	lr

08004662 <__retarget_lock_release_recursive>:
 8004662:	4770      	bx	lr

08004664 <_free_r>:
 8004664:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004666:	2900      	cmp	r1, #0
 8004668:	d044      	beq.n	80046f4 <_free_r+0x90>
 800466a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800466e:	9001      	str	r0, [sp, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	f1a1 0404 	sub.w	r4, r1, #4
 8004676:	bfb8      	it	lt
 8004678:	18e4      	addlt	r4, r4, r3
 800467a:	f000 f8df 	bl	800483c <__malloc_lock>
 800467e:	4a1e      	ldr	r2, [pc, #120]	; (80046f8 <_free_r+0x94>)
 8004680:	9801      	ldr	r0, [sp, #4]
 8004682:	6813      	ldr	r3, [r2, #0]
 8004684:	b933      	cbnz	r3, 8004694 <_free_r+0x30>
 8004686:	6063      	str	r3, [r4, #4]
 8004688:	6014      	str	r4, [r2, #0]
 800468a:	b003      	add	sp, #12
 800468c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004690:	f000 b8da 	b.w	8004848 <__malloc_unlock>
 8004694:	42a3      	cmp	r3, r4
 8004696:	d908      	bls.n	80046aa <_free_r+0x46>
 8004698:	6825      	ldr	r5, [r4, #0]
 800469a:	1961      	adds	r1, r4, r5
 800469c:	428b      	cmp	r3, r1
 800469e:	bf01      	itttt	eq
 80046a0:	6819      	ldreq	r1, [r3, #0]
 80046a2:	685b      	ldreq	r3, [r3, #4]
 80046a4:	1949      	addeq	r1, r1, r5
 80046a6:	6021      	streq	r1, [r4, #0]
 80046a8:	e7ed      	b.n	8004686 <_free_r+0x22>
 80046aa:	461a      	mov	r2, r3
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	b10b      	cbz	r3, 80046b4 <_free_r+0x50>
 80046b0:	42a3      	cmp	r3, r4
 80046b2:	d9fa      	bls.n	80046aa <_free_r+0x46>
 80046b4:	6811      	ldr	r1, [r2, #0]
 80046b6:	1855      	adds	r5, r2, r1
 80046b8:	42a5      	cmp	r5, r4
 80046ba:	d10b      	bne.n	80046d4 <_free_r+0x70>
 80046bc:	6824      	ldr	r4, [r4, #0]
 80046be:	4421      	add	r1, r4
 80046c0:	1854      	adds	r4, r2, r1
 80046c2:	42a3      	cmp	r3, r4
 80046c4:	6011      	str	r1, [r2, #0]
 80046c6:	d1e0      	bne.n	800468a <_free_r+0x26>
 80046c8:	681c      	ldr	r4, [r3, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	6053      	str	r3, [r2, #4]
 80046ce:	440c      	add	r4, r1
 80046d0:	6014      	str	r4, [r2, #0]
 80046d2:	e7da      	b.n	800468a <_free_r+0x26>
 80046d4:	d902      	bls.n	80046dc <_free_r+0x78>
 80046d6:	230c      	movs	r3, #12
 80046d8:	6003      	str	r3, [r0, #0]
 80046da:	e7d6      	b.n	800468a <_free_r+0x26>
 80046dc:	6825      	ldr	r5, [r4, #0]
 80046de:	1961      	adds	r1, r4, r5
 80046e0:	428b      	cmp	r3, r1
 80046e2:	bf04      	itt	eq
 80046e4:	6819      	ldreq	r1, [r3, #0]
 80046e6:	685b      	ldreq	r3, [r3, #4]
 80046e8:	6063      	str	r3, [r4, #4]
 80046ea:	bf04      	itt	eq
 80046ec:	1949      	addeq	r1, r1, r5
 80046ee:	6021      	streq	r1, [r4, #0]
 80046f0:	6054      	str	r4, [r2, #4]
 80046f2:	e7ca      	b.n	800468a <_free_r+0x26>
 80046f4:	b003      	add	sp, #12
 80046f6:	bd30      	pop	{r4, r5, pc}
 80046f8:	200002b8 	.word	0x200002b8

080046fc <sbrk_aligned>:
 80046fc:	b570      	push	{r4, r5, r6, lr}
 80046fe:	4e0e      	ldr	r6, [pc, #56]	; (8004738 <sbrk_aligned+0x3c>)
 8004700:	460c      	mov	r4, r1
 8004702:	6831      	ldr	r1, [r6, #0]
 8004704:	4605      	mov	r5, r0
 8004706:	b911      	cbnz	r1, 800470e <sbrk_aligned+0x12>
 8004708:	f000 fba6 	bl	8004e58 <_sbrk_r>
 800470c:	6030      	str	r0, [r6, #0]
 800470e:	4621      	mov	r1, r4
 8004710:	4628      	mov	r0, r5
 8004712:	f000 fba1 	bl	8004e58 <_sbrk_r>
 8004716:	1c43      	adds	r3, r0, #1
 8004718:	d00a      	beq.n	8004730 <sbrk_aligned+0x34>
 800471a:	1cc4      	adds	r4, r0, #3
 800471c:	f024 0403 	bic.w	r4, r4, #3
 8004720:	42a0      	cmp	r0, r4
 8004722:	d007      	beq.n	8004734 <sbrk_aligned+0x38>
 8004724:	1a21      	subs	r1, r4, r0
 8004726:	4628      	mov	r0, r5
 8004728:	f000 fb96 	bl	8004e58 <_sbrk_r>
 800472c:	3001      	adds	r0, #1
 800472e:	d101      	bne.n	8004734 <sbrk_aligned+0x38>
 8004730:	f04f 34ff 	mov.w	r4, #4294967295
 8004734:	4620      	mov	r0, r4
 8004736:	bd70      	pop	{r4, r5, r6, pc}
 8004738:	200002bc 	.word	0x200002bc

0800473c <_malloc_r>:
 800473c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004740:	1ccd      	adds	r5, r1, #3
 8004742:	f025 0503 	bic.w	r5, r5, #3
 8004746:	3508      	adds	r5, #8
 8004748:	2d0c      	cmp	r5, #12
 800474a:	bf38      	it	cc
 800474c:	250c      	movcc	r5, #12
 800474e:	2d00      	cmp	r5, #0
 8004750:	4607      	mov	r7, r0
 8004752:	db01      	blt.n	8004758 <_malloc_r+0x1c>
 8004754:	42a9      	cmp	r1, r5
 8004756:	d905      	bls.n	8004764 <_malloc_r+0x28>
 8004758:	230c      	movs	r3, #12
 800475a:	603b      	str	r3, [r7, #0]
 800475c:	2600      	movs	r6, #0
 800475e:	4630      	mov	r0, r6
 8004760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004764:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004838 <_malloc_r+0xfc>
 8004768:	f000 f868 	bl	800483c <__malloc_lock>
 800476c:	f8d8 3000 	ldr.w	r3, [r8]
 8004770:	461c      	mov	r4, r3
 8004772:	bb5c      	cbnz	r4, 80047cc <_malloc_r+0x90>
 8004774:	4629      	mov	r1, r5
 8004776:	4638      	mov	r0, r7
 8004778:	f7ff ffc0 	bl	80046fc <sbrk_aligned>
 800477c:	1c43      	adds	r3, r0, #1
 800477e:	4604      	mov	r4, r0
 8004780:	d155      	bne.n	800482e <_malloc_r+0xf2>
 8004782:	f8d8 4000 	ldr.w	r4, [r8]
 8004786:	4626      	mov	r6, r4
 8004788:	2e00      	cmp	r6, #0
 800478a:	d145      	bne.n	8004818 <_malloc_r+0xdc>
 800478c:	2c00      	cmp	r4, #0
 800478e:	d048      	beq.n	8004822 <_malloc_r+0xe6>
 8004790:	6823      	ldr	r3, [r4, #0]
 8004792:	4631      	mov	r1, r6
 8004794:	4638      	mov	r0, r7
 8004796:	eb04 0903 	add.w	r9, r4, r3
 800479a:	f000 fb5d 	bl	8004e58 <_sbrk_r>
 800479e:	4581      	cmp	r9, r0
 80047a0:	d13f      	bne.n	8004822 <_malloc_r+0xe6>
 80047a2:	6821      	ldr	r1, [r4, #0]
 80047a4:	1a6d      	subs	r5, r5, r1
 80047a6:	4629      	mov	r1, r5
 80047a8:	4638      	mov	r0, r7
 80047aa:	f7ff ffa7 	bl	80046fc <sbrk_aligned>
 80047ae:	3001      	adds	r0, #1
 80047b0:	d037      	beq.n	8004822 <_malloc_r+0xe6>
 80047b2:	6823      	ldr	r3, [r4, #0]
 80047b4:	442b      	add	r3, r5
 80047b6:	6023      	str	r3, [r4, #0]
 80047b8:	f8d8 3000 	ldr.w	r3, [r8]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d038      	beq.n	8004832 <_malloc_r+0xf6>
 80047c0:	685a      	ldr	r2, [r3, #4]
 80047c2:	42a2      	cmp	r2, r4
 80047c4:	d12b      	bne.n	800481e <_malloc_r+0xe2>
 80047c6:	2200      	movs	r2, #0
 80047c8:	605a      	str	r2, [r3, #4]
 80047ca:	e00f      	b.n	80047ec <_malloc_r+0xb0>
 80047cc:	6822      	ldr	r2, [r4, #0]
 80047ce:	1b52      	subs	r2, r2, r5
 80047d0:	d41f      	bmi.n	8004812 <_malloc_r+0xd6>
 80047d2:	2a0b      	cmp	r2, #11
 80047d4:	d917      	bls.n	8004806 <_malloc_r+0xca>
 80047d6:	1961      	adds	r1, r4, r5
 80047d8:	42a3      	cmp	r3, r4
 80047da:	6025      	str	r5, [r4, #0]
 80047dc:	bf18      	it	ne
 80047de:	6059      	strne	r1, [r3, #4]
 80047e0:	6863      	ldr	r3, [r4, #4]
 80047e2:	bf08      	it	eq
 80047e4:	f8c8 1000 	streq.w	r1, [r8]
 80047e8:	5162      	str	r2, [r4, r5]
 80047ea:	604b      	str	r3, [r1, #4]
 80047ec:	4638      	mov	r0, r7
 80047ee:	f104 060b 	add.w	r6, r4, #11
 80047f2:	f000 f829 	bl	8004848 <__malloc_unlock>
 80047f6:	f026 0607 	bic.w	r6, r6, #7
 80047fa:	1d23      	adds	r3, r4, #4
 80047fc:	1af2      	subs	r2, r6, r3
 80047fe:	d0ae      	beq.n	800475e <_malloc_r+0x22>
 8004800:	1b9b      	subs	r3, r3, r6
 8004802:	50a3      	str	r3, [r4, r2]
 8004804:	e7ab      	b.n	800475e <_malloc_r+0x22>
 8004806:	42a3      	cmp	r3, r4
 8004808:	6862      	ldr	r2, [r4, #4]
 800480a:	d1dd      	bne.n	80047c8 <_malloc_r+0x8c>
 800480c:	f8c8 2000 	str.w	r2, [r8]
 8004810:	e7ec      	b.n	80047ec <_malloc_r+0xb0>
 8004812:	4623      	mov	r3, r4
 8004814:	6864      	ldr	r4, [r4, #4]
 8004816:	e7ac      	b.n	8004772 <_malloc_r+0x36>
 8004818:	4634      	mov	r4, r6
 800481a:	6876      	ldr	r6, [r6, #4]
 800481c:	e7b4      	b.n	8004788 <_malloc_r+0x4c>
 800481e:	4613      	mov	r3, r2
 8004820:	e7cc      	b.n	80047bc <_malloc_r+0x80>
 8004822:	230c      	movs	r3, #12
 8004824:	603b      	str	r3, [r7, #0]
 8004826:	4638      	mov	r0, r7
 8004828:	f000 f80e 	bl	8004848 <__malloc_unlock>
 800482c:	e797      	b.n	800475e <_malloc_r+0x22>
 800482e:	6025      	str	r5, [r4, #0]
 8004830:	e7dc      	b.n	80047ec <_malloc_r+0xb0>
 8004832:	605b      	str	r3, [r3, #4]
 8004834:	deff      	udf	#255	; 0xff
 8004836:	bf00      	nop
 8004838:	200002b8 	.word	0x200002b8

0800483c <__malloc_lock>:
 800483c:	4801      	ldr	r0, [pc, #4]	; (8004844 <__malloc_lock+0x8>)
 800483e:	f7ff bf0f 	b.w	8004660 <__retarget_lock_acquire_recursive>
 8004842:	bf00      	nop
 8004844:	200002b4 	.word	0x200002b4

08004848 <__malloc_unlock>:
 8004848:	4801      	ldr	r0, [pc, #4]	; (8004850 <__malloc_unlock+0x8>)
 800484a:	f7ff bf0a 	b.w	8004662 <__retarget_lock_release_recursive>
 800484e:	bf00      	nop
 8004850:	200002b4 	.word	0x200002b4

08004854 <__ssputs_r>:
 8004854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004858:	688e      	ldr	r6, [r1, #8]
 800485a:	461f      	mov	r7, r3
 800485c:	42be      	cmp	r6, r7
 800485e:	680b      	ldr	r3, [r1, #0]
 8004860:	4682      	mov	sl, r0
 8004862:	460c      	mov	r4, r1
 8004864:	4690      	mov	r8, r2
 8004866:	d82c      	bhi.n	80048c2 <__ssputs_r+0x6e>
 8004868:	898a      	ldrh	r2, [r1, #12]
 800486a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800486e:	d026      	beq.n	80048be <__ssputs_r+0x6a>
 8004870:	6965      	ldr	r5, [r4, #20]
 8004872:	6909      	ldr	r1, [r1, #16]
 8004874:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004878:	eba3 0901 	sub.w	r9, r3, r1
 800487c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004880:	1c7b      	adds	r3, r7, #1
 8004882:	444b      	add	r3, r9
 8004884:	106d      	asrs	r5, r5, #1
 8004886:	429d      	cmp	r5, r3
 8004888:	bf38      	it	cc
 800488a:	461d      	movcc	r5, r3
 800488c:	0553      	lsls	r3, r2, #21
 800488e:	d527      	bpl.n	80048e0 <__ssputs_r+0x8c>
 8004890:	4629      	mov	r1, r5
 8004892:	f7ff ff53 	bl	800473c <_malloc_r>
 8004896:	4606      	mov	r6, r0
 8004898:	b360      	cbz	r0, 80048f4 <__ssputs_r+0xa0>
 800489a:	6921      	ldr	r1, [r4, #16]
 800489c:	464a      	mov	r2, r9
 800489e:	f000 faeb 	bl	8004e78 <memcpy>
 80048a2:	89a3      	ldrh	r3, [r4, #12]
 80048a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80048a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ac:	81a3      	strh	r3, [r4, #12]
 80048ae:	6126      	str	r6, [r4, #16]
 80048b0:	6165      	str	r5, [r4, #20]
 80048b2:	444e      	add	r6, r9
 80048b4:	eba5 0509 	sub.w	r5, r5, r9
 80048b8:	6026      	str	r6, [r4, #0]
 80048ba:	60a5      	str	r5, [r4, #8]
 80048bc:	463e      	mov	r6, r7
 80048be:	42be      	cmp	r6, r7
 80048c0:	d900      	bls.n	80048c4 <__ssputs_r+0x70>
 80048c2:	463e      	mov	r6, r7
 80048c4:	6820      	ldr	r0, [r4, #0]
 80048c6:	4632      	mov	r2, r6
 80048c8:	4641      	mov	r1, r8
 80048ca:	f000 faab 	bl	8004e24 <memmove>
 80048ce:	68a3      	ldr	r3, [r4, #8]
 80048d0:	1b9b      	subs	r3, r3, r6
 80048d2:	60a3      	str	r3, [r4, #8]
 80048d4:	6823      	ldr	r3, [r4, #0]
 80048d6:	4433      	add	r3, r6
 80048d8:	6023      	str	r3, [r4, #0]
 80048da:	2000      	movs	r0, #0
 80048dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048e0:	462a      	mov	r2, r5
 80048e2:	f000 fad7 	bl	8004e94 <_realloc_r>
 80048e6:	4606      	mov	r6, r0
 80048e8:	2800      	cmp	r0, #0
 80048ea:	d1e0      	bne.n	80048ae <__ssputs_r+0x5a>
 80048ec:	6921      	ldr	r1, [r4, #16]
 80048ee:	4650      	mov	r0, sl
 80048f0:	f7ff feb8 	bl	8004664 <_free_r>
 80048f4:	230c      	movs	r3, #12
 80048f6:	f8ca 3000 	str.w	r3, [sl]
 80048fa:	89a3      	ldrh	r3, [r4, #12]
 80048fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004900:	81a3      	strh	r3, [r4, #12]
 8004902:	f04f 30ff 	mov.w	r0, #4294967295
 8004906:	e7e9      	b.n	80048dc <__ssputs_r+0x88>

08004908 <_svfiprintf_r>:
 8004908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800490c:	4698      	mov	r8, r3
 800490e:	898b      	ldrh	r3, [r1, #12]
 8004910:	061b      	lsls	r3, r3, #24
 8004912:	b09d      	sub	sp, #116	; 0x74
 8004914:	4607      	mov	r7, r0
 8004916:	460d      	mov	r5, r1
 8004918:	4614      	mov	r4, r2
 800491a:	d50e      	bpl.n	800493a <_svfiprintf_r+0x32>
 800491c:	690b      	ldr	r3, [r1, #16]
 800491e:	b963      	cbnz	r3, 800493a <_svfiprintf_r+0x32>
 8004920:	2140      	movs	r1, #64	; 0x40
 8004922:	f7ff ff0b 	bl	800473c <_malloc_r>
 8004926:	6028      	str	r0, [r5, #0]
 8004928:	6128      	str	r0, [r5, #16]
 800492a:	b920      	cbnz	r0, 8004936 <_svfiprintf_r+0x2e>
 800492c:	230c      	movs	r3, #12
 800492e:	603b      	str	r3, [r7, #0]
 8004930:	f04f 30ff 	mov.w	r0, #4294967295
 8004934:	e0d0      	b.n	8004ad8 <_svfiprintf_r+0x1d0>
 8004936:	2340      	movs	r3, #64	; 0x40
 8004938:	616b      	str	r3, [r5, #20]
 800493a:	2300      	movs	r3, #0
 800493c:	9309      	str	r3, [sp, #36]	; 0x24
 800493e:	2320      	movs	r3, #32
 8004940:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004944:	f8cd 800c 	str.w	r8, [sp, #12]
 8004948:	2330      	movs	r3, #48	; 0x30
 800494a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004af0 <_svfiprintf_r+0x1e8>
 800494e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004952:	f04f 0901 	mov.w	r9, #1
 8004956:	4623      	mov	r3, r4
 8004958:	469a      	mov	sl, r3
 800495a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800495e:	b10a      	cbz	r2, 8004964 <_svfiprintf_r+0x5c>
 8004960:	2a25      	cmp	r2, #37	; 0x25
 8004962:	d1f9      	bne.n	8004958 <_svfiprintf_r+0x50>
 8004964:	ebba 0b04 	subs.w	fp, sl, r4
 8004968:	d00b      	beq.n	8004982 <_svfiprintf_r+0x7a>
 800496a:	465b      	mov	r3, fp
 800496c:	4622      	mov	r2, r4
 800496e:	4629      	mov	r1, r5
 8004970:	4638      	mov	r0, r7
 8004972:	f7ff ff6f 	bl	8004854 <__ssputs_r>
 8004976:	3001      	adds	r0, #1
 8004978:	f000 80a9 	beq.w	8004ace <_svfiprintf_r+0x1c6>
 800497c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800497e:	445a      	add	r2, fp
 8004980:	9209      	str	r2, [sp, #36]	; 0x24
 8004982:	f89a 3000 	ldrb.w	r3, [sl]
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 80a1 	beq.w	8004ace <_svfiprintf_r+0x1c6>
 800498c:	2300      	movs	r3, #0
 800498e:	f04f 32ff 	mov.w	r2, #4294967295
 8004992:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004996:	f10a 0a01 	add.w	sl, sl, #1
 800499a:	9304      	str	r3, [sp, #16]
 800499c:	9307      	str	r3, [sp, #28]
 800499e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049a2:	931a      	str	r3, [sp, #104]	; 0x68
 80049a4:	4654      	mov	r4, sl
 80049a6:	2205      	movs	r2, #5
 80049a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049ac:	4850      	ldr	r0, [pc, #320]	; (8004af0 <_svfiprintf_r+0x1e8>)
 80049ae:	f7fb fc17 	bl	80001e0 <memchr>
 80049b2:	9a04      	ldr	r2, [sp, #16]
 80049b4:	b9d8      	cbnz	r0, 80049ee <_svfiprintf_r+0xe6>
 80049b6:	06d0      	lsls	r0, r2, #27
 80049b8:	bf44      	itt	mi
 80049ba:	2320      	movmi	r3, #32
 80049bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049c0:	0711      	lsls	r1, r2, #28
 80049c2:	bf44      	itt	mi
 80049c4:	232b      	movmi	r3, #43	; 0x2b
 80049c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049ca:	f89a 3000 	ldrb.w	r3, [sl]
 80049ce:	2b2a      	cmp	r3, #42	; 0x2a
 80049d0:	d015      	beq.n	80049fe <_svfiprintf_r+0xf6>
 80049d2:	9a07      	ldr	r2, [sp, #28]
 80049d4:	4654      	mov	r4, sl
 80049d6:	2000      	movs	r0, #0
 80049d8:	f04f 0c0a 	mov.w	ip, #10
 80049dc:	4621      	mov	r1, r4
 80049de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049e2:	3b30      	subs	r3, #48	; 0x30
 80049e4:	2b09      	cmp	r3, #9
 80049e6:	d94d      	bls.n	8004a84 <_svfiprintf_r+0x17c>
 80049e8:	b1b0      	cbz	r0, 8004a18 <_svfiprintf_r+0x110>
 80049ea:	9207      	str	r2, [sp, #28]
 80049ec:	e014      	b.n	8004a18 <_svfiprintf_r+0x110>
 80049ee:	eba0 0308 	sub.w	r3, r0, r8
 80049f2:	fa09 f303 	lsl.w	r3, r9, r3
 80049f6:	4313      	orrs	r3, r2
 80049f8:	9304      	str	r3, [sp, #16]
 80049fa:	46a2      	mov	sl, r4
 80049fc:	e7d2      	b.n	80049a4 <_svfiprintf_r+0x9c>
 80049fe:	9b03      	ldr	r3, [sp, #12]
 8004a00:	1d19      	adds	r1, r3, #4
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	9103      	str	r1, [sp, #12]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	bfbb      	ittet	lt
 8004a0a:	425b      	neglt	r3, r3
 8004a0c:	f042 0202 	orrlt.w	r2, r2, #2
 8004a10:	9307      	strge	r3, [sp, #28]
 8004a12:	9307      	strlt	r3, [sp, #28]
 8004a14:	bfb8      	it	lt
 8004a16:	9204      	strlt	r2, [sp, #16]
 8004a18:	7823      	ldrb	r3, [r4, #0]
 8004a1a:	2b2e      	cmp	r3, #46	; 0x2e
 8004a1c:	d10c      	bne.n	8004a38 <_svfiprintf_r+0x130>
 8004a1e:	7863      	ldrb	r3, [r4, #1]
 8004a20:	2b2a      	cmp	r3, #42	; 0x2a
 8004a22:	d134      	bne.n	8004a8e <_svfiprintf_r+0x186>
 8004a24:	9b03      	ldr	r3, [sp, #12]
 8004a26:	1d1a      	adds	r2, r3, #4
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	9203      	str	r2, [sp, #12]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	bfb8      	it	lt
 8004a30:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a34:	3402      	adds	r4, #2
 8004a36:	9305      	str	r3, [sp, #20]
 8004a38:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004b00 <_svfiprintf_r+0x1f8>
 8004a3c:	7821      	ldrb	r1, [r4, #0]
 8004a3e:	2203      	movs	r2, #3
 8004a40:	4650      	mov	r0, sl
 8004a42:	f7fb fbcd 	bl	80001e0 <memchr>
 8004a46:	b138      	cbz	r0, 8004a58 <_svfiprintf_r+0x150>
 8004a48:	9b04      	ldr	r3, [sp, #16]
 8004a4a:	eba0 000a 	sub.w	r0, r0, sl
 8004a4e:	2240      	movs	r2, #64	; 0x40
 8004a50:	4082      	lsls	r2, r0
 8004a52:	4313      	orrs	r3, r2
 8004a54:	3401      	adds	r4, #1
 8004a56:	9304      	str	r3, [sp, #16]
 8004a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a5c:	4825      	ldr	r0, [pc, #148]	; (8004af4 <_svfiprintf_r+0x1ec>)
 8004a5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a62:	2206      	movs	r2, #6
 8004a64:	f7fb fbbc 	bl	80001e0 <memchr>
 8004a68:	2800      	cmp	r0, #0
 8004a6a:	d038      	beq.n	8004ade <_svfiprintf_r+0x1d6>
 8004a6c:	4b22      	ldr	r3, [pc, #136]	; (8004af8 <_svfiprintf_r+0x1f0>)
 8004a6e:	bb1b      	cbnz	r3, 8004ab8 <_svfiprintf_r+0x1b0>
 8004a70:	9b03      	ldr	r3, [sp, #12]
 8004a72:	3307      	adds	r3, #7
 8004a74:	f023 0307 	bic.w	r3, r3, #7
 8004a78:	3308      	adds	r3, #8
 8004a7a:	9303      	str	r3, [sp, #12]
 8004a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a7e:	4433      	add	r3, r6
 8004a80:	9309      	str	r3, [sp, #36]	; 0x24
 8004a82:	e768      	b.n	8004956 <_svfiprintf_r+0x4e>
 8004a84:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a88:	460c      	mov	r4, r1
 8004a8a:	2001      	movs	r0, #1
 8004a8c:	e7a6      	b.n	80049dc <_svfiprintf_r+0xd4>
 8004a8e:	2300      	movs	r3, #0
 8004a90:	3401      	adds	r4, #1
 8004a92:	9305      	str	r3, [sp, #20]
 8004a94:	4619      	mov	r1, r3
 8004a96:	f04f 0c0a 	mov.w	ip, #10
 8004a9a:	4620      	mov	r0, r4
 8004a9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004aa0:	3a30      	subs	r2, #48	; 0x30
 8004aa2:	2a09      	cmp	r2, #9
 8004aa4:	d903      	bls.n	8004aae <_svfiprintf_r+0x1a6>
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0c6      	beq.n	8004a38 <_svfiprintf_r+0x130>
 8004aaa:	9105      	str	r1, [sp, #20]
 8004aac:	e7c4      	b.n	8004a38 <_svfiprintf_r+0x130>
 8004aae:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ab2:	4604      	mov	r4, r0
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e7f0      	b.n	8004a9a <_svfiprintf_r+0x192>
 8004ab8:	ab03      	add	r3, sp, #12
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	462a      	mov	r2, r5
 8004abe:	4b0f      	ldr	r3, [pc, #60]	; (8004afc <_svfiprintf_r+0x1f4>)
 8004ac0:	a904      	add	r1, sp, #16
 8004ac2:	4638      	mov	r0, r7
 8004ac4:	f3af 8000 	nop.w
 8004ac8:	1c42      	adds	r2, r0, #1
 8004aca:	4606      	mov	r6, r0
 8004acc:	d1d6      	bne.n	8004a7c <_svfiprintf_r+0x174>
 8004ace:	89ab      	ldrh	r3, [r5, #12]
 8004ad0:	065b      	lsls	r3, r3, #25
 8004ad2:	f53f af2d 	bmi.w	8004930 <_svfiprintf_r+0x28>
 8004ad6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ad8:	b01d      	add	sp, #116	; 0x74
 8004ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ade:	ab03      	add	r3, sp, #12
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	462a      	mov	r2, r5
 8004ae4:	4b05      	ldr	r3, [pc, #20]	; (8004afc <_svfiprintf_r+0x1f4>)
 8004ae6:	a904      	add	r1, sp, #16
 8004ae8:	4638      	mov	r0, r7
 8004aea:	f000 f879 	bl	8004be0 <_printf_i>
 8004aee:	e7eb      	b.n	8004ac8 <_svfiprintf_r+0x1c0>
 8004af0:	08004fb4 	.word	0x08004fb4
 8004af4:	08004fbe 	.word	0x08004fbe
 8004af8:	00000000 	.word	0x00000000
 8004afc:	08004855 	.word	0x08004855
 8004b00:	08004fba 	.word	0x08004fba

08004b04 <_printf_common>:
 8004b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b08:	4616      	mov	r6, r2
 8004b0a:	4699      	mov	r9, r3
 8004b0c:	688a      	ldr	r2, [r1, #8]
 8004b0e:	690b      	ldr	r3, [r1, #16]
 8004b10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b14:	4293      	cmp	r3, r2
 8004b16:	bfb8      	it	lt
 8004b18:	4613      	movlt	r3, r2
 8004b1a:	6033      	str	r3, [r6, #0]
 8004b1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b20:	4607      	mov	r7, r0
 8004b22:	460c      	mov	r4, r1
 8004b24:	b10a      	cbz	r2, 8004b2a <_printf_common+0x26>
 8004b26:	3301      	adds	r3, #1
 8004b28:	6033      	str	r3, [r6, #0]
 8004b2a:	6823      	ldr	r3, [r4, #0]
 8004b2c:	0699      	lsls	r1, r3, #26
 8004b2e:	bf42      	ittt	mi
 8004b30:	6833      	ldrmi	r3, [r6, #0]
 8004b32:	3302      	addmi	r3, #2
 8004b34:	6033      	strmi	r3, [r6, #0]
 8004b36:	6825      	ldr	r5, [r4, #0]
 8004b38:	f015 0506 	ands.w	r5, r5, #6
 8004b3c:	d106      	bne.n	8004b4c <_printf_common+0x48>
 8004b3e:	f104 0a19 	add.w	sl, r4, #25
 8004b42:	68e3      	ldr	r3, [r4, #12]
 8004b44:	6832      	ldr	r2, [r6, #0]
 8004b46:	1a9b      	subs	r3, r3, r2
 8004b48:	42ab      	cmp	r3, r5
 8004b4a:	dc26      	bgt.n	8004b9a <_printf_common+0x96>
 8004b4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b50:	1e13      	subs	r3, r2, #0
 8004b52:	6822      	ldr	r2, [r4, #0]
 8004b54:	bf18      	it	ne
 8004b56:	2301      	movne	r3, #1
 8004b58:	0692      	lsls	r2, r2, #26
 8004b5a:	d42b      	bmi.n	8004bb4 <_printf_common+0xb0>
 8004b5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b60:	4649      	mov	r1, r9
 8004b62:	4638      	mov	r0, r7
 8004b64:	47c0      	blx	r8
 8004b66:	3001      	adds	r0, #1
 8004b68:	d01e      	beq.n	8004ba8 <_printf_common+0xa4>
 8004b6a:	6823      	ldr	r3, [r4, #0]
 8004b6c:	6922      	ldr	r2, [r4, #16]
 8004b6e:	f003 0306 	and.w	r3, r3, #6
 8004b72:	2b04      	cmp	r3, #4
 8004b74:	bf02      	ittt	eq
 8004b76:	68e5      	ldreq	r5, [r4, #12]
 8004b78:	6833      	ldreq	r3, [r6, #0]
 8004b7a:	1aed      	subeq	r5, r5, r3
 8004b7c:	68a3      	ldr	r3, [r4, #8]
 8004b7e:	bf0c      	ite	eq
 8004b80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b84:	2500      	movne	r5, #0
 8004b86:	4293      	cmp	r3, r2
 8004b88:	bfc4      	itt	gt
 8004b8a:	1a9b      	subgt	r3, r3, r2
 8004b8c:	18ed      	addgt	r5, r5, r3
 8004b8e:	2600      	movs	r6, #0
 8004b90:	341a      	adds	r4, #26
 8004b92:	42b5      	cmp	r5, r6
 8004b94:	d11a      	bne.n	8004bcc <_printf_common+0xc8>
 8004b96:	2000      	movs	r0, #0
 8004b98:	e008      	b.n	8004bac <_printf_common+0xa8>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	4652      	mov	r2, sl
 8004b9e:	4649      	mov	r1, r9
 8004ba0:	4638      	mov	r0, r7
 8004ba2:	47c0      	blx	r8
 8004ba4:	3001      	adds	r0, #1
 8004ba6:	d103      	bne.n	8004bb0 <_printf_common+0xac>
 8004ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bb0:	3501      	adds	r5, #1
 8004bb2:	e7c6      	b.n	8004b42 <_printf_common+0x3e>
 8004bb4:	18e1      	adds	r1, r4, r3
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	2030      	movs	r0, #48	; 0x30
 8004bba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bbe:	4422      	add	r2, r4
 8004bc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bc8:	3302      	adds	r3, #2
 8004bca:	e7c7      	b.n	8004b5c <_printf_common+0x58>
 8004bcc:	2301      	movs	r3, #1
 8004bce:	4622      	mov	r2, r4
 8004bd0:	4649      	mov	r1, r9
 8004bd2:	4638      	mov	r0, r7
 8004bd4:	47c0      	blx	r8
 8004bd6:	3001      	adds	r0, #1
 8004bd8:	d0e6      	beq.n	8004ba8 <_printf_common+0xa4>
 8004bda:	3601      	adds	r6, #1
 8004bdc:	e7d9      	b.n	8004b92 <_printf_common+0x8e>
	...

08004be0 <_printf_i>:
 8004be0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004be4:	7e0f      	ldrb	r7, [r1, #24]
 8004be6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004be8:	2f78      	cmp	r7, #120	; 0x78
 8004bea:	4691      	mov	r9, r2
 8004bec:	4680      	mov	r8, r0
 8004bee:	460c      	mov	r4, r1
 8004bf0:	469a      	mov	sl, r3
 8004bf2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004bf6:	d807      	bhi.n	8004c08 <_printf_i+0x28>
 8004bf8:	2f62      	cmp	r7, #98	; 0x62
 8004bfa:	d80a      	bhi.n	8004c12 <_printf_i+0x32>
 8004bfc:	2f00      	cmp	r7, #0
 8004bfe:	f000 80d4 	beq.w	8004daa <_printf_i+0x1ca>
 8004c02:	2f58      	cmp	r7, #88	; 0x58
 8004c04:	f000 80c0 	beq.w	8004d88 <_printf_i+0x1a8>
 8004c08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c10:	e03a      	b.n	8004c88 <_printf_i+0xa8>
 8004c12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c16:	2b15      	cmp	r3, #21
 8004c18:	d8f6      	bhi.n	8004c08 <_printf_i+0x28>
 8004c1a:	a101      	add	r1, pc, #4	; (adr r1, 8004c20 <_printf_i+0x40>)
 8004c1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c20:	08004c79 	.word	0x08004c79
 8004c24:	08004c8d 	.word	0x08004c8d
 8004c28:	08004c09 	.word	0x08004c09
 8004c2c:	08004c09 	.word	0x08004c09
 8004c30:	08004c09 	.word	0x08004c09
 8004c34:	08004c09 	.word	0x08004c09
 8004c38:	08004c8d 	.word	0x08004c8d
 8004c3c:	08004c09 	.word	0x08004c09
 8004c40:	08004c09 	.word	0x08004c09
 8004c44:	08004c09 	.word	0x08004c09
 8004c48:	08004c09 	.word	0x08004c09
 8004c4c:	08004d91 	.word	0x08004d91
 8004c50:	08004cb9 	.word	0x08004cb9
 8004c54:	08004d4b 	.word	0x08004d4b
 8004c58:	08004c09 	.word	0x08004c09
 8004c5c:	08004c09 	.word	0x08004c09
 8004c60:	08004db3 	.word	0x08004db3
 8004c64:	08004c09 	.word	0x08004c09
 8004c68:	08004cb9 	.word	0x08004cb9
 8004c6c:	08004c09 	.word	0x08004c09
 8004c70:	08004c09 	.word	0x08004c09
 8004c74:	08004d53 	.word	0x08004d53
 8004c78:	682b      	ldr	r3, [r5, #0]
 8004c7a:	1d1a      	adds	r2, r3, #4
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	602a      	str	r2, [r5, #0]
 8004c80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e09f      	b.n	8004dcc <_printf_i+0x1ec>
 8004c8c:	6820      	ldr	r0, [r4, #0]
 8004c8e:	682b      	ldr	r3, [r5, #0]
 8004c90:	0607      	lsls	r7, r0, #24
 8004c92:	f103 0104 	add.w	r1, r3, #4
 8004c96:	6029      	str	r1, [r5, #0]
 8004c98:	d501      	bpl.n	8004c9e <_printf_i+0xbe>
 8004c9a:	681e      	ldr	r6, [r3, #0]
 8004c9c:	e003      	b.n	8004ca6 <_printf_i+0xc6>
 8004c9e:	0646      	lsls	r6, r0, #25
 8004ca0:	d5fb      	bpl.n	8004c9a <_printf_i+0xba>
 8004ca2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004ca6:	2e00      	cmp	r6, #0
 8004ca8:	da03      	bge.n	8004cb2 <_printf_i+0xd2>
 8004caa:	232d      	movs	r3, #45	; 0x2d
 8004cac:	4276      	negs	r6, r6
 8004cae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cb2:	485a      	ldr	r0, [pc, #360]	; (8004e1c <_printf_i+0x23c>)
 8004cb4:	230a      	movs	r3, #10
 8004cb6:	e012      	b.n	8004cde <_printf_i+0xfe>
 8004cb8:	682b      	ldr	r3, [r5, #0]
 8004cba:	6820      	ldr	r0, [r4, #0]
 8004cbc:	1d19      	adds	r1, r3, #4
 8004cbe:	6029      	str	r1, [r5, #0]
 8004cc0:	0605      	lsls	r5, r0, #24
 8004cc2:	d501      	bpl.n	8004cc8 <_printf_i+0xe8>
 8004cc4:	681e      	ldr	r6, [r3, #0]
 8004cc6:	e002      	b.n	8004cce <_printf_i+0xee>
 8004cc8:	0641      	lsls	r1, r0, #25
 8004cca:	d5fb      	bpl.n	8004cc4 <_printf_i+0xe4>
 8004ccc:	881e      	ldrh	r6, [r3, #0]
 8004cce:	4853      	ldr	r0, [pc, #332]	; (8004e1c <_printf_i+0x23c>)
 8004cd0:	2f6f      	cmp	r7, #111	; 0x6f
 8004cd2:	bf0c      	ite	eq
 8004cd4:	2308      	moveq	r3, #8
 8004cd6:	230a      	movne	r3, #10
 8004cd8:	2100      	movs	r1, #0
 8004cda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cde:	6865      	ldr	r5, [r4, #4]
 8004ce0:	60a5      	str	r5, [r4, #8]
 8004ce2:	2d00      	cmp	r5, #0
 8004ce4:	bfa2      	ittt	ge
 8004ce6:	6821      	ldrge	r1, [r4, #0]
 8004ce8:	f021 0104 	bicge.w	r1, r1, #4
 8004cec:	6021      	strge	r1, [r4, #0]
 8004cee:	b90e      	cbnz	r6, 8004cf4 <_printf_i+0x114>
 8004cf0:	2d00      	cmp	r5, #0
 8004cf2:	d04b      	beq.n	8004d8c <_printf_i+0x1ac>
 8004cf4:	4615      	mov	r5, r2
 8004cf6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004cfa:	fb03 6711 	mls	r7, r3, r1, r6
 8004cfe:	5dc7      	ldrb	r7, [r0, r7]
 8004d00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d04:	4637      	mov	r7, r6
 8004d06:	42bb      	cmp	r3, r7
 8004d08:	460e      	mov	r6, r1
 8004d0a:	d9f4      	bls.n	8004cf6 <_printf_i+0x116>
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	d10b      	bne.n	8004d28 <_printf_i+0x148>
 8004d10:	6823      	ldr	r3, [r4, #0]
 8004d12:	07de      	lsls	r6, r3, #31
 8004d14:	d508      	bpl.n	8004d28 <_printf_i+0x148>
 8004d16:	6923      	ldr	r3, [r4, #16]
 8004d18:	6861      	ldr	r1, [r4, #4]
 8004d1a:	4299      	cmp	r1, r3
 8004d1c:	bfde      	ittt	le
 8004d1e:	2330      	movle	r3, #48	; 0x30
 8004d20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d28:	1b52      	subs	r2, r2, r5
 8004d2a:	6122      	str	r2, [r4, #16]
 8004d2c:	f8cd a000 	str.w	sl, [sp]
 8004d30:	464b      	mov	r3, r9
 8004d32:	aa03      	add	r2, sp, #12
 8004d34:	4621      	mov	r1, r4
 8004d36:	4640      	mov	r0, r8
 8004d38:	f7ff fee4 	bl	8004b04 <_printf_common>
 8004d3c:	3001      	adds	r0, #1
 8004d3e:	d14a      	bne.n	8004dd6 <_printf_i+0x1f6>
 8004d40:	f04f 30ff 	mov.w	r0, #4294967295
 8004d44:	b004      	add	sp, #16
 8004d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d4a:	6823      	ldr	r3, [r4, #0]
 8004d4c:	f043 0320 	orr.w	r3, r3, #32
 8004d50:	6023      	str	r3, [r4, #0]
 8004d52:	4833      	ldr	r0, [pc, #204]	; (8004e20 <_printf_i+0x240>)
 8004d54:	2778      	movs	r7, #120	; 0x78
 8004d56:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	6829      	ldr	r1, [r5, #0]
 8004d5e:	061f      	lsls	r7, r3, #24
 8004d60:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d64:	d402      	bmi.n	8004d6c <_printf_i+0x18c>
 8004d66:	065f      	lsls	r7, r3, #25
 8004d68:	bf48      	it	mi
 8004d6a:	b2b6      	uxthmi	r6, r6
 8004d6c:	07df      	lsls	r7, r3, #31
 8004d6e:	bf48      	it	mi
 8004d70:	f043 0320 	orrmi.w	r3, r3, #32
 8004d74:	6029      	str	r1, [r5, #0]
 8004d76:	bf48      	it	mi
 8004d78:	6023      	strmi	r3, [r4, #0]
 8004d7a:	b91e      	cbnz	r6, 8004d84 <_printf_i+0x1a4>
 8004d7c:	6823      	ldr	r3, [r4, #0]
 8004d7e:	f023 0320 	bic.w	r3, r3, #32
 8004d82:	6023      	str	r3, [r4, #0]
 8004d84:	2310      	movs	r3, #16
 8004d86:	e7a7      	b.n	8004cd8 <_printf_i+0xf8>
 8004d88:	4824      	ldr	r0, [pc, #144]	; (8004e1c <_printf_i+0x23c>)
 8004d8a:	e7e4      	b.n	8004d56 <_printf_i+0x176>
 8004d8c:	4615      	mov	r5, r2
 8004d8e:	e7bd      	b.n	8004d0c <_printf_i+0x12c>
 8004d90:	682b      	ldr	r3, [r5, #0]
 8004d92:	6826      	ldr	r6, [r4, #0]
 8004d94:	6961      	ldr	r1, [r4, #20]
 8004d96:	1d18      	adds	r0, r3, #4
 8004d98:	6028      	str	r0, [r5, #0]
 8004d9a:	0635      	lsls	r5, r6, #24
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	d501      	bpl.n	8004da4 <_printf_i+0x1c4>
 8004da0:	6019      	str	r1, [r3, #0]
 8004da2:	e002      	b.n	8004daa <_printf_i+0x1ca>
 8004da4:	0670      	lsls	r0, r6, #25
 8004da6:	d5fb      	bpl.n	8004da0 <_printf_i+0x1c0>
 8004da8:	8019      	strh	r1, [r3, #0]
 8004daa:	2300      	movs	r3, #0
 8004dac:	6123      	str	r3, [r4, #16]
 8004dae:	4615      	mov	r5, r2
 8004db0:	e7bc      	b.n	8004d2c <_printf_i+0x14c>
 8004db2:	682b      	ldr	r3, [r5, #0]
 8004db4:	1d1a      	adds	r2, r3, #4
 8004db6:	602a      	str	r2, [r5, #0]
 8004db8:	681d      	ldr	r5, [r3, #0]
 8004dba:	6862      	ldr	r2, [r4, #4]
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	f7fb fa0e 	bl	80001e0 <memchr>
 8004dc4:	b108      	cbz	r0, 8004dca <_printf_i+0x1ea>
 8004dc6:	1b40      	subs	r0, r0, r5
 8004dc8:	6060      	str	r0, [r4, #4]
 8004dca:	6863      	ldr	r3, [r4, #4]
 8004dcc:	6123      	str	r3, [r4, #16]
 8004dce:	2300      	movs	r3, #0
 8004dd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dd4:	e7aa      	b.n	8004d2c <_printf_i+0x14c>
 8004dd6:	6923      	ldr	r3, [r4, #16]
 8004dd8:	462a      	mov	r2, r5
 8004dda:	4649      	mov	r1, r9
 8004ddc:	4640      	mov	r0, r8
 8004dde:	47d0      	blx	sl
 8004de0:	3001      	adds	r0, #1
 8004de2:	d0ad      	beq.n	8004d40 <_printf_i+0x160>
 8004de4:	6823      	ldr	r3, [r4, #0]
 8004de6:	079b      	lsls	r3, r3, #30
 8004de8:	d413      	bmi.n	8004e12 <_printf_i+0x232>
 8004dea:	68e0      	ldr	r0, [r4, #12]
 8004dec:	9b03      	ldr	r3, [sp, #12]
 8004dee:	4298      	cmp	r0, r3
 8004df0:	bfb8      	it	lt
 8004df2:	4618      	movlt	r0, r3
 8004df4:	e7a6      	b.n	8004d44 <_printf_i+0x164>
 8004df6:	2301      	movs	r3, #1
 8004df8:	4632      	mov	r2, r6
 8004dfa:	4649      	mov	r1, r9
 8004dfc:	4640      	mov	r0, r8
 8004dfe:	47d0      	blx	sl
 8004e00:	3001      	adds	r0, #1
 8004e02:	d09d      	beq.n	8004d40 <_printf_i+0x160>
 8004e04:	3501      	adds	r5, #1
 8004e06:	68e3      	ldr	r3, [r4, #12]
 8004e08:	9903      	ldr	r1, [sp, #12]
 8004e0a:	1a5b      	subs	r3, r3, r1
 8004e0c:	42ab      	cmp	r3, r5
 8004e0e:	dcf2      	bgt.n	8004df6 <_printf_i+0x216>
 8004e10:	e7eb      	b.n	8004dea <_printf_i+0x20a>
 8004e12:	2500      	movs	r5, #0
 8004e14:	f104 0619 	add.w	r6, r4, #25
 8004e18:	e7f5      	b.n	8004e06 <_printf_i+0x226>
 8004e1a:	bf00      	nop
 8004e1c:	08004fc5 	.word	0x08004fc5
 8004e20:	08004fd6 	.word	0x08004fd6

08004e24 <memmove>:
 8004e24:	4288      	cmp	r0, r1
 8004e26:	b510      	push	{r4, lr}
 8004e28:	eb01 0402 	add.w	r4, r1, r2
 8004e2c:	d902      	bls.n	8004e34 <memmove+0x10>
 8004e2e:	4284      	cmp	r4, r0
 8004e30:	4623      	mov	r3, r4
 8004e32:	d807      	bhi.n	8004e44 <memmove+0x20>
 8004e34:	1e43      	subs	r3, r0, #1
 8004e36:	42a1      	cmp	r1, r4
 8004e38:	d008      	beq.n	8004e4c <memmove+0x28>
 8004e3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e42:	e7f8      	b.n	8004e36 <memmove+0x12>
 8004e44:	4402      	add	r2, r0
 8004e46:	4601      	mov	r1, r0
 8004e48:	428a      	cmp	r2, r1
 8004e4a:	d100      	bne.n	8004e4e <memmove+0x2a>
 8004e4c:	bd10      	pop	{r4, pc}
 8004e4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e56:	e7f7      	b.n	8004e48 <memmove+0x24>

08004e58 <_sbrk_r>:
 8004e58:	b538      	push	{r3, r4, r5, lr}
 8004e5a:	4d06      	ldr	r5, [pc, #24]	; (8004e74 <_sbrk_r+0x1c>)
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	4604      	mov	r4, r0
 8004e60:	4608      	mov	r0, r1
 8004e62:	602b      	str	r3, [r5, #0]
 8004e64:	f7fc fd4e 	bl	8001904 <_sbrk>
 8004e68:	1c43      	adds	r3, r0, #1
 8004e6a:	d102      	bne.n	8004e72 <_sbrk_r+0x1a>
 8004e6c:	682b      	ldr	r3, [r5, #0]
 8004e6e:	b103      	cbz	r3, 8004e72 <_sbrk_r+0x1a>
 8004e70:	6023      	str	r3, [r4, #0]
 8004e72:	bd38      	pop	{r3, r4, r5, pc}
 8004e74:	200002b0 	.word	0x200002b0

08004e78 <memcpy>:
 8004e78:	440a      	add	r2, r1
 8004e7a:	4291      	cmp	r1, r2
 8004e7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e80:	d100      	bne.n	8004e84 <memcpy+0xc>
 8004e82:	4770      	bx	lr
 8004e84:	b510      	push	{r4, lr}
 8004e86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e8e:	4291      	cmp	r1, r2
 8004e90:	d1f9      	bne.n	8004e86 <memcpy+0xe>
 8004e92:	bd10      	pop	{r4, pc}

08004e94 <_realloc_r>:
 8004e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e98:	4680      	mov	r8, r0
 8004e9a:	4614      	mov	r4, r2
 8004e9c:	460e      	mov	r6, r1
 8004e9e:	b921      	cbnz	r1, 8004eaa <_realloc_r+0x16>
 8004ea0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ea4:	4611      	mov	r1, r2
 8004ea6:	f7ff bc49 	b.w	800473c <_malloc_r>
 8004eaa:	b92a      	cbnz	r2, 8004eb8 <_realloc_r+0x24>
 8004eac:	f7ff fbda 	bl	8004664 <_free_r>
 8004eb0:	4625      	mov	r5, r4
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eb8:	f000 f81b 	bl	8004ef2 <_malloc_usable_size_r>
 8004ebc:	4284      	cmp	r4, r0
 8004ebe:	4607      	mov	r7, r0
 8004ec0:	d802      	bhi.n	8004ec8 <_realloc_r+0x34>
 8004ec2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004ec6:	d812      	bhi.n	8004eee <_realloc_r+0x5a>
 8004ec8:	4621      	mov	r1, r4
 8004eca:	4640      	mov	r0, r8
 8004ecc:	f7ff fc36 	bl	800473c <_malloc_r>
 8004ed0:	4605      	mov	r5, r0
 8004ed2:	2800      	cmp	r0, #0
 8004ed4:	d0ed      	beq.n	8004eb2 <_realloc_r+0x1e>
 8004ed6:	42bc      	cmp	r4, r7
 8004ed8:	4622      	mov	r2, r4
 8004eda:	4631      	mov	r1, r6
 8004edc:	bf28      	it	cs
 8004ede:	463a      	movcs	r2, r7
 8004ee0:	f7ff ffca 	bl	8004e78 <memcpy>
 8004ee4:	4631      	mov	r1, r6
 8004ee6:	4640      	mov	r0, r8
 8004ee8:	f7ff fbbc 	bl	8004664 <_free_r>
 8004eec:	e7e1      	b.n	8004eb2 <_realloc_r+0x1e>
 8004eee:	4635      	mov	r5, r6
 8004ef0:	e7df      	b.n	8004eb2 <_realloc_r+0x1e>

08004ef2 <_malloc_usable_size_r>:
 8004ef2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ef6:	1f18      	subs	r0, r3, #4
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	bfbc      	itt	lt
 8004efc:	580b      	ldrlt	r3, [r1, r0]
 8004efe:	18c0      	addlt	r0, r0, r3
 8004f00:	4770      	bx	lr
	...

08004f04 <_init>:
 8004f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f06:	bf00      	nop
 8004f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f0a:	bc08      	pop	{r3}
 8004f0c:	469e      	mov	lr, r3
 8004f0e:	4770      	bx	lr

08004f10 <_fini>:
 8004f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f12:	bf00      	nop
 8004f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f16:	bc08      	pop	{r3}
 8004f18:	469e      	mov	lr, r3
 8004f1a:	4770      	bx	lr
