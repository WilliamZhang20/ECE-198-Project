
ECE_198_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000347c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800361c  0800361c  0001361c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003694  08003694  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08003694  08003694  00013694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800369c  0800369c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800369c  0800369c  0001369c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036a0  080036a0  000136a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080036a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000006c  08003710  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08003710  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a8eb  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000196c  00000000  00000000  0002a9ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009f0  00000000  00000000  0002c338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007c0  00000000  00000000  0002cd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015d12  00000000  00000000  0002d4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c7ae  00000000  00000000  000431fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000876a2  00000000  00000000  0004f9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002dc4  00000000  00000000  000d704c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000d9e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003604 	.word	0x08003604

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08003604 	.word	0x08003604

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000586:	4a38      	ldr	r2, [pc, #224]	; (8000668 <HD44780_Init+0xec>)
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 800058c:	4b37      	ldr	r3, [pc, #220]	; (800066c <HD44780_Init+0xf0>)
 800058e:	2208      	movs	r2, #8
 8000590:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000592:	4b37      	ldr	r3, [pc, #220]	; (8000670 <HD44780_Init+0xf4>)
 8000594:	2200      	movs	r2, #0
 8000596:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000598:	4b33      	ldr	r3, [pc, #204]	; (8000668 <HD44780_Init+0xec>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d907      	bls.n	80005b0 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80005a0:	4b33      	ldr	r3, [pc, #204]	; (8000670 <HD44780_Init+0xf4>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	f043 0308 	orr.w	r3, r3, #8
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	4b31      	ldr	r3, [pc, #196]	; (8000670 <HD44780_Init+0xf4>)
 80005ac:	701a      	strb	r2, [r3, #0]
 80005ae:	e006      	b.n	80005be <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80005b0:	4b2f      	ldr	r3, [pc, #188]	; (8000670 <HD44780_Init+0xf4>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	4b2d      	ldr	r3, [pc, #180]	; (8000670 <HD44780_Init+0xf4>)
 80005bc:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80005be:	f000 f985 	bl	80008cc <DelayInit>
  HAL_Delay(50);
 80005c2:	2032      	movs	r0, #50	; 0x32
 80005c4:	f000 fd2c 	bl	8001020 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80005c8:	4b28      	ldr	r3, [pc, #160]	; (800066c <HD44780_Init+0xf0>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 f943 	bl	8000858 <ExpanderWrite>
  HAL_Delay(1000);
 80005d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d6:	f000 fd23 	bl	8001020 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80005da:	2030      	movs	r0, #48	; 0x30
 80005dc:	f000 f92b 	bl	8000836 <Write4Bits>
  DelayUS(4500);
 80005e0:	f241 1094 	movw	r0, #4500	; 0x1194
 80005e4:	f000 f99c 	bl	8000920 <DelayUS>

  Write4Bits(0x03 << 4);
 80005e8:	2030      	movs	r0, #48	; 0x30
 80005ea:	f000 f924 	bl	8000836 <Write4Bits>
  DelayUS(4500);
 80005ee:	f241 1094 	movw	r0, #4500	; 0x1194
 80005f2:	f000 f995 	bl	8000920 <DelayUS>

  Write4Bits(0x03 << 4);
 80005f6:	2030      	movs	r0, #48	; 0x30
 80005f8:	f000 f91d 	bl	8000836 <Write4Bits>
  DelayUS(4500);
 80005fc:	f241 1094 	movw	r0, #4500	; 0x1194
 8000600:	f000 f98e 	bl	8000920 <DelayUS>

  Write4Bits(0x02 << 4);
 8000604:	2020      	movs	r0, #32
 8000606:	f000 f916 	bl	8000836 <Write4Bits>
  DelayUS(100);
 800060a:	2064      	movs	r0, #100	; 0x64
 800060c:	f000 f988 	bl	8000920 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000610:	4b17      	ldr	r3, [pc, #92]	; (8000670 <HD44780_Init+0xf4>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	f043 0320 	orr.w	r3, r3, #32
 8000618:	b2db      	uxtb	r3, r3
 800061a:	4618      	mov	r0, r3
 800061c:	f000 f8ce 	bl	80007bc <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000620:	4b14      	ldr	r3, [pc, #80]	; (8000674 <HD44780_Init+0xf8>)
 8000622:	2204      	movs	r2, #4
 8000624:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000626:	f000 f875 	bl	8000714 <HD44780_Display>
  HD44780_Clear();
 800062a:	f000 f82b 	bl	8000684 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800062e:	4b12      	ldr	r3, [pc, #72]	; (8000678 <HD44780_Init+0xfc>)
 8000630:	2202      	movs	r2, #2
 8000632:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000634:	4b10      	ldr	r3, [pc, #64]	; (8000678 <HD44780_Init+0xfc>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	f043 0304 	orr.w	r3, r3, #4
 800063c:	b2db      	uxtb	r3, r3
 800063e:	4618      	mov	r0, r3
 8000640:	f000 f8bc 	bl	80007bc <SendCommand>
  DelayUS(4500);
 8000644:	f241 1094 	movw	r0, #4500	; 0x1194
 8000648:	f000 f96a 	bl	8000920 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 800064c:	490b      	ldr	r1, [pc, #44]	; (800067c <HD44780_Init+0x100>)
 800064e:	2000      	movs	r0, #0
 8000650:	f000 f876 	bl	8000740 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000654:	490a      	ldr	r1, [pc, #40]	; (8000680 <HD44780_Init+0x104>)
 8000656:	2001      	movs	r0, #1
 8000658:	f000 f872 	bl	8000740 <HD44780_CreateSpecialChar>

  HD44780_Home();
 800065c:	f000 f81d 	bl	800069a <HD44780_Home>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	2000008b 	.word	0x2000008b
 800066c:	2000008c 	.word	0x2000008c
 8000670:	20000088 	.word	0x20000088
 8000674:	20000089 	.word	0x20000089
 8000678:	2000008a 	.word	0x2000008a
 800067c:	20000000 	.word	0x20000000
 8000680:	20000008 	.word	0x20000008

08000684 <HD44780_Clear>:

void HD44780_Clear()
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000688:	2001      	movs	r0, #1
 800068a:	f000 f897 	bl	80007bc <SendCommand>
  DelayUS(2000);
 800068e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000692:	f000 f945 	bl	8000920 <DelayUS>
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}

0800069a <HD44780_Home>:

void HD44780_Home()
{
 800069a:	b580      	push	{r7, lr}
 800069c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800069e:	2002      	movs	r0, #2
 80006a0:	f000 f88c 	bl	80007bc <SendCommand>
  DelayUS(2000);
 80006a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006a8:	f000 f93a 	bl	8000920 <DelayUS>
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b087      	sub	sp, #28
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	460a      	mov	r2, r1
 80006ba:	71fb      	strb	r3, [r7, #7]
 80006bc:	4613      	mov	r3, r2
 80006be:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <HD44780_SetCursor+0x5c>)
 80006c2:	f107 0408 	add.w	r4, r7, #8
 80006c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80006cc:	4b10      	ldr	r3, [pc, #64]	; (8000710 <HD44780_SetCursor+0x60>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	79ba      	ldrb	r2, [r7, #6]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d303      	bcc.n	80006de <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <HD44780_SetCursor+0x60>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	3b01      	subs	r3, #1
 80006dc:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80006de:	79bb      	ldrb	r3, [r7, #6]
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	3318      	adds	r3, #24
 80006e4:	443b      	add	r3, r7
 80006e6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	4413      	add	r3, r2
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	b25b      	sxtb	r3, r3
 80006f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006f8:	b25b      	sxtb	r3, r3
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 f85d 	bl	80007bc <SendCommand>
}
 8000702:	bf00      	nop
 8000704:	371c      	adds	r7, #28
 8000706:	46bd      	mov	sp, r7
 8000708:	bd90      	pop	{r4, r7, pc}
 800070a:	bf00      	nop
 800070c:	0800361c 	.word	0x0800361c
 8000710:	2000008b 	.word	0x2000008b

08000714 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <HD44780_Display+0x28>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <HD44780_Display+0x28>)
 8000724:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000726:	4b05      	ldr	r3, [pc, #20]	; (800073c <HD44780_Display+0x28>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	f043 0308 	orr.w	r3, r3, #8
 800072e:	b2db      	uxtb	r3, r3
 8000730:	4618      	mov	r0, r3
 8000732:	f000 f843 	bl	80007bc <SendCommand>
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000089 	.word	0x20000089

08000740 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	6039      	str	r1, [r7, #0]
 800074a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	f003 0307 	and.w	r3, r3, #7
 8000752:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	00db      	lsls	r3, r3, #3
 8000758:	b25b      	sxtb	r3, r3
 800075a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800075e:	b25b      	sxtb	r3, r3
 8000760:	b2db      	uxtb	r3, r3
 8000762:	4618      	mov	r0, r3
 8000764:	f000 f82a 	bl	80007bc <SendCommand>
  for (int i=0; i<8; i++)
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	e009      	b.n	8000782 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	683a      	ldr	r2, [r7, #0]
 8000772:	4413      	add	r3, r2
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	4618      	mov	r0, r3
 8000778:	f000 f82e 	bl	80007d8 <SendChar>
  for (int i=0; i<8; i++)
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	3301      	adds	r3, #1
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	2b07      	cmp	r3, #7
 8000786:	ddf2      	ble.n	800076e <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000788:	bf00      	nop
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b082      	sub	sp, #8
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800079a:	e006      	b.n	80007aa <HD44780_PrintStr+0x18>
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	1c5a      	adds	r2, r3, #1
 80007a0:	607a      	str	r2, [r7, #4]
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 f817 	bl	80007d8 <SendChar>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d1f4      	bne.n	800079c <HD44780_PrintStr+0xa>
}
 80007b2:	bf00      	nop
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 f812 	bl	80007f4 <Send>
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <SendChar>:

static void SendChar(uint8_t ch)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	2101      	movs	r1, #1
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f804 	bl	80007f4 <Send>
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	460a      	mov	r2, r1
 80007fe:	71fb      	strb	r3, [r7, #7]
 8000800:	4613      	mov	r3, r2
 8000802:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	f023 030f 	bic.w	r3, r3, #15
 800080a:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	011b      	lsls	r3, r3, #4
 8000810:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000812:	7bfa      	ldrb	r2, [r7, #15]
 8000814:	79bb      	ldrb	r3, [r7, #6]
 8000816:	4313      	orrs	r3, r2
 8000818:	b2db      	uxtb	r3, r3
 800081a:	4618      	mov	r0, r3
 800081c:	f000 f80b 	bl	8000836 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000820:	7bba      	ldrb	r2, [r7, #14]
 8000822:	79bb      	ldrb	r3, [r7, #6]
 8000824:	4313      	orrs	r3, r2
 8000826:	b2db      	uxtb	r3, r3
 8000828:	4618      	mov	r0, r3
 800082a:	f000 f804 	bl	8000836 <Write4Bits>
}
 800082e:	bf00      	nop
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
 800083c:	4603      	mov	r3, r0
 800083e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	4618      	mov	r0, r3
 8000844:	f000 f808 	bl	8000858 <ExpanderWrite>
  PulseEnable(value);
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	4618      	mov	r0, r3
 800084c:	f000 f820 	bl	8000890 <PulseEnable>
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af02      	add	r7, sp, #8
 800085e:	4603      	mov	r3, r0
 8000860:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <ExpanderWrite+0x30>)
 8000864:	781a      	ldrb	r2, [r3, #0]
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	4313      	orrs	r3, r2
 800086a:	b2db      	uxtb	r3, r3
 800086c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800086e:	f107 020f 	add.w	r2, r7, #15
 8000872:	230a      	movs	r3, #10
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2301      	movs	r3, #1
 8000878:	214e      	movs	r1, #78	; 0x4e
 800087a:	4804      	ldr	r0, [pc, #16]	; (800088c <ExpanderWrite+0x34>)
 800087c:	f000 ffbc 	bl	80017f8 <HAL_I2C_Master_Transmit>
}
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	2000008c 	.word	0x2000008c
 800088c:	20000090 	.word	0x20000090

08000890 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	f043 0304 	orr.w	r3, r3, #4
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff ffd8 	bl	8000858 <ExpanderWrite>
  DelayUS(20);
 80008a8:	2014      	movs	r0, #20
 80008aa:	f000 f839 	bl	8000920 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	f023 0304 	bic.w	r3, r3, #4
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff ffce 	bl	8000858 <ExpanderWrite>
  DelayUS(20);
 80008bc:	2014      	movs	r0, #20
 80008be:	f000 f82f 	bl	8000920 <DelayUS>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <DelayInit>:

static void DelayInit(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <DelayInit+0x4c>)
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	4a10      	ldr	r2, [pc, #64]	; (8000918 <DelayInit+0x4c>)
 80008d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80008da:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80008dc:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <DelayInit+0x4c>)
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	4a0d      	ldr	r2, [pc, #52]	; (8000918 <DelayInit+0x4c>)
 80008e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008e6:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <DelayInit+0x50>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a0b      	ldr	r2, [pc, #44]	; (800091c <DelayInit+0x50>)
 80008ee:	f023 0301 	bic.w	r3, r3, #1
 80008f2:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <DelayInit+0x50>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a08      	ldr	r2, [pc, #32]	; (800091c <DelayInit+0x50>)
 80008fa:	f043 0301 	orr.w	r3, r3, #1
 80008fe:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <DelayInit+0x50>)
 8000902:	2200      	movs	r2, #0
 8000904:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000906:	bf00      	nop
  __ASM volatile ("NOP");
 8000908:	bf00      	nop
  __ASM volatile ("NOP");
 800090a:	bf00      	nop
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	e000edf0 	.word	0xe000edf0
 800091c:	e0001000 	.word	0xe0001000

08000920 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000920:	b480      	push	{r7}
 8000922:	b087      	sub	sp, #28
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000928:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <DelayUS+0x44>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <DelayUS+0x48>)
 800092e:	fba2 2303 	umull	r2, r3, r2, r3
 8000932:	0c9a      	lsrs	r2, r3, #18
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	fb02 f303 	mul.w	r3, r2, r3
 800093a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 800093c:	4b0b      	ldr	r3, [pc, #44]	; (800096c <DelayUS+0x4c>)
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000942:	4b0a      	ldr	r3, [pc, #40]	; (800096c <DelayUS+0x4c>)
 8000944:	685a      	ldr	r2, [r3, #4]
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	697a      	ldr	r2, [r7, #20]
 8000950:	429a      	cmp	r2, r3
 8000952:	d8f6      	bhi.n	8000942 <DelayUS+0x22>
}
 8000954:	bf00      	nop
 8000956:	bf00      	nop
 8000958:	371c      	adds	r7, #28
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	20000010 	.word	0x20000010
 8000968:	431bde83 	.word	0x431bde83
 800096c:	e0001000 	.word	0xe0001000

08000970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000976:	f000 fae1 	bl	8000f3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097a:	f000 f845 	bl	8000a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097e:	f000 f905 	bl	8000b8c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000982:	f000 f8d9 	bl	8000b38 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000986:	f000 f8a9 	bl	8000adc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 800098a:	2002      	movs	r0, #2
 800098c:	f7ff fdf6 	bl	800057c <HD44780_Init>
  HD44780_Clear();
 8000990:	f7ff fe78 	bl	8000684 <HD44780_Clear>
  HD44780_SetCursor(0,0);
 8000994:	2100      	movs	r1, #0
 8000996:	2000      	movs	r0, #0
 8000998:	f7ff fe8a 	bl	80006b0 <HD44780_SetCursor>
  HD44780_PrintStr("HI");
 800099c:	4817      	ldr	r0, [pc, #92]	; (80009fc <main+0x8c>)
 800099e:	f7ff fef8 	bl	8000792 <HD44780_PrintStr>
  HAL_Delay(2000);
 80009a2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009a6:	f000 fb3b 	bl	8001020 <HAL_Delay>
  HD44780_Clear();
 80009aa:	f7ff fe6b 	bl	8000684 <HD44780_Clear>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int i = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
  while (1)
  {
	  HD44780_Clear();
 80009b2:	f7ff fe67 	bl	8000684 <HD44780_Clear>
	  HD44780_SetCursor(0,0);
 80009b6:	2100      	movs	r1, #0
 80009b8:	2000      	movs	r0, #0
 80009ba:	f7ff fe79 	bl	80006b0 <HD44780_SetCursor>
	  char tempString[10];
	  sprintf(tempString, "%hu", i);
 80009be:	463b      	mov	r3, r7
 80009c0:	68fa      	ldr	r2, [r7, #12]
 80009c2:	490f      	ldr	r1, [pc, #60]	; (8000a00 <main+0x90>)
 80009c4:	4618      	mov	r0, r3
 80009c6:	f002 f979 	bl	8002cbc <siprintf>
	  HD44780_PrintStr("Lets Count 0-10!");
 80009ca:	480e      	ldr	r0, [pc, #56]	; (8000a04 <main+0x94>)
 80009cc:	f7ff fee1 	bl	8000792 <HD44780_PrintStr>
	  HD44780_SetCursor(0,1);
 80009d0:	2101      	movs	r1, #1
 80009d2:	2000      	movs	r0, #0
 80009d4:	f7ff fe6c 	bl	80006b0 <HD44780_SetCursor>
	  HD44780_PrintStr(tempString);
 80009d8:	463b      	mov	r3, r7
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff fed9 	bl	8000792 <HD44780_PrintStr>
	  HAL_Delay(2000);
 80009e0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009e4:	f000 fb1c 	bl	8001020 <HAL_Delay>
	  if(i==10) {
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	2b0a      	cmp	r3, #10
 80009ec:	d101      	bne.n	80009f2 <main+0x82>
		  i = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
	  }
	  i++;
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	3301      	adds	r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
  {
 80009f8:	e7db      	b.n	80009b2 <main+0x42>
 80009fa:	bf00      	nop
 80009fc:	0800362c 	.word	0x0800362c
 8000a00:	08003630 	.word	0x08003630
 8000a04:	08003634 	.word	0x08003634

08000a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b094      	sub	sp, #80	; 0x50
 8000a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0e:	f107 0320 	add.w	r3, r7, #32
 8000a12:	2230      	movs	r2, #48	; 0x30
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f002 f970 	bl	8002cfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	4b28      	ldr	r3, [pc, #160]	; (8000ad4 <SystemClock_Config+0xcc>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a34:	4a27      	ldr	r2, [pc, #156]	; (8000ad4 <SystemClock_Config+0xcc>)
 8000a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3c:	4b25      	ldr	r3, [pc, #148]	; (8000ad4 <SystemClock_Config+0xcc>)
 8000a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a48:	2300      	movs	r3, #0
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	4b22      	ldr	r3, [pc, #136]	; (8000ad8 <SystemClock_Config+0xd0>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a54:	4a20      	ldr	r2, [pc, #128]	; (8000ad8 <SystemClock_Config+0xd0>)
 8000a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a5a:	6013      	str	r3, [r2, #0]
 8000a5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <SystemClock_Config+0xd0>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a70:	2310      	movs	r3, #16
 8000a72:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a74:	2302      	movs	r3, #2
 8000a76:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a7c:	2308      	movs	r3, #8
 8000a7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000a80:	2348      	movs	r3, #72	; 0x48
 8000a82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a84:	2302      	movs	r3, #2
 8000a86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a88:	2307      	movs	r3, #7
 8000a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8c:	f107 0320 	add.w	r3, r7, #32
 8000a90:	4618      	mov	r0, r3
 8000a92:	f001 f9b9 	bl	8001e08 <HAL_RCC_OscConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a9c:	f000 f8f4 	bl	8000c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa0:	230f      	movs	r3, #15
 8000aa2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ab6:	f107 030c 	add.w	r3, r7, #12
 8000aba:	2102      	movs	r1, #2
 8000abc:	4618      	mov	r0, r3
 8000abe:	f001 fc1b 	bl	80022f8 <HAL_RCC_ClockConfig>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ac8:	f000 f8de 	bl	8000c88 <Error_Handler>
  }
}
 8000acc:	bf00      	nop
 8000ace:	3750      	adds	r7, #80	; 0x50
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40007000 	.word	0x40007000

08000adc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <MX_I2C1_Init+0x50>)
 8000ae2:	4a13      	ldr	r2, [pc, #76]	; (8000b30 <MX_I2C1_Init+0x54>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_I2C1_Init+0x50>)
 8000ae8:	4a12      	ldr	r2, [pc, #72]	; (8000b34 <MX_I2C1_Init+0x58>)
 8000aea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_I2C1_Init+0x50>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_I2C1_Init+0x50>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <MX_I2C1_Init+0x50>)
 8000afa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000afe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b00:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <MX_I2C1_Init+0x50>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_I2C1_Init+0x50>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b0c:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <MX_I2C1_Init+0x50>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_I2C1_Init+0x50>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b18:	4804      	ldr	r0, [pc, #16]	; (8000b2c <MX_I2C1_Init+0x50>)
 8000b1a:	f000 fd29 	bl	8001570 <HAL_I2C_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b24:	f000 f8b0 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000090 	.word	0x20000090
 8000b30:	40005400 	.word	0x40005400
 8000b34:	000186a0 	.word	0x000186a0

08000b38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b3e:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <MX_USART2_UART_Init+0x50>)
 8000b40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b5e:	220c      	movs	r2, #12
 8000b60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b70:	f001 fde2 	bl	8002738 <HAL_UART_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b7a:	f000 f885 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200000e4 	.word	0x200000e4
 8000b88:	40004400 	.word	0x40004400

08000b8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
 8000ba0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	4b35      	ldr	r3, [pc, #212]	; (8000c7c <MX_GPIO_Init+0xf0>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a34      	ldr	r2, [pc, #208]	; (8000c7c <MX_GPIO_Init+0xf0>)
 8000bac:	f043 0304 	orr.w	r3, r3, #4
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b32      	ldr	r3, [pc, #200]	; (8000c7c <MX_GPIO_Init+0xf0>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0304 	and.w	r3, r3, #4
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	4b2e      	ldr	r3, [pc, #184]	; (8000c7c <MX_GPIO_Init+0xf0>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a2d      	ldr	r2, [pc, #180]	; (8000c7c <MX_GPIO_Init+0xf0>)
 8000bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b2b      	ldr	r3, [pc, #172]	; (8000c7c <MX_GPIO_Init+0xf0>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	4b27      	ldr	r3, [pc, #156]	; (8000c7c <MX_GPIO_Init+0xf0>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a26      	ldr	r2, [pc, #152]	; (8000c7c <MX_GPIO_Init+0xf0>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b24      	ldr	r3, [pc, #144]	; (8000c7c <MX_GPIO_Init+0xf0>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	4b20      	ldr	r3, [pc, #128]	; (8000c7c <MX_GPIO_Init+0xf0>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a1f      	ldr	r2, [pc, #124]	; (8000c7c <MX_GPIO_Init+0xf0>)
 8000c00:	f043 0302 	orr.w	r3, r3, #2
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <MX_GPIO_Init+0xf0>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f44f 6102 	mov.w	r1, #2080	; 0x820
 8000c18:	4819      	ldr	r0, [pc, #100]	; (8000c80 <MX_GPIO_Init+0xf4>)
 8000c1a:	f000 fc8f 	bl	800153c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c24:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	4813      	ldr	r0, [pc, #76]	; (8000c84 <MX_GPIO_Init+0xf8>)
 8000c36:	f000 fafd 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA11 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11;
 8000c3a:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8000c3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	4619      	mov	r1, r3
 8000c52:	480b      	ldr	r0, [pc, #44]	; (8000c80 <MX_GPIO_Init+0xf4>)
 8000c54:	f000 faee 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4804      	ldr	r0, [pc, #16]	; (8000c80 <MX_GPIO_Init+0xf4>)
 8000c6e:	f000 fae1 	bl	8001234 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c72:	bf00      	nop
 8000c74:	3728      	adds	r7, #40	; 0x28
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020000 	.word	0x40020000
 8000c84:	40020800 	.word	0x40020800

08000c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c8c:	b672      	cpsid	i
}
 8000c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <Error_Handler+0x8>
	...

08000c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	4a0f      	ldr	r2, [pc, #60]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8000caa:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	603b      	str	r3, [r7, #0]
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cd2:	2007      	movs	r0, #7
 8000cd4:	f000 fa7a 	bl	80011cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40023800 	.word	0x40023800

08000ce4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a19      	ldr	r2, [pc, #100]	; (8000d68 <HAL_I2C_MspInit+0x84>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d12c      	bne.n	8000d60 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <HAL_I2C_MspInit+0x88>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a17      	ldr	r2, [pc, #92]	; (8000d6c <HAL_I2C_MspInit+0x88>)
 8000d10:	f043 0302 	orr.w	r3, r3, #2
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <HAL_I2C_MspInit+0x88>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d28:	2312      	movs	r3, #18
 8000d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d30:	2303      	movs	r3, #3
 8000d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d34:	2304      	movs	r3, #4
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	480c      	ldr	r0, [pc, #48]	; (8000d70 <HAL_I2C_MspInit+0x8c>)
 8000d40:	f000 fa78 	bl	8001234 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <HAL_I2C_MspInit+0x88>)
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <HAL_I2C_MspInit+0x88>)
 8000d4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d52:	6413      	str	r3, [r2, #64]	; 0x40
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <HAL_I2C_MspInit+0x88>)
 8000d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d60:	bf00      	nop
 8000d62:	3728      	adds	r7, #40	; 0x28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40005400 	.word	0x40005400
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40020400 	.word	0x40020400

08000d74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a19      	ldr	r2, [pc, #100]	; (8000df8 <HAL_UART_MspInit+0x84>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d12b      	bne.n	8000dee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <HAL_UART_MspInit+0x88>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	4a17      	ldr	r2, [pc, #92]	; (8000dfc <HAL_UART_MspInit+0x88>)
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da4:	6413      	str	r3, [r2, #64]	; 0x40
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <HAL_UART_MspInit+0x88>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <HAL_UART_MspInit+0x88>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a10      	ldr	r2, [pc, #64]	; (8000dfc <HAL_UART_MspInit+0x88>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <HAL_UART_MspInit+0x88>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dce:	230c      	movs	r3, #12
 8000dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dde:	2307      	movs	r3, #7
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	4805      	ldr	r0, [pc, #20]	; (8000e00 <HAL_UART_MspInit+0x8c>)
 8000dea:	f000 fa23 	bl	8001234 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dee:	bf00      	nop
 8000df0:	3728      	adds	r7, #40	; 0x28
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40004400 	.word	0x40004400
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020000 	.word	0x40020000

08000e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <NMI_Handler+0x4>

08000e0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <HardFault_Handler+0x4>

08000e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <MemManage_Handler+0x4>

08000e16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <BusFault_Handler+0x4>

08000e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <UsageFault_Handler+0x4>

08000e22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e50:	f000 f8c6 	bl	8000fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e60:	4a14      	ldr	r2, [pc, #80]	; (8000eb4 <_sbrk+0x5c>)
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <_sbrk+0x60>)
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d102      	bne.n	8000e7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <_sbrk+0x64>)
 8000e76:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <_sbrk+0x68>)
 8000e78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <_sbrk+0x64>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d207      	bcs.n	8000e98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e88:	f001 ff40 	bl	8002d0c <__errno>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	220c      	movs	r2, #12
 8000e90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	e009      	b.n	8000eac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <_sbrk+0x64>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e9e:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <_sbrk+0x64>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	4a05      	ldr	r2, [pc, #20]	; (8000ebc <_sbrk+0x64>)
 8000ea8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3718      	adds	r7, #24
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20018000 	.word	0x20018000
 8000eb8:	00000400 	.word	0x00000400
 8000ebc:	20000128 	.word	0x20000128
 8000ec0:	20000278 	.word	0x20000278

08000ec4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <SystemInit+0x20>)
 8000eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ece:	4a05      	ldr	r2, [pc, #20]	; (8000ee4 <SystemInit+0x20>)
 8000ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ee8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eec:	480d      	ldr	r0, [pc, #52]	; (8000f24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eee:	490e      	ldr	r1, [pc, #56]	; (8000f28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ef0:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef4:	e002      	b.n	8000efc <LoopCopyDataInit>

08000ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efa:	3304      	adds	r3, #4

08000efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f00:	d3f9      	bcc.n	8000ef6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f02:	4a0b      	ldr	r2, [pc, #44]	; (8000f30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f04:	4c0b      	ldr	r4, [pc, #44]	; (8000f34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f08:	e001      	b.n	8000f0e <LoopFillZerobss>

08000f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f0c:	3204      	adds	r2, #4

08000f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f10:	d3fb      	bcc.n	8000f0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f12:	f7ff ffd7 	bl	8000ec4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f16:	f001 feff 	bl	8002d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f1a:	f7ff fd29 	bl	8000970 <main>
  bx  lr    
 8000f1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f20:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f28:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000f2c:	080036a4 	.word	0x080036a4
  ldr r2, =_sbss
 8000f30:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000f34:	20000278 	.word	0x20000278

08000f38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f38:	e7fe      	b.n	8000f38 <ADC_IRQHandler>
	...

08000f3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f40:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <HAL_Init+0x40>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a0d      	ldr	r2, [pc, #52]	; (8000f7c <HAL_Init+0x40>)
 8000f46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <HAL_Init+0x40>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <HAL_Init+0x40>)
 8000f52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <HAL_Init+0x40>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a07      	ldr	r2, [pc, #28]	; (8000f7c <HAL_Init+0x40>)
 8000f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f64:	2003      	movs	r0, #3
 8000f66:	f000 f931 	bl	80011cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f000 f808 	bl	8000f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f70:	f7ff fe90 	bl	8000c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40023c00 	.word	0x40023c00

08000f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_InitTick+0x54>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_InitTick+0x58>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	4619      	mov	r1, r3
 8000f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 f93b 	bl	800121a <HAL_SYSTICK_Config>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e00e      	b.n	8000fcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b0f      	cmp	r3, #15
 8000fb2:	d80a      	bhi.n	8000fca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	f000 f911 	bl	80011e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc0:	4a06      	ldr	r2, [pc, #24]	; (8000fdc <HAL_InitTick+0x5c>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	e000      	b.n	8000fcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000010 	.word	0x20000010
 8000fd8:	20000018 	.word	0x20000018
 8000fdc:	20000014 	.word	0x20000014

08000fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x20>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_IncTick+0x24>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4413      	add	r3, r2
 8000ff0:	4a04      	ldr	r2, [pc, #16]	; (8001004 <HAL_IncTick+0x24>)
 8000ff2:	6013      	str	r3, [r2, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20000018 	.word	0x20000018
 8001004:	2000012c 	.word	0x2000012c

08001008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return uwTick;
 800100c:	4b03      	ldr	r3, [pc, #12]	; (800101c <HAL_GetTick+0x14>)
 800100e:	681b      	ldr	r3, [r3, #0]
}
 8001010:	4618      	mov	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	2000012c 	.word	0x2000012c

08001020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001028:	f7ff ffee 	bl	8001008 <HAL_GetTick>
 800102c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001038:	d005      	beq.n	8001046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_Delay+0x44>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4413      	add	r3, r2
 8001044:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001046:	bf00      	nop
 8001048:	f7ff ffde 	bl	8001008 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	429a      	cmp	r2, r3
 8001056:	d8f7      	bhi.n	8001048 <HAL_Delay+0x28>
  {
  }
}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000018 	.word	0x20000018

08001068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001084:	4013      	ands	r3, r2
 8001086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001090:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109a:	4a04      	ldr	r2, [pc, #16]	; (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	60d3      	str	r3, [r2, #12]
}
 80010a0:	bf00      	nop
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <__NVIC_GetPriorityGrouping+0x18>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	f003 0307 	and.w	r3, r3, #7
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	6039      	str	r1, [r7, #0]
 80010d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	db0a      	blt.n	80010f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	490c      	ldr	r1, [pc, #48]	; (8001118 <__NVIC_SetPriority+0x4c>)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	0112      	lsls	r2, r2, #4
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	440b      	add	r3, r1
 80010f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f4:	e00a      	b.n	800110c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4908      	ldr	r1, [pc, #32]	; (800111c <__NVIC_SetPriority+0x50>)
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	f003 030f 	and.w	r3, r3, #15
 8001102:	3b04      	subs	r3, #4
 8001104:	0112      	lsls	r2, r2, #4
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	440b      	add	r3, r1
 800110a:	761a      	strb	r2, [r3, #24]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000e100 	.word	0xe000e100
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001120:	b480      	push	{r7}
 8001122:	b089      	sub	sp, #36	; 0x24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	f1c3 0307 	rsb	r3, r3, #7
 800113a:	2b04      	cmp	r3, #4
 800113c:	bf28      	it	cs
 800113e:	2304      	movcs	r3, #4
 8001140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3304      	adds	r3, #4
 8001146:	2b06      	cmp	r3, #6
 8001148:	d902      	bls.n	8001150 <NVIC_EncodePriority+0x30>
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3b03      	subs	r3, #3
 800114e:	e000      	b.n	8001152 <NVIC_EncodePriority+0x32>
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	f04f 32ff 	mov.w	r2, #4294967295
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43da      	mvns	r2, r3
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	401a      	ands	r2, r3
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001168:	f04f 31ff 	mov.w	r1, #4294967295
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	fa01 f303 	lsl.w	r3, r1, r3
 8001172:	43d9      	mvns	r1, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	4313      	orrs	r3, r2
         );
}
 800117a:	4618      	mov	r0, r3
 800117c:	3724      	adds	r7, #36	; 0x24
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
	...

08001188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3b01      	subs	r3, #1
 8001194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001198:	d301      	bcc.n	800119e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119a:	2301      	movs	r3, #1
 800119c:	e00f      	b.n	80011be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119e:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <SysTick_Config+0x40>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a6:	210f      	movs	r1, #15
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f7ff ff8e 	bl	80010cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <SysTick_Config+0x40>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b6:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <SysTick_Config+0x40>)
 80011b8:	2207      	movs	r2, #7
 80011ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	e000e010 	.word	0xe000e010

080011cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ff47 	bl	8001068 <__NVIC_SetPriorityGrouping>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b086      	sub	sp, #24
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
 80011ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f4:	f7ff ff5c 	bl	80010b0 <__NVIC_GetPriorityGrouping>
 80011f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	68b9      	ldr	r1, [r7, #8]
 80011fe:	6978      	ldr	r0, [r7, #20]
 8001200:	f7ff ff8e 	bl	8001120 <NVIC_EncodePriority>
 8001204:	4602      	mov	r2, r0
 8001206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff5d 	bl	80010cc <__NVIC_SetPriority>
}
 8001212:	bf00      	nop
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ffb0 	bl	8001188 <SysTick_Config>
 8001228:	4603      	mov	r3, r0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	; 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001246:	2300      	movs	r3, #0
 8001248:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
 800124e:	e159      	b.n	8001504 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001250:	2201      	movs	r2, #1
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	429a      	cmp	r2, r3
 800126a:	f040 8148 	bne.w	80014fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 0303 	and.w	r3, r3, #3
 8001276:	2b01      	cmp	r3, #1
 8001278:	d005      	beq.n	8001286 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001282:	2b02      	cmp	r3, #2
 8001284:	d130      	bne.n	80012e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	2203      	movs	r2, #3
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	68da      	ldr	r2, [r3, #12]
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012bc:	2201      	movs	r2, #1
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	091b      	lsrs	r3, r3, #4
 80012d2:	f003 0201 	and.w	r2, r3, #1
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	2b03      	cmp	r3, #3
 80012f2:	d017      	beq.n	8001324 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	2203      	movs	r2, #3
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d123      	bne.n	8001378 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	08da      	lsrs	r2, r3, #3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3208      	adds	r2, #8
 8001338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800133c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	f003 0307 	and.w	r3, r3, #7
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	220f      	movs	r2, #15
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	691a      	ldr	r2, [r3, #16]
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	08da      	lsrs	r2, r3, #3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	3208      	adds	r2, #8
 8001372:	69b9      	ldr	r1, [r7, #24]
 8001374:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	2203      	movs	r2, #3
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 0203 	and.w	r2, r3, #3
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 80a2 	beq.w	80014fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4b57      	ldr	r3, [pc, #348]	; (800151c <HAL_GPIO_Init+0x2e8>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c2:	4a56      	ldr	r2, [pc, #344]	; (800151c <HAL_GPIO_Init+0x2e8>)
 80013c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ca:	4b54      	ldr	r3, [pc, #336]	; (800151c <HAL_GPIO_Init+0x2e8>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013d6:	4a52      	ldr	r2, [pc, #328]	; (8001520 <HAL_GPIO_Init+0x2ec>)
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	089b      	lsrs	r3, r3, #2
 80013dc:	3302      	adds	r3, #2
 80013de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f003 0303 	and.w	r3, r3, #3
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	220f      	movs	r2, #15
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a49      	ldr	r2, [pc, #292]	; (8001524 <HAL_GPIO_Init+0x2f0>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d019      	beq.n	8001436 <HAL_GPIO_Init+0x202>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a48      	ldr	r2, [pc, #288]	; (8001528 <HAL_GPIO_Init+0x2f4>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d013      	beq.n	8001432 <HAL_GPIO_Init+0x1fe>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a47      	ldr	r2, [pc, #284]	; (800152c <HAL_GPIO_Init+0x2f8>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d00d      	beq.n	800142e <HAL_GPIO_Init+0x1fa>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a46      	ldr	r2, [pc, #280]	; (8001530 <HAL_GPIO_Init+0x2fc>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d007      	beq.n	800142a <HAL_GPIO_Init+0x1f6>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a45      	ldr	r2, [pc, #276]	; (8001534 <HAL_GPIO_Init+0x300>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d101      	bne.n	8001426 <HAL_GPIO_Init+0x1f2>
 8001422:	2304      	movs	r3, #4
 8001424:	e008      	b.n	8001438 <HAL_GPIO_Init+0x204>
 8001426:	2307      	movs	r3, #7
 8001428:	e006      	b.n	8001438 <HAL_GPIO_Init+0x204>
 800142a:	2303      	movs	r3, #3
 800142c:	e004      	b.n	8001438 <HAL_GPIO_Init+0x204>
 800142e:	2302      	movs	r3, #2
 8001430:	e002      	b.n	8001438 <HAL_GPIO_Init+0x204>
 8001432:	2301      	movs	r3, #1
 8001434:	e000      	b.n	8001438 <HAL_GPIO_Init+0x204>
 8001436:	2300      	movs	r3, #0
 8001438:	69fa      	ldr	r2, [r7, #28]
 800143a:	f002 0203 	and.w	r2, r2, #3
 800143e:	0092      	lsls	r2, r2, #2
 8001440:	4093      	lsls	r3, r2
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001448:	4935      	ldr	r1, [pc, #212]	; (8001520 <HAL_GPIO_Init+0x2ec>)
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	089b      	lsrs	r3, r3, #2
 800144e:	3302      	adds	r3, #2
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001456:	4b38      	ldr	r3, [pc, #224]	; (8001538 <HAL_GPIO_Init+0x304>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	43db      	mvns	r3, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800147a:	4a2f      	ldr	r2, [pc, #188]	; (8001538 <HAL_GPIO_Init+0x304>)
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001480:	4b2d      	ldr	r3, [pc, #180]	; (8001538 <HAL_GPIO_Init+0x304>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014a4:	4a24      	ldr	r2, [pc, #144]	; (8001538 <HAL_GPIO_Init+0x304>)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014aa:	4b23      	ldr	r3, [pc, #140]	; (8001538 <HAL_GPIO_Init+0x304>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4013      	ands	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ce:	4a1a      	ldr	r2, [pc, #104]	; (8001538 <HAL_GPIO_Init+0x304>)
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014d4:	4b18      	ldr	r3, [pc, #96]	; (8001538 <HAL_GPIO_Init+0x304>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014f8:	4a0f      	ldr	r2, [pc, #60]	; (8001538 <HAL_GPIO_Init+0x304>)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3301      	adds	r3, #1
 8001502:	61fb      	str	r3, [r7, #28]
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	2b0f      	cmp	r3, #15
 8001508:	f67f aea2 	bls.w	8001250 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	3724      	adds	r7, #36	; 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40023800 	.word	0x40023800
 8001520:	40013800 	.word	0x40013800
 8001524:	40020000 	.word	0x40020000
 8001528:	40020400 	.word	0x40020400
 800152c:	40020800 	.word	0x40020800
 8001530:	40020c00 	.word	0x40020c00
 8001534:	40021000 	.word	0x40021000
 8001538:	40013c00 	.word	0x40013c00

0800153c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	807b      	strh	r3, [r7, #2]
 8001548:	4613      	mov	r3, r2
 800154a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800154c:	787b      	ldrb	r3, [r7, #1]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001552:	887a      	ldrh	r2, [r7, #2]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001558:	e003      	b.n	8001562 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800155a:	887b      	ldrh	r3, [r7, #2]
 800155c:	041a      	lsls	r2, r3, #16
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	619a      	str	r2, [r3, #24]
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e12b      	b.n	80017da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	d106      	bne.n	800159c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff fba4 	bl	8000ce4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2224      	movs	r2, #36	; 0x24
 80015a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f022 0201 	bic.w	r2, r2, #1
 80015b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015d4:	f001 f888 	bl	80026e8 <HAL_RCC_GetPCLK1Freq>
 80015d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	4a81      	ldr	r2, [pc, #516]	; (80017e4 <HAL_I2C_Init+0x274>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d807      	bhi.n	80015f4 <HAL_I2C_Init+0x84>
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4a80      	ldr	r2, [pc, #512]	; (80017e8 <HAL_I2C_Init+0x278>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	bf94      	ite	ls
 80015ec:	2301      	movls	r3, #1
 80015ee:	2300      	movhi	r3, #0
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	e006      	b.n	8001602 <HAL_I2C_Init+0x92>
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4a7d      	ldr	r2, [pc, #500]	; (80017ec <HAL_I2C_Init+0x27c>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	bf94      	ite	ls
 80015fc:	2301      	movls	r3, #1
 80015fe:	2300      	movhi	r3, #0
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e0e7      	b.n	80017da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4a78      	ldr	r2, [pc, #480]	; (80017f0 <HAL_I2C_Init+0x280>)
 800160e:	fba2 2303 	umull	r2, r3, r2, r3
 8001612:	0c9b      	lsrs	r3, r3, #18
 8001614:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68ba      	ldr	r2, [r7, #8]
 8001626:	430a      	orrs	r2, r1
 8001628:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	4a6a      	ldr	r2, [pc, #424]	; (80017e4 <HAL_I2C_Init+0x274>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d802      	bhi.n	8001644 <HAL_I2C_Init+0xd4>
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	3301      	adds	r3, #1
 8001642:	e009      	b.n	8001658 <HAL_I2C_Init+0xe8>
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800164a:	fb02 f303 	mul.w	r3, r2, r3
 800164e:	4a69      	ldr	r2, [pc, #420]	; (80017f4 <HAL_I2C_Init+0x284>)
 8001650:	fba2 2303 	umull	r2, r3, r2, r3
 8001654:	099b      	lsrs	r3, r3, #6
 8001656:	3301      	adds	r3, #1
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	6812      	ldr	r2, [r2, #0]
 800165c:	430b      	orrs	r3, r1
 800165e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800166a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	495c      	ldr	r1, [pc, #368]	; (80017e4 <HAL_I2C_Init+0x274>)
 8001674:	428b      	cmp	r3, r1
 8001676:	d819      	bhi.n	80016ac <HAL_I2C_Init+0x13c>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	1e59      	subs	r1, r3, #1
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	fbb1 f3f3 	udiv	r3, r1, r3
 8001686:	1c59      	adds	r1, r3, #1
 8001688:	f640 73fc 	movw	r3, #4092	; 0xffc
 800168c:	400b      	ands	r3, r1
 800168e:	2b00      	cmp	r3, #0
 8001690:	d00a      	beq.n	80016a8 <HAL_I2C_Init+0x138>
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	1e59      	subs	r1, r3, #1
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	fbb1 f3f3 	udiv	r3, r1, r3
 80016a0:	3301      	adds	r3, #1
 80016a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016a6:	e051      	b.n	800174c <HAL_I2C_Init+0x1dc>
 80016a8:	2304      	movs	r3, #4
 80016aa:	e04f      	b.n	800174c <HAL_I2C_Init+0x1dc>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d111      	bne.n	80016d8 <HAL_I2C_Init+0x168>
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	1e58      	subs	r0, r3, #1
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6859      	ldr	r1, [r3, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	440b      	add	r3, r1
 80016c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016c6:	3301      	adds	r3, #1
 80016c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	bf0c      	ite	eq
 80016d0:	2301      	moveq	r3, #1
 80016d2:	2300      	movne	r3, #0
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	e012      	b.n	80016fe <HAL_I2C_Init+0x18e>
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	1e58      	subs	r0, r3, #1
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6859      	ldr	r1, [r3, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	440b      	add	r3, r1
 80016e6:	0099      	lsls	r1, r3, #2
 80016e8:	440b      	add	r3, r1
 80016ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ee:	3301      	adds	r3, #1
 80016f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	bf0c      	ite	eq
 80016f8:	2301      	moveq	r3, #1
 80016fa:	2300      	movne	r3, #0
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <HAL_I2C_Init+0x196>
 8001702:	2301      	movs	r3, #1
 8001704:	e022      	b.n	800174c <HAL_I2C_Init+0x1dc>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10e      	bne.n	800172c <HAL_I2C_Init+0x1bc>
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	1e58      	subs	r0, r3, #1
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6859      	ldr	r1, [r3, #4]
 8001716:	460b      	mov	r3, r1
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	440b      	add	r3, r1
 800171c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001720:	3301      	adds	r3, #1
 8001722:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800172a:	e00f      	b.n	800174c <HAL_I2C_Init+0x1dc>
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	1e58      	subs	r0, r3, #1
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6859      	ldr	r1, [r3, #4]
 8001734:	460b      	mov	r3, r1
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	440b      	add	r3, r1
 800173a:	0099      	lsls	r1, r3, #2
 800173c:	440b      	add	r3, r1
 800173e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001742:	3301      	adds	r3, #1
 8001744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001748:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800174c:	6879      	ldr	r1, [r7, #4]
 800174e:	6809      	ldr	r1, [r1, #0]
 8001750:	4313      	orrs	r3, r2
 8001752:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69da      	ldr	r2, [r3, #28]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	431a      	orrs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800177a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6911      	ldr	r1, [r2, #16]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	68d2      	ldr	r2, [r2, #12]
 8001786:	4311      	orrs	r1, r2
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	6812      	ldr	r2, [r2, #0]
 800178c:	430b      	orrs	r3, r1
 800178e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	695a      	ldr	r2, [r3, #20]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	431a      	orrs	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	430a      	orrs	r2, r1
 80017aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f042 0201 	orr.w	r2, r2, #1
 80017ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2220      	movs	r2, #32
 80017c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	000186a0 	.word	0x000186a0
 80017e8:	001e847f 	.word	0x001e847f
 80017ec:	003d08ff 	.word	0x003d08ff
 80017f0:	431bde83 	.word	0x431bde83
 80017f4:	10624dd3 	.word	0x10624dd3

080017f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af02      	add	r7, sp, #8
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	607a      	str	r2, [r7, #4]
 8001802:	461a      	mov	r2, r3
 8001804:	460b      	mov	r3, r1
 8001806:	817b      	strh	r3, [r7, #10]
 8001808:	4613      	mov	r3, r2
 800180a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800180c:	f7ff fbfc 	bl	8001008 <HAL_GetTick>
 8001810:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b20      	cmp	r3, #32
 800181c:	f040 80e0 	bne.w	80019e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	2319      	movs	r3, #25
 8001826:	2201      	movs	r2, #1
 8001828:	4970      	ldr	r1, [pc, #448]	; (80019ec <HAL_I2C_Master_Transmit+0x1f4>)
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f000 f964 	bl	8001af8 <I2C_WaitOnFlagUntilTimeout>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001836:	2302      	movs	r3, #2
 8001838:	e0d3      	b.n	80019e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001840:	2b01      	cmp	r3, #1
 8001842:	d101      	bne.n	8001848 <HAL_I2C_Master_Transmit+0x50>
 8001844:	2302      	movs	r3, #2
 8001846:	e0cc      	b.n	80019e2 <HAL_I2C_Master_Transmit+0x1ea>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b01      	cmp	r3, #1
 800185c:	d007      	beq.n	800186e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f042 0201 	orr.w	r2, r2, #1
 800186c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800187c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2221      	movs	r2, #33	; 0x21
 8001882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2210      	movs	r2, #16
 800188a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2200      	movs	r2, #0
 8001892:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	893a      	ldrh	r2, [r7, #8]
 800189e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4a50      	ldr	r2, [pc, #320]	; (80019f0 <HAL_I2C_Master_Transmit+0x1f8>)
 80018ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018b0:	8979      	ldrh	r1, [r7, #10]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	6a3a      	ldr	r2, [r7, #32]
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f000 f89c 	bl	80019f4 <I2C_MasterRequestWrite>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e08d      	b.n	80019e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	695b      	ldr	r3, [r3, #20]
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80018dc:	e066      	b.n	80019ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	6a39      	ldr	r1, [r7, #32]
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f000 f9de 	bl	8001ca4 <I2C_WaitOnTXEFlagUntilTimeout>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00d      	beq.n	800190a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	d107      	bne.n	8001906 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001904:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e06b      	b.n	80019e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190e:	781a      	ldrb	r2, [r3, #0]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001924:	b29b      	uxth	r3, r3
 8001926:	3b01      	subs	r3, #1
 8001928:	b29a      	uxth	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001932:	3b01      	subs	r3, #1
 8001934:	b29a      	uxth	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b04      	cmp	r3, #4
 8001946:	d11b      	bne.n	8001980 <HAL_I2C_Master_Transmit+0x188>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800194c:	2b00      	cmp	r3, #0
 800194e:	d017      	beq.n	8001980 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	781a      	ldrb	r2, [r3, #0]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	1c5a      	adds	r2, r3, #1
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800196a:	b29b      	uxth	r3, r3
 800196c:	3b01      	subs	r3, #1
 800196e:	b29a      	uxth	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001978:	3b01      	subs	r3, #1
 800197a:	b29a      	uxth	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	6a39      	ldr	r1, [r7, #32]
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f000 f9ce 	bl	8001d26 <I2C_WaitOnBTFFlagUntilTimeout>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d00d      	beq.n	80019ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	2b04      	cmp	r3, #4
 8001996:	d107      	bne.n	80019a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e01a      	b.n	80019e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d194      	bne.n	80018de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2220      	movs	r2, #32
 80019c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80019dc:	2300      	movs	r3, #0
 80019de:	e000      	b.n	80019e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80019e0:	2302      	movs	r3, #2
  }
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	00100002 	.word	0x00100002
 80019f0:	ffff0000 	.word	0xffff0000

080019f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b088      	sub	sp, #32
 80019f8:	af02      	add	r7, sp, #8
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	607a      	str	r2, [r7, #4]
 80019fe:	603b      	str	r3, [r7, #0]
 8001a00:	460b      	mov	r3, r1
 8001a02:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a08:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d006      	beq.n	8001a1e <I2C_MasterRequestWrite+0x2a>
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d003      	beq.n	8001a1e <I2C_MasterRequestWrite+0x2a>
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a1c:	d108      	bne.n	8001a30 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	e00b      	b.n	8001a48 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a34:	2b12      	cmp	r3, #18
 8001a36:	d107      	bne.n	8001a48 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f000 f84f 	bl	8001af8 <I2C_WaitOnFlagUntilTimeout>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00d      	beq.n	8001a7c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a6e:	d103      	bne.n	8001a78 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e035      	b.n	8001ae8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a84:	d108      	bne.n	8001a98 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a86:	897b      	ldrh	r3, [r7, #10]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001a94:	611a      	str	r2, [r3, #16]
 8001a96:	e01b      	b.n	8001ad0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001a98:	897b      	ldrh	r3, [r7, #10]
 8001a9a:	11db      	asrs	r3, r3, #7
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	f003 0306 	and.w	r3, r3, #6
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	f063 030f 	orn	r3, r3, #15
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	490e      	ldr	r1, [pc, #56]	; (8001af0 <I2C_MasterRequestWrite+0xfc>)
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f000 f875 	bl	8001ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e010      	b.n	8001ae8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ac6:	897b      	ldrh	r3, [r7, #10]
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	4907      	ldr	r1, [pc, #28]	; (8001af4 <I2C_MasterRequestWrite+0x100>)
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f000 f865 	bl	8001ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e000      	b.n	8001ae8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	00010008 	.word	0x00010008
 8001af4:	00010002 	.word	0x00010002

08001af8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	603b      	str	r3, [r7, #0]
 8001b04:	4613      	mov	r3, r2
 8001b06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b08:	e025      	b.n	8001b56 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b10:	d021      	beq.n	8001b56 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b12:	f7ff fa79 	bl	8001008 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d302      	bcc.n	8001b28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d116      	bne.n	8001b56 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2220      	movs	r2, #32
 8001b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f043 0220 	orr.w	r2, r3, #32
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e023      	b.n	8001b9e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	0c1b      	lsrs	r3, r3, #16
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d10d      	bne.n	8001b7c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	43da      	mvns	r2, r3
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	bf0c      	ite	eq
 8001b72:	2301      	moveq	r3, #1
 8001b74:	2300      	movne	r3, #0
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	461a      	mov	r2, r3
 8001b7a:	e00c      	b.n	8001b96 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	43da      	mvns	r2, r3
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	4013      	ands	r3, r2
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	bf0c      	ite	eq
 8001b8e:	2301      	moveq	r3, #1
 8001b90:	2300      	movne	r3, #0
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	461a      	mov	r2, r3
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d0b6      	beq.n	8001b0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b084      	sub	sp, #16
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	60f8      	str	r0, [r7, #12]
 8001bae:	60b9      	str	r1, [r7, #8]
 8001bb0:	607a      	str	r2, [r7, #4]
 8001bb2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001bb4:	e051      	b.n	8001c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	695b      	ldr	r3, [r3, #20]
 8001bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bc4:	d123      	bne.n	8001c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bd4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001bde:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2220      	movs	r2, #32
 8001bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f043 0204 	orr.w	r2, r3, #4
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e046      	b.n	8001c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c14:	d021      	beq.n	8001c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c16:	f7ff f9f7 	bl	8001008 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d302      	bcc.n	8001c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d116      	bne.n	8001c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2220      	movs	r2, #32
 8001c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	f043 0220 	orr.w	r2, r3, #32
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e020      	b.n	8001c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	0c1b      	lsrs	r3, r3, #16
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d10c      	bne.n	8001c7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	43da      	mvns	r2, r3
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	bf14      	ite	ne
 8001c76:	2301      	movne	r3, #1
 8001c78:	2300      	moveq	r3, #0
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	e00b      	b.n	8001c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	43da      	mvns	r2, r3
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	bf14      	ite	ne
 8001c90:	2301      	movne	r3, #1
 8001c92:	2300      	moveq	r3, #0
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d18d      	bne.n	8001bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cb0:	e02d      	b.n	8001d0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f000 f878 	bl	8001da8 <I2C_IsAcknowledgeFailed>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e02d      	b.n	8001d1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc8:	d021      	beq.n	8001d0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cca:	f7ff f99d 	bl	8001008 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	68ba      	ldr	r2, [r7, #8]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d302      	bcc.n	8001ce0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d116      	bne.n	8001d0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2220      	movs	r2, #32
 8001cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	f043 0220 	orr.w	r2, r3, #32
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e007      	b.n	8001d1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d18:	2b80      	cmp	r3, #128	; 0x80
 8001d1a:	d1ca      	bne.n	8001cb2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b084      	sub	sp, #16
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	60f8      	str	r0, [r7, #12]
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d32:	e02d      	b.n	8001d90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f000 f837 	bl	8001da8 <I2C_IsAcknowledgeFailed>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e02d      	b.n	8001da0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d4a:	d021      	beq.n	8001d90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d4c:	f7ff f95c 	bl	8001008 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d302      	bcc.n	8001d62 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d116      	bne.n	8001d90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2220      	movs	r2, #32
 8001d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	f043 0220 	orr.w	r2, r3, #32
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e007      	b.n	8001da0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	f003 0304 	and.w	r3, r3, #4
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d1ca      	bne.n	8001d34 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dbe:	d11b      	bne.n	8001df8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001dc8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de4:	f043 0204 	orr.w	r2, r3, #4
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e000      	b.n	8001dfa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
	...

08001e08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e267      	b.n	80022ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d075      	beq.n	8001f12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e26:	4b88      	ldr	r3, [pc, #544]	; (8002048 <HAL_RCC_OscConfig+0x240>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	d00c      	beq.n	8001e4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e32:	4b85      	ldr	r3, [pc, #532]	; (8002048 <HAL_RCC_OscConfig+0x240>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e3a:	2b08      	cmp	r3, #8
 8001e3c:	d112      	bne.n	8001e64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e3e:	4b82      	ldr	r3, [pc, #520]	; (8002048 <HAL_RCC_OscConfig+0x240>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e4a:	d10b      	bne.n	8001e64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e4c:	4b7e      	ldr	r3, [pc, #504]	; (8002048 <HAL_RCC_OscConfig+0x240>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d05b      	beq.n	8001f10 <HAL_RCC_OscConfig+0x108>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d157      	bne.n	8001f10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e242      	b.n	80022ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e6c:	d106      	bne.n	8001e7c <HAL_RCC_OscConfig+0x74>
 8001e6e:	4b76      	ldr	r3, [pc, #472]	; (8002048 <HAL_RCC_OscConfig+0x240>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a75      	ldr	r2, [pc, #468]	; (8002048 <HAL_RCC_OscConfig+0x240>)
 8001e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	e01d      	b.n	8001eb8 <HAL_RCC_OscConfig+0xb0>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e84:	d10c      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x98>
 8001e86:	4b70      	ldr	r3, [pc, #448]	; (8002048 <HAL_RCC_OscConfig+0x240>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a6f      	ldr	r2, [pc, #444]	; (8002048 <HAL_RCC_OscConfig+0x240>)
 8001e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	4b6d      	ldr	r3, [pc, #436]	; (8002048 <HAL_RCC_OscConfig+0x240>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a6c      	ldr	r2, [pc, #432]	; (8002048 <HAL_RCC_OscConfig+0x240>)
 8001e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	e00b      	b.n	8001eb8 <HAL_RCC_OscConfig+0xb0>
 8001ea0:	4b69      	ldr	r3, [pc, #420]	; (8002048 <HAL_RCC_OscConfig+0x240>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a68      	ldr	r2, [pc, #416]	; (8002048 <HAL_RCC_OscConfig+0x240>)
 8001ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	4b66      	ldr	r3, [pc, #408]	; (8002048 <HAL_RCC_OscConfig+0x240>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a65      	ldr	r2, [pc, #404]	; (8002048 <HAL_RCC_OscConfig+0x240>)
 8001eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d013      	beq.n	8001ee8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec0:	f7ff f8a2 	bl	8001008 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ec8:	f7ff f89e 	bl	8001008 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b64      	cmp	r3, #100	; 0x64
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e207      	b.n	80022ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eda:	4b5b      	ldr	r3, [pc, #364]	; (8002048 <HAL_RCC_OscConfig+0x240>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0f0      	beq.n	8001ec8 <HAL_RCC_OscConfig+0xc0>
 8001ee6:	e014      	b.n	8001f12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee8:	f7ff f88e 	bl	8001008 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ef0:	f7ff f88a 	bl	8001008 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b64      	cmp	r3, #100	; 0x64
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e1f3      	b.n	80022ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f02:	4b51      	ldr	r3, [pc, #324]	; (8002048 <HAL_RCC_OscConfig+0x240>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f0      	bne.n	8001ef0 <HAL_RCC_OscConfig+0xe8>
 8001f0e:	e000      	b.n	8001f12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d063      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f1e:	4b4a      	ldr	r3, [pc, #296]	; (8002048 <HAL_RCC_OscConfig+0x240>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 030c 	and.w	r3, r3, #12
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00b      	beq.n	8001f42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f2a:	4b47      	ldr	r3, [pc, #284]	; (8002048 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f32:	2b08      	cmp	r3, #8
 8001f34:	d11c      	bne.n	8001f70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f36:	4b44      	ldr	r3, [pc, #272]	; (8002048 <HAL_RCC_OscConfig+0x240>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d116      	bne.n	8001f70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f42:	4b41      	ldr	r3, [pc, #260]	; (8002048 <HAL_RCC_OscConfig+0x240>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d005      	beq.n	8001f5a <HAL_RCC_OscConfig+0x152>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d001      	beq.n	8001f5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e1c7      	b.n	80022ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5a:	4b3b      	ldr	r3, [pc, #236]	; (8002048 <HAL_RCC_OscConfig+0x240>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	4937      	ldr	r1, [pc, #220]	; (8002048 <HAL_RCC_OscConfig+0x240>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f6e:	e03a      	b.n	8001fe6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d020      	beq.n	8001fba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f78:	4b34      	ldr	r3, [pc, #208]	; (800204c <HAL_RCC_OscConfig+0x244>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7e:	f7ff f843 	bl	8001008 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f86:	f7ff f83f 	bl	8001008 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e1a8      	b.n	80022ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f98:	4b2b      	ldr	r3, [pc, #172]	; (8002048 <HAL_RCC_OscConfig+0x240>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0f0      	beq.n	8001f86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa4:	4b28      	ldr	r3, [pc, #160]	; (8002048 <HAL_RCC_OscConfig+0x240>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4925      	ldr	r1, [pc, #148]	; (8002048 <HAL_RCC_OscConfig+0x240>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	600b      	str	r3, [r1, #0]
 8001fb8:	e015      	b.n	8001fe6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fba:	4b24      	ldr	r3, [pc, #144]	; (800204c <HAL_RCC_OscConfig+0x244>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc0:	f7ff f822 	bl	8001008 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fc8:	f7ff f81e 	bl	8001008 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e187      	b.n	80022ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fda:	4b1b      	ldr	r3, [pc, #108]	; (8002048 <HAL_RCC_OscConfig+0x240>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d036      	beq.n	8002060 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d016      	beq.n	8002028 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ffa:	4b15      	ldr	r3, [pc, #84]	; (8002050 <HAL_RCC_OscConfig+0x248>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002000:	f7ff f802 	bl	8001008 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002008:	f7fe fffe 	bl	8001008 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e167      	b.n	80022ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201a:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <HAL_RCC_OscConfig+0x240>)
 800201c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0f0      	beq.n	8002008 <HAL_RCC_OscConfig+0x200>
 8002026:	e01b      	b.n	8002060 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002028:	4b09      	ldr	r3, [pc, #36]	; (8002050 <HAL_RCC_OscConfig+0x248>)
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202e:	f7fe ffeb 	bl	8001008 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002034:	e00e      	b.n	8002054 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002036:	f7fe ffe7 	bl	8001008 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d907      	bls.n	8002054 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e150      	b.n	80022ea <HAL_RCC_OscConfig+0x4e2>
 8002048:	40023800 	.word	0x40023800
 800204c:	42470000 	.word	0x42470000
 8002050:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002054:	4b88      	ldr	r3, [pc, #544]	; (8002278 <HAL_RCC_OscConfig+0x470>)
 8002056:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1ea      	bne.n	8002036 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	f000 8097 	beq.w	800219c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800206e:	2300      	movs	r3, #0
 8002070:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002072:	4b81      	ldr	r3, [pc, #516]	; (8002278 <HAL_RCC_OscConfig+0x470>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10f      	bne.n	800209e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	4b7d      	ldr	r3, [pc, #500]	; (8002278 <HAL_RCC_OscConfig+0x470>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	4a7c      	ldr	r2, [pc, #496]	; (8002278 <HAL_RCC_OscConfig+0x470>)
 8002088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800208c:	6413      	str	r3, [r2, #64]	; 0x40
 800208e:	4b7a      	ldr	r3, [pc, #488]	; (8002278 <HAL_RCC_OscConfig+0x470>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002096:	60bb      	str	r3, [r7, #8]
 8002098:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800209a:	2301      	movs	r3, #1
 800209c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209e:	4b77      	ldr	r3, [pc, #476]	; (800227c <HAL_RCC_OscConfig+0x474>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d118      	bne.n	80020dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020aa:	4b74      	ldr	r3, [pc, #464]	; (800227c <HAL_RCC_OscConfig+0x474>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a73      	ldr	r2, [pc, #460]	; (800227c <HAL_RCC_OscConfig+0x474>)
 80020b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b6:	f7fe ffa7 	bl	8001008 <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020bc:	e008      	b.n	80020d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020be:	f7fe ffa3 	bl	8001008 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e10c      	b.n	80022ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d0:	4b6a      	ldr	r3, [pc, #424]	; (800227c <HAL_RCC_OscConfig+0x474>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0f0      	beq.n	80020be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d106      	bne.n	80020f2 <HAL_RCC_OscConfig+0x2ea>
 80020e4:	4b64      	ldr	r3, [pc, #400]	; (8002278 <HAL_RCC_OscConfig+0x470>)
 80020e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e8:	4a63      	ldr	r2, [pc, #396]	; (8002278 <HAL_RCC_OscConfig+0x470>)
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	6713      	str	r3, [r2, #112]	; 0x70
 80020f0:	e01c      	b.n	800212c <HAL_RCC_OscConfig+0x324>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b05      	cmp	r3, #5
 80020f8:	d10c      	bne.n	8002114 <HAL_RCC_OscConfig+0x30c>
 80020fa:	4b5f      	ldr	r3, [pc, #380]	; (8002278 <HAL_RCC_OscConfig+0x470>)
 80020fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fe:	4a5e      	ldr	r2, [pc, #376]	; (8002278 <HAL_RCC_OscConfig+0x470>)
 8002100:	f043 0304 	orr.w	r3, r3, #4
 8002104:	6713      	str	r3, [r2, #112]	; 0x70
 8002106:	4b5c      	ldr	r3, [pc, #368]	; (8002278 <HAL_RCC_OscConfig+0x470>)
 8002108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210a:	4a5b      	ldr	r2, [pc, #364]	; (8002278 <HAL_RCC_OscConfig+0x470>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	6713      	str	r3, [r2, #112]	; 0x70
 8002112:	e00b      	b.n	800212c <HAL_RCC_OscConfig+0x324>
 8002114:	4b58      	ldr	r3, [pc, #352]	; (8002278 <HAL_RCC_OscConfig+0x470>)
 8002116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002118:	4a57      	ldr	r2, [pc, #348]	; (8002278 <HAL_RCC_OscConfig+0x470>)
 800211a:	f023 0301 	bic.w	r3, r3, #1
 800211e:	6713      	str	r3, [r2, #112]	; 0x70
 8002120:	4b55      	ldr	r3, [pc, #340]	; (8002278 <HAL_RCC_OscConfig+0x470>)
 8002122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002124:	4a54      	ldr	r2, [pc, #336]	; (8002278 <HAL_RCC_OscConfig+0x470>)
 8002126:	f023 0304 	bic.w	r3, r3, #4
 800212a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d015      	beq.n	8002160 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002134:	f7fe ff68 	bl	8001008 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800213a:	e00a      	b.n	8002152 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800213c:	f7fe ff64 	bl	8001008 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	f241 3288 	movw	r2, #5000	; 0x1388
 800214a:	4293      	cmp	r3, r2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e0cb      	b.n	80022ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002152:	4b49      	ldr	r3, [pc, #292]	; (8002278 <HAL_RCC_OscConfig+0x470>)
 8002154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0ee      	beq.n	800213c <HAL_RCC_OscConfig+0x334>
 800215e:	e014      	b.n	800218a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002160:	f7fe ff52 	bl	8001008 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002166:	e00a      	b.n	800217e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002168:	f7fe ff4e 	bl	8001008 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	f241 3288 	movw	r2, #5000	; 0x1388
 8002176:	4293      	cmp	r3, r2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e0b5      	b.n	80022ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800217e:	4b3e      	ldr	r3, [pc, #248]	; (8002278 <HAL_RCC_OscConfig+0x470>)
 8002180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1ee      	bne.n	8002168 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800218a:	7dfb      	ldrb	r3, [r7, #23]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d105      	bne.n	800219c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002190:	4b39      	ldr	r3, [pc, #228]	; (8002278 <HAL_RCC_OscConfig+0x470>)
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	4a38      	ldr	r2, [pc, #224]	; (8002278 <HAL_RCC_OscConfig+0x470>)
 8002196:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800219a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 80a1 	beq.w	80022e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021a6:	4b34      	ldr	r3, [pc, #208]	; (8002278 <HAL_RCC_OscConfig+0x470>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 030c 	and.w	r3, r3, #12
 80021ae:	2b08      	cmp	r3, #8
 80021b0:	d05c      	beq.n	800226c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d141      	bne.n	800223e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ba:	4b31      	ldr	r3, [pc, #196]	; (8002280 <HAL_RCC_OscConfig+0x478>)
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c0:	f7fe ff22 	bl	8001008 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021c8:	f7fe ff1e 	bl	8001008 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e087      	b.n	80022ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021da:	4b27      	ldr	r3, [pc, #156]	; (8002278 <HAL_RCC_OscConfig+0x470>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69da      	ldr	r2, [r3, #28]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	019b      	lsls	r3, r3, #6
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fc:	085b      	lsrs	r3, r3, #1
 80021fe:	3b01      	subs	r3, #1
 8002200:	041b      	lsls	r3, r3, #16
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002208:	061b      	lsls	r3, r3, #24
 800220a:	491b      	ldr	r1, [pc, #108]	; (8002278 <HAL_RCC_OscConfig+0x470>)
 800220c:	4313      	orrs	r3, r2
 800220e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002210:	4b1b      	ldr	r3, [pc, #108]	; (8002280 <HAL_RCC_OscConfig+0x478>)
 8002212:	2201      	movs	r2, #1
 8002214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002216:	f7fe fef7 	bl	8001008 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800221e:	f7fe fef3 	bl	8001008 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e05c      	b.n	80022ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002230:	4b11      	ldr	r3, [pc, #68]	; (8002278 <HAL_RCC_OscConfig+0x470>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f0      	beq.n	800221e <HAL_RCC_OscConfig+0x416>
 800223c:	e054      	b.n	80022e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223e:	4b10      	ldr	r3, [pc, #64]	; (8002280 <HAL_RCC_OscConfig+0x478>)
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002244:	f7fe fee0 	bl	8001008 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800224c:	f7fe fedc 	bl	8001008 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e045      	b.n	80022ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225e:	4b06      	ldr	r3, [pc, #24]	; (8002278 <HAL_RCC_OscConfig+0x470>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x444>
 800226a:	e03d      	b.n	80022e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d107      	bne.n	8002284 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e038      	b.n	80022ea <HAL_RCC_OscConfig+0x4e2>
 8002278:	40023800 	.word	0x40023800
 800227c:	40007000 	.word	0x40007000
 8002280:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002284:	4b1b      	ldr	r3, [pc, #108]	; (80022f4 <HAL_RCC_OscConfig+0x4ec>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d028      	beq.n	80022e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800229c:	429a      	cmp	r2, r3
 800229e:	d121      	bne.n	80022e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d11a      	bne.n	80022e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022b4:	4013      	ands	r3, r2
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022bc:	4293      	cmp	r3, r2
 80022be:	d111      	bne.n	80022e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ca:	085b      	lsrs	r3, r3, #1
 80022cc:	3b01      	subs	r3, #1
 80022ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d107      	bne.n	80022e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d001      	beq.n	80022e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e000      	b.n	80022ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40023800 	.word	0x40023800

080022f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e0cc      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800230c:	4b68      	ldr	r3, [pc, #416]	; (80024b0 <HAL_RCC_ClockConfig+0x1b8>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d90c      	bls.n	8002334 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231a:	4b65      	ldr	r3, [pc, #404]	; (80024b0 <HAL_RCC_ClockConfig+0x1b8>)
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002322:	4b63      	ldr	r3, [pc, #396]	; (80024b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	429a      	cmp	r2, r3
 800232e:	d001      	beq.n	8002334 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e0b8      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d020      	beq.n	8002382 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b00      	cmp	r3, #0
 800234a:	d005      	beq.n	8002358 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800234c:	4b59      	ldr	r3, [pc, #356]	; (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	4a58      	ldr	r2, [pc, #352]	; (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002352:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002356:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0308 	and.w	r3, r3, #8
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002364:	4b53      	ldr	r3, [pc, #332]	; (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	4a52      	ldr	r2, [pc, #328]	; (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 800236a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800236e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002370:	4b50      	ldr	r3, [pc, #320]	; (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	494d      	ldr	r1, [pc, #308]	; (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 800237e:	4313      	orrs	r3, r2
 8002380:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d044      	beq.n	8002418 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d107      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002396:	4b47      	ldr	r3, [pc, #284]	; (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d119      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e07f      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d003      	beq.n	80023b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	d107      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b6:	4b3f      	ldr	r3, [pc, #252]	; (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d109      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e06f      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c6:	4b3b      	ldr	r3, [pc, #236]	; (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e067      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023d6:	4b37      	ldr	r3, [pc, #220]	; (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f023 0203 	bic.w	r2, r3, #3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	4934      	ldr	r1, [pc, #208]	; (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023e8:	f7fe fe0e 	bl	8001008 <HAL_GetTick>
 80023ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ee:	e00a      	b.n	8002406 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f0:	f7fe fe0a 	bl	8001008 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fe:	4293      	cmp	r3, r2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e04f      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002406:	4b2b      	ldr	r3, [pc, #172]	; (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 020c 	and.w	r2, r3, #12
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	429a      	cmp	r2, r3
 8002416:	d1eb      	bne.n	80023f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002418:	4b25      	ldr	r3, [pc, #148]	; (80024b0 <HAL_RCC_ClockConfig+0x1b8>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	429a      	cmp	r2, r3
 8002424:	d20c      	bcs.n	8002440 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002426:	4b22      	ldr	r3, [pc, #136]	; (80024b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800242e:	4b20      	ldr	r3, [pc, #128]	; (80024b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	d001      	beq.n	8002440 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e032      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	d008      	beq.n	800245e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800244c:	4b19      	ldr	r3, [pc, #100]	; (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	4916      	ldr	r1, [pc, #88]	; (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 800245a:	4313      	orrs	r3, r2
 800245c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d009      	beq.n	800247e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800246a:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	490e      	ldr	r1, [pc, #56]	; (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 800247a:	4313      	orrs	r3, r2
 800247c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800247e:	f000 f821 	bl	80024c4 <HAL_RCC_GetSysClockFreq>
 8002482:	4602      	mov	r2, r0
 8002484:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	091b      	lsrs	r3, r3, #4
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	490a      	ldr	r1, [pc, #40]	; (80024b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002490:	5ccb      	ldrb	r3, [r1, r3]
 8002492:	fa22 f303 	lsr.w	r3, r2, r3
 8002496:	4a09      	ldr	r2, [pc, #36]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800249a:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe fd6e 	bl	8000f80 <HAL_InitTick>

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40023c00 	.word	0x40023c00
 80024b4:	40023800 	.word	0x40023800
 80024b8:	08003648 	.word	0x08003648
 80024bc:	20000010 	.word	0x20000010
 80024c0:	20000014 	.word	0x20000014

080024c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024c8:	b094      	sub	sp, #80	; 0x50
 80024ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	647b      	str	r3, [r7, #68]	; 0x44
 80024d0:	2300      	movs	r3, #0
 80024d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024d4:	2300      	movs	r3, #0
 80024d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024dc:	4b79      	ldr	r3, [pc, #484]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 030c 	and.w	r3, r3, #12
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	d00d      	beq.n	8002504 <HAL_RCC_GetSysClockFreq+0x40>
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	f200 80e1 	bhi.w	80026b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d002      	beq.n	80024f8 <HAL_RCC_GetSysClockFreq+0x34>
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d003      	beq.n	80024fe <HAL_RCC_GetSysClockFreq+0x3a>
 80024f6:	e0db      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024f8:	4b73      	ldr	r3, [pc, #460]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80024fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80024fc:	e0db      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024fe:	4b73      	ldr	r3, [pc, #460]	; (80026cc <HAL_RCC_GetSysClockFreq+0x208>)
 8002500:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002502:	e0d8      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002504:	4b6f      	ldr	r3, [pc, #444]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800250c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800250e:	4b6d      	ldr	r3, [pc, #436]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d063      	beq.n	80025e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800251a:	4b6a      	ldr	r3, [pc, #424]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	099b      	lsrs	r3, r3, #6
 8002520:	2200      	movs	r2, #0
 8002522:	63bb      	str	r3, [r7, #56]	; 0x38
 8002524:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800252c:	633b      	str	r3, [r7, #48]	; 0x30
 800252e:	2300      	movs	r3, #0
 8002530:	637b      	str	r3, [r7, #52]	; 0x34
 8002532:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002536:	4622      	mov	r2, r4
 8002538:	462b      	mov	r3, r5
 800253a:	f04f 0000 	mov.w	r0, #0
 800253e:	f04f 0100 	mov.w	r1, #0
 8002542:	0159      	lsls	r1, r3, #5
 8002544:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002548:	0150      	lsls	r0, r2, #5
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4621      	mov	r1, r4
 8002550:	1a51      	subs	r1, r2, r1
 8002552:	6139      	str	r1, [r7, #16]
 8002554:	4629      	mov	r1, r5
 8002556:	eb63 0301 	sbc.w	r3, r3, r1
 800255a:	617b      	str	r3, [r7, #20]
 800255c:	f04f 0200 	mov.w	r2, #0
 8002560:	f04f 0300 	mov.w	r3, #0
 8002564:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002568:	4659      	mov	r1, fp
 800256a:	018b      	lsls	r3, r1, #6
 800256c:	4651      	mov	r1, sl
 800256e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002572:	4651      	mov	r1, sl
 8002574:	018a      	lsls	r2, r1, #6
 8002576:	4651      	mov	r1, sl
 8002578:	ebb2 0801 	subs.w	r8, r2, r1
 800257c:	4659      	mov	r1, fp
 800257e:	eb63 0901 	sbc.w	r9, r3, r1
 8002582:	f04f 0200 	mov.w	r2, #0
 8002586:	f04f 0300 	mov.w	r3, #0
 800258a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800258e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002592:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002596:	4690      	mov	r8, r2
 8002598:	4699      	mov	r9, r3
 800259a:	4623      	mov	r3, r4
 800259c:	eb18 0303 	adds.w	r3, r8, r3
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	462b      	mov	r3, r5
 80025a4:	eb49 0303 	adc.w	r3, r9, r3
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	f04f 0300 	mov.w	r3, #0
 80025b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025b6:	4629      	mov	r1, r5
 80025b8:	024b      	lsls	r3, r1, #9
 80025ba:	4621      	mov	r1, r4
 80025bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025c0:	4621      	mov	r1, r4
 80025c2:	024a      	lsls	r2, r1, #9
 80025c4:	4610      	mov	r0, r2
 80025c6:	4619      	mov	r1, r3
 80025c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ca:	2200      	movs	r2, #0
 80025cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80025ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025d4:	f7fd fe54 	bl	8000280 <__aeabi_uldivmod>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4613      	mov	r3, r2
 80025de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025e0:	e058      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025e2:	4b38      	ldr	r3, [pc, #224]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	099b      	lsrs	r3, r3, #6
 80025e8:	2200      	movs	r2, #0
 80025ea:	4618      	mov	r0, r3
 80025ec:	4611      	mov	r1, r2
 80025ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025f2:	623b      	str	r3, [r7, #32]
 80025f4:	2300      	movs	r3, #0
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
 80025f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025fc:	4642      	mov	r2, r8
 80025fe:	464b      	mov	r3, r9
 8002600:	f04f 0000 	mov.w	r0, #0
 8002604:	f04f 0100 	mov.w	r1, #0
 8002608:	0159      	lsls	r1, r3, #5
 800260a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800260e:	0150      	lsls	r0, r2, #5
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	4641      	mov	r1, r8
 8002616:	ebb2 0a01 	subs.w	sl, r2, r1
 800261a:	4649      	mov	r1, r9
 800261c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	f04f 0300 	mov.w	r3, #0
 8002628:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800262c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002630:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002634:	ebb2 040a 	subs.w	r4, r2, sl
 8002638:	eb63 050b 	sbc.w	r5, r3, fp
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	00eb      	lsls	r3, r5, #3
 8002646:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800264a:	00e2      	lsls	r2, r4, #3
 800264c:	4614      	mov	r4, r2
 800264e:	461d      	mov	r5, r3
 8002650:	4643      	mov	r3, r8
 8002652:	18e3      	adds	r3, r4, r3
 8002654:	603b      	str	r3, [r7, #0]
 8002656:	464b      	mov	r3, r9
 8002658:	eb45 0303 	adc.w	r3, r5, r3
 800265c:	607b      	str	r3, [r7, #4]
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	f04f 0300 	mov.w	r3, #0
 8002666:	e9d7 4500 	ldrd	r4, r5, [r7]
 800266a:	4629      	mov	r1, r5
 800266c:	028b      	lsls	r3, r1, #10
 800266e:	4621      	mov	r1, r4
 8002670:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002674:	4621      	mov	r1, r4
 8002676:	028a      	lsls	r2, r1, #10
 8002678:	4610      	mov	r0, r2
 800267a:	4619      	mov	r1, r3
 800267c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800267e:	2200      	movs	r2, #0
 8002680:	61bb      	str	r3, [r7, #24]
 8002682:	61fa      	str	r2, [r7, #28]
 8002684:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002688:	f7fd fdfa 	bl	8000280 <__aeabi_uldivmod>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4613      	mov	r3, r2
 8002692:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002694:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	0c1b      	lsrs	r3, r3, #16
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	3301      	adds	r3, #1
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80026a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026ae:	e002      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026b0:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80026b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3750      	adds	r7, #80	; 0x50
 80026bc:	46bd      	mov	sp, r7
 80026be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800
 80026c8:	00f42400 	.word	0x00f42400
 80026cc:	007a1200 	.word	0x007a1200

080026d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026d4:	4b03      	ldr	r3, [pc, #12]	; (80026e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80026d6:	681b      	ldr	r3, [r3, #0]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	20000010 	.word	0x20000010

080026e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026ec:	f7ff fff0 	bl	80026d0 <HAL_RCC_GetHCLKFreq>
 80026f0:	4602      	mov	r2, r0
 80026f2:	4b05      	ldr	r3, [pc, #20]	; (8002708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	0a9b      	lsrs	r3, r3, #10
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	4903      	ldr	r1, [pc, #12]	; (800270c <HAL_RCC_GetPCLK1Freq+0x24>)
 80026fe:	5ccb      	ldrb	r3, [r1, r3]
 8002700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002704:	4618      	mov	r0, r3
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40023800 	.word	0x40023800
 800270c:	08003658 	.word	0x08003658

08002710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002714:	f7ff ffdc 	bl	80026d0 <HAL_RCC_GetHCLKFreq>
 8002718:	4602      	mov	r2, r0
 800271a:	4b05      	ldr	r3, [pc, #20]	; (8002730 <HAL_RCC_GetPCLK2Freq+0x20>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	0b5b      	lsrs	r3, r3, #13
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	4903      	ldr	r1, [pc, #12]	; (8002734 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002726:	5ccb      	ldrb	r3, [r1, r3]
 8002728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800272c:	4618      	mov	r0, r3
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40023800 	.word	0x40023800
 8002734:	08003658 	.word	0x08003658

08002738 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e03f      	b.n	80027ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d106      	bne.n	8002764 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7fe fb08 	bl	8000d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2224      	movs	r2, #36	; 0x24
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800277a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f829 	bl	80027d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002790:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	695a      	ldr	r2, [r3, #20]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2220      	movs	r2, #32
 80027bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2220      	movs	r2, #32
 80027c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027d8:	b0c0      	sub	sp, #256	; 0x100
 80027da:	af00      	add	r7, sp, #0
 80027dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80027ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027f0:	68d9      	ldr	r1, [r3, #12]
 80027f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	ea40 0301 	orr.w	r3, r0, r1
 80027fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80027fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	431a      	orrs	r2, r3
 800280c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	431a      	orrs	r2, r3
 8002814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	4313      	orrs	r3, r2
 800281c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800282c:	f021 010c 	bic.w	r1, r1, #12
 8002830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800283a:	430b      	orrs	r3, r1
 800283c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800283e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800284a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800284e:	6999      	ldr	r1, [r3, #24]
 8002850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	ea40 0301 	orr.w	r3, r0, r1
 800285a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800285c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	4b8f      	ldr	r3, [pc, #572]	; (8002aa0 <UART_SetConfig+0x2cc>)
 8002864:	429a      	cmp	r2, r3
 8002866:	d005      	beq.n	8002874 <UART_SetConfig+0xa0>
 8002868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	4b8d      	ldr	r3, [pc, #564]	; (8002aa4 <UART_SetConfig+0x2d0>)
 8002870:	429a      	cmp	r2, r3
 8002872:	d104      	bne.n	800287e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002874:	f7ff ff4c 	bl	8002710 <HAL_RCC_GetPCLK2Freq>
 8002878:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800287c:	e003      	b.n	8002886 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800287e:	f7ff ff33 	bl	80026e8 <HAL_RCC_GetPCLK1Freq>
 8002882:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002890:	f040 810c 	bne.w	8002aac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002894:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002898:	2200      	movs	r2, #0
 800289a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800289e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80028a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80028a6:	4622      	mov	r2, r4
 80028a8:	462b      	mov	r3, r5
 80028aa:	1891      	adds	r1, r2, r2
 80028ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80028ae:	415b      	adcs	r3, r3
 80028b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80028b6:	4621      	mov	r1, r4
 80028b8:	eb12 0801 	adds.w	r8, r2, r1
 80028bc:	4629      	mov	r1, r5
 80028be:	eb43 0901 	adc.w	r9, r3, r1
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	f04f 0300 	mov.w	r3, #0
 80028ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028d6:	4690      	mov	r8, r2
 80028d8:	4699      	mov	r9, r3
 80028da:	4623      	mov	r3, r4
 80028dc:	eb18 0303 	adds.w	r3, r8, r3
 80028e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80028e4:	462b      	mov	r3, r5
 80028e6:	eb49 0303 	adc.w	r3, r9, r3
 80028ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80028ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80028fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80028fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002902:	460b      	mov	r3, r1
 8002904:	18db      	adds	r3, r3, r3
 8002906:	653b      	str	r3, [r7, #80]	; 0x50
 8002908:	4613      	mov	r3, r2
 800290a:	eb42 0303 	adc.w	r3, r2, r3
 800290e:	657b      	str	r3, [r7, #84]	; 0x54
 8002910:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002914:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002918:	f7fd fcb2 	bl	8000280 <__aeabi_uldivmod>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4b61      	ldr	r3, [pc, #388]	; (8002aa8 <UART_SetConfig+0x2d4>)
 8002922:	fba3 2302 	umull	r2, r3, r3, r2
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	011c      	lsls	r4, r3, #4
 800292a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800292e:	2200      	movs	r2, #0
 8002930:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002934:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002938:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800293c:	4642      	mov	r2, r8
 800293e:	464b      	mov	r3, r9
 8002940:	1891      	adds	r1, r2, r2
 8002942:	64b9      	str	r1, [r7, #72]	; 0x48
 8002944:	415b      	adcs	r3, r3
 8002946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002948:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800294c:	4641      	mov	r1, r8
 800294e:	eb12 0a01 	adds.w	sl, r2, r1
 8002952:	4649      	mov	r1, r9
 8002954:	eb43 0b01 	adc.w	fp, r3, r1
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	f04f 0300 	mov.w	r3, #0
 8002960:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002964:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002968:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800296c:	4692      	mov	sl, r2
 800296e:	469b      	mov	fp, r3
 8002970:	4643      	mov	r3, r8
 8002972:	eb1a 0303 	adds.w	r3, sl, r3
 8002976:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800297a:	464b      	mov	r3, r9
 800297c:	eb4b 0303 	adc.w	r3, fp, r3
 8002980:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002990:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002994:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002998:	460b      	mov	r3, r1
 800299a:	18db      	adds	r3, r3, r3
 800299c:	643b      	str	r3, [r7, #64]	; 0x40
 800299e:	4613      	mov	r3, r2
 80029a0:	eb42 0303 	adc.w	r3, r2, r3
 80029a4:	647b      	str	r3, [r7, #68]	; 0x44
 80029a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80029aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80029ae:	f7fd fc67 	bl	8000280 <__aeabi_uldivmod>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	4611      	mov	r1, r2
 80029b8:	4b3b      	ldr	r3, [pc, #236]	; (8002aa8 <UART_SetConfig+0x2d4>)
 80029ba:	fba3 2301 	umull	r2, r3, r3, r1
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	2264      	movs	r2, #100	; 0x64
 80029c2:	fb02 f303 	mul.w	r3, r2, r3
 80029c6:	1acb      	subs	r3, r1, r3
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80029ce:	4b36      	ldr	r3, [pc, #216]	; (8002aa8 <UART_SetConfig+0x2d4>)
 80029d0:	fba3 2302 	umull	r2, r3, r3, r2
 80029d4:	095b      	lsrs	r3, r3, #5
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029dc:	441c      	add	r4, r3
 80029de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029e2:	2200      	movs	r2, #0
 80029e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80029ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80029f0:	4642      	mov	r2, r8
 80029f2:	464b      	mov	r3, r9
 80029f4:	1891      	adds	r1, r2, r2
 80029f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80029f8:	415b      	adcs	r3, r3
 80029fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a00:	4641      	mov	r1, r8
 8002a02:	1851      	adds	r1, r2, r1
 8002a04:	6339      	str	r1, [r7, #48]	; 0x30
 8002a06:	4649      	mov	r1, r9
 8002a08:	414b      	adcs	r3, r1
 8002a0a:	637b      	str	r3, [r7, #52]	; 0x34
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002a18:	4659      	mov	r1, fp
 8002a1a:	00cb      	lsls	r3, r1, #3
 8002a1c:	4651      	mov	r1, sl
 8002a1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a22:	4651      	mov	r1, sl
 8002a24:	00ca      	lsls	r2, r1, #3
 8002a26:	4610      	mov	r0, r2
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	4642      	mov	r2, r8
 8002a2e:	189b      	adds	r3, r3, r2
 8002a30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a34:	464b      	mov	r3, r9
 8002a36:	460a      	mov	r2, r1
 8002a38:	eb42 0303 	adc.w	r3, r2, r3
 8002a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002a4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002a50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002a54:	460b      	mov	r3, r1
 8002a56:	18db      	adds	r3, r3, r3
 8002a58:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	eb42 0303 	adc.w	r3, r2, r3
 8002a60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002a6a:	f7fd fc09 	bl	8000280 <__aeabi_uldivmod>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	4b0d      	ldr	r3, [pc, #52]	; (8002aa8 <UART_SetConfig+0x2d4>)
 8002a74:	fba3 1302 	umull	r1, r3, r3, r2
 8002a78:	095b      	lsrs	r3, r3, #5
 8002a7a:	2164      	movs	r1, #100	; 0x64
 8002a7c:	fb01 f303 	mul.w	r3, r1, r3
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	3332      	adds	r3, #50	; 0x32
 8002a86:	4a08      	ldr	r2, [pc, #32]	; (8002aa8 <UART_SetConfig+0x2d4>)
 8002a88:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8c:	095b      	lsrs	r3, r3, #5
 8002a8e:	f003 0207 	and.w	r2, r3, #7
 8002a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4422      	add	r2, r4
 8002a9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a9c:	e106      	b.n	8002cac <UART_SetConfig+0x4d8>
 8002a9e:	bf00      	nop
 8002aa0:	40011000 	.word	0x40011000
 8002aa4:	40011400 	.word	0x40011400
 8002aa8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002aac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002ab6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002aba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002abe:	4642      	mov	r2, r8
 8002ac0:	464b      	mov	r3, r9
 8002ac2:	1891      	adds	r1, r2, r2
 8002ac4:	6239      	str	r1, [r7, #32]
 8002ac6:	415b      	adcs	r3, r3
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ace:	4641      	mov	r1, r8
 8002ad0:	1854      	adds	r4, r2, r1
 8002ad2:	4649      	mov	r1, r9
 8002ad4:	eb43 0501 	adc.w	r5, r3, r1
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	00eb      	lsls	r3, r5, #3
 8002ae2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ae6:	00e2      	lsls	r2, r4, #3
 8002ae8:	4614      	mov	r4, r2
 8002aea:	461d      	mov	r5, r3
 8002aec:	4643      	mov	r3, r8
 8002aee:	18e3      	adds	r3, r4, r3
 8002af0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002af4:	464b      	mov	r3, r9
 8002af6:	eb45 0303 	adc.w	r3, r5, r3
 8002afa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b0e:	f04f 0200 	mov.w	r2, #0
 8002b12:	f04f 0300 	mov.w	r3, #0
 8002b16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002b1a:	4629      	mov	r1, r5
 8002b1c:	008b      	lsls	r3, r1, #2
 8002b1e:	4621      	mov	r1, r4
 8002b20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b24:	4621      	mov	r1, r4
 8002b26:	008a      	lsls	r2, r1, #2
 8002b28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002b2c:	f7fd fba8 	bl	8000280 <__aeabi_uldivmod>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	4b60      	ldr	r3, [pc, #384]	; (8002cb8 <UART_SetConfig+0x4e4>)
 8002b36:	fba3 2302 	umull	r2, r3, r3, r2
 8002b3a:	095b      	lsrs	r3, r3, #5
 8002b3c:	011c      	lsls	r4, r3, #4
 8002b3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b42:	2200      	movs	r2, #0
 8002b44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002b4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002b50:	4642      	mov	r2, r8
 8002b52:	464b      	mov	r3, r9
 8002b54:	1891      	adds	r1, r2, r2
 8002b56:	61b9      	str	r1, [r7, #24]
 8002b58:	415b      	adcs	r3, r3
 8002b5a:	61fb      	str	r3, [r7, #28]
 8002b5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b60:	4641      	mov	r1, r8
 8002b62:	1851      	adds	r1, r2, r1
 8002b64:	6139      	str	r1, [r7, #16]
 8002b66:	4649      	mov	r1, r9
 8002b68:	414b      	adcs	r3, r1
 8002b6a:	617b      	str	r3, [r7, #20]
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	f04f 0300 	mov.w	r3, #0
 8002b74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b78:	4659      	mov	r1, fp
 8002b7a:	00cb      	lsls	r3, r1, #3
 8002b7c:	4651      	mov	r1, sl
 8002b7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b82:	4651      	mov	r1, sl
 8002b84:	00ca      	lsls	r2, r1, #3
 8002b86:	4610      	mov	r0, r2
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	4642      	mov	r2, r8
 8002b8e:	189b      	adds	r3, r3, r2
 8002b90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b94:	464b      	mov	r3, r9
 8002b96:	460a      	mov	r2, r1
 8002b98:	eb42 0303 	adc.w	r3, r2, r3
 8002b9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002baa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002bb8:	4649      	mov	r1, r9
 8002bba:	008b      	lsls	r3, r1, #2
 8002bbc:	4641      	mov	r1, r8
 8002bbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bc2:	4641      	mov	r1, r8
 8002bc4:	008a      	lsls	r2, r1, #2
 8002bc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002bca:	f7fd fb59 	bl	8000280 <__aeabi_uldivmod>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	4b38      	ldr	r3, [pc, #224]	; (8002cb8 <UART_SetConfig+0x4e4>)
 8002bd6:	fba3 2301 	umull	r2, r3, r3, r1
 8002bda:	095b      	lsrs	r3, r3, #5
 8002bdc:	2264      	movs	r2, #100	; 0x64
 8002bde:	fb02 f303 	mul.w	r3, r2, r3
 8002be2:	1acb      	subs	r3, r1, r3
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	3332      	adds	r3, #50	; 0x32
 8002be8:	4a33      	ldr	r2, [pc, #204]	; (8002cb8 <UART_SetConfig+0x4e4>)
 8002bea:	fba2 2303 	umull	r2, r3, r2, r3
 8002bee:	095b      	lsrs	r3, r3, #5
 8002bf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bf4:	441c      	add	r4, r3
 8002bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	673b      	str	r3, [r7, #112]	; 0x70
 8002bfe:	677a      	str	r2, [r7, #116]	; 0x74
 8002c00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002c04:	4642      	mov	r2, r8
 8002c06:	464b      	mov	r3, r9
 8002c08:	1891      	adds	r1, r2, r2
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	415b      	adcs	r3, r3
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c14:	4641      	mov	r1, r8
 8002c16:	1851      	adds	r1, r2, r1
 8002c18:	6039      	str	r1, [r7, #0]
 8002c1a:	4649      	mov	r1, r9
 8002c1c:	414b      	adcs	r3, r1
 8002c1e:	607b      	str	r3, [r7, #4]
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c2c:	4659      	mov	r1, fp
 8002c2e:	00cb      	lsls	r3, r1, #3
 8002c30:	4651      	mov	r1, sl
 8002c32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c36:	4651      	mov	r1, sl
 8002c38:	00ca      	lsls	r2, r1, #3
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4603      	mov	r3, r0
 8002c40:	4642      	mov	r2, r8
 8002c42:	189b      	adds	r3, r3, r2
 8002c44:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c46:	464b      	mov	r3, r9
 8002c48:	460a      	mov	r2, r1
 8002c4a:	eb42 0303 	adc.w	r3, r2, r3
 8002c4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	663b      	str	r3, [r7, #96]	; 0x60
 8002c5a:	667a      	str	r2, [r7, #100]	; 0x64
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	f04f 0300 	mov.w	r3, #0
 8002c64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002c68:	4649      	mov	r1, r9
 8002c6a:	008b      	lsls	r3, r1, #2
 8002c6c:	4641      	mov	r1, r8
 8002c6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c72:	4641      	mov	r1, r8
 8002c74:	008a      	lsls	r2, r1, #2
 8002c76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002c7a:	f7fd fb01 	bl	8000280 <__aeabi_uldivmod>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <UART_SetConfig+0x4e4>)
 8002c84:	fba3 1302 	umull	r1, r3, r3, r2
 8002c88:	095b      	lsrs	r3, r3, #5
 8002c8a:	2164      	movs	r1, #100	; 0x64
 8002c8c:	fb01 f303 	mul.w	r3, r1, r3
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	011b      	lsls	r3, r3, #4
 8002c94:	3332      	adds	r3, #50	; 0x32
 8002c96:	4a08      	ldr	r2, [pc, #32]	; (8002cb8 <UART_SetConfig+0x4e4>)
 8002c98:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9c:	095b      	lsrs	r3, r3, #5
 8002c9e:	f003 020f 	and.w	r2, r3, #15
 8002ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4422      	add	r2, r4
 8002caa:	609a      	str	r2, [r3, #8]
}
 8002cac:	bf00      	nop
 8002cae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cb8:	51eb851f 	.word	0x51eb851f

08002cbc <siprintf>:
 8002cbc:	b40e      	push	{r1, r2, r3}
 8002cbe:	b500      	push	{lr}
 8002cc0:	b09c      	sub	sp, #112	; 0x70
 8002cc2:	ab1d      	add	r3, sp, #116	; 0x74
 8002cc4:	9002      	str	r0, [sp, #8]
 8002cc6:	9006      	str	r0, [sp, #24]
 8002cc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002ccc:	4809      	ldr	r0, [pc, #36]	; (8002cf4 <siprintf+0x38>)
 8002cce:	9107      	str	r1, [sp, #28]
 8002cd0:	9104      	str	r1, [sp, #16]
 8002cd2:	4909      	ldr	r1, [pc, #36]	; (8002cf8 <siprintf+0x3c>)
 8002cd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8002cd8:	9105      	str	r1, [sp, #20]
 8002cda:	6800      	ldr	r0, [r0, #0]
 8002cdc:	9301      	str	r3, [sp, #4]
 8002cde:	a902      	add	r1, sp, #8
 8002ce0:	f000 f992 	bl	8003008 <_svfiprintf_r>
 8002ce4:	9b02      	ldr	r3, [sp, #8]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	701a      	strb	r2, [r3, #0]
 8002cea:	b01c      	add	sp, #112	; 0x70
 8002cec:	f85d eb04 	ldr.w	lr, [sp], #4
 8002cf0:	b003      	add	sp, #12
 8002cf2:	4770      	bx	lr
 8002cf4:	20000068 	.word	0x20000068
 8002cf8:	ffff0208 	.word	0xffff0208

08002cfc <memset>:
 8002cfc:	4402      	add	r2, r0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d100      	bne.n	8002d06 <memset+0xa>
 8002d04:	4770      	bx	lr
 8002d06:	f803 1b01 	strb.w	r1, [r3], #1
 8002d0a:	e7f9      	b.n	8002d00 <memset+0x4>

08002d0c <__errno>:
 8002d0c:	4b01      	ldr	r3, [pc, #4]	; (8002d14 <__errno+0x8>)
 8002d0e:	6818      	ldr	r0, [r3, #0]
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	20000068 	.word	0x20000068

08002d18 <__libc_init_array>:
 8002d18:	b570      	push	{r4, r5, r6, lr}
 8002d1a:	4d0d      	ldr	r5, [pc, #52]	; (8002d50 <__libc_init_array+0x38>)
 8002d1c:	4c0d      	ldr	r4, [pc, #52]	; (8002d54 <__libc_init_array+0x3c>)
 8002d1e:	1b64      	subs	r4, r4, r5
 8002d20:	10a4      	asrs	r4, r4, #2
 8002d22:	2600      	movs	r6, #0
 8002d24:	42a6      	cmp	r6, r4
 8002d26:	d109      	bne.n	8002d3c <__libc_init_array+0x24>
 8002d28:	4d0b      	ldr	r5, [pc, #44]	; (8002d58 <__libc_init_array+0x40>)
 8002d2a:	4c0c      	ldr	r4, [pc, #48]	; (8002d5c <__libc_init_array+0x44>)
 8002d2c:	f000 fc6a 	bl	8003604 <_init>
 8002d30:	1b64      	subs	r4, r4, r5
 8002d32:	10a4      	asrs	r4, r4, #2
 8002d34:	2600      	movs	r6, #0
 8002d36:	42a6      	cmp	r6, r4
 8002d38:	d105      	bne.n	8002d46 <__libc_init_array+0x2e>
 8002d3a:	bd70      	pop	{r4, r5, r6, pc}
 8002d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d40:	4798      	blx	r3
 8002d42:	3601      	adds	r6, #1
 8002d44:	e7ee      	b.n	8002d24 <__libc_init_array+0xc>
 8002d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d4a:	4798      	blx	r3
 8002d4c:	3601      	adds	r6, #1
 8002d4e:	e7f2      	b.n	8002d36 <__libc_init_array+0x1e>
 8002d50:	0800369c 	.word	0x0800369c
 8002d54:	0800369c 	.word	0x0800369c
 8002d58:	0800369c 	.word	0x0800369c
 8002d5c:	080036a0 	.word	0x080036a0

08002d60 <__retarget_lock_acquire_recursive>:
 8002d60:	4770      	bx	lr

08002d62 <__retarget_lock_release_recursive>:
 8002d62:	4770      	bx	lr

08002d64 <_free_r>:
 8002d64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d66:	2900      	cmp	r1, #0
 8002d68:	d044      	beq.n	8002df4 <_free_r+0x90>
 8002d6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d6e:	9001      	str	r0, [sp, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f1a1 0404 	sub.w	r4, r1, #4
 8002d76:	bfb8      	it	lt
 8002d78:	18e4      	addlt	r4, r4, r3
 8002d7a:	f000 f8df 	bl	8002f3c <__malloc_lock>
 8002d7e:	4a1e      	ldr	r2, [pc, #120]	; (8002df8 <_free_r+0x94>)
 8002d80:	9801      	ldr	r0, [sp, #4]
 8002d82:	6813      	ldr	r3, [r2, #0]
 8002d84:	b933      	cbnz	r3, 8002d94 <_free_r+0x30>
 8002d86:	6063      	str	r3, [r4, #4]
 8002d88:	6014      	str	r4, [r2, #0]
 8002d8a:	b003      	add	sp, #12
 8002d8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d90:	f000 b8da 	b.w	8002f48 <__malloc_unlock>
 8002d94:	42a3      	cmp	r3, r4
 8002d96:	d908      	bls.n	8002daa <_free_r+0x46>
 8002d98:	6825      	ldr	r5, [r4, #0]
 8002d9a:	1961      	adds	r1, r4, r5
 8002d9c:	428b      	cmp	r3, r1
 8002d9e:	bf01      	itttt	eq
 8002da0:	6819      	ldreq	r1, [r3, #0]
 8002da2:	685b      	ldreq	r3, [r3, #4]
 8002da4:	1949      	addeq	r1, r1, r5
 8002da6:	6021      	streq	r1, [r4, #0]
 8002da8:	e7ed      	b.n	8002d86 <_free_r+0x22>
 8002daa:	461a      	mov	r2, r3
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	b10b      	cbz	r3, 8002db4 <_free_r+0x50>
 8002db0:	42a3      	cmp	r3, r4
 8002db2:	d9fa      	bls.n	8002daa <_free_r+0x46>
 8002db4:	6811      	ldr	r1, [r2, #0]
 8002db6:	1855      	adds	r5, r2, r1
 8002db8:	42a5      	cmp	r5, r4
 8002dba:	d10b      	bne.n	8002dd4 <_free_r+0x70>
 8002dbc:	6824      	ldr	r4, [r4, #0]
 8002dbe:	4421      	add	r1, r4
 8002dc0:	1854      	adds	r4, r2, r1
 8002dc2:	42a3      	cmp	r3, r4
 8002dc4:	6011      	str	r1, [r2, #0]
 8002dc6:	d1e0      	bne.n	8002d8a <_free_r+0x26>
 8002dc8:	681c      	ldr	r4, [r3, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	6053      	str	r3, [r2, #4]
 8002dce:	440c      	add	r4, r1
 8002dd0:	6014      	str	r4, [r2, #0]
 8002dd2:	e7da      	b.n	8002d8a <_free_r+0x26>
 8002dd4:	d902      	bls.n	8002ddc <_free_r+0x78>
 8002dd6:	230c      	movs	r3, #12
 8002dd8:	6003      	str	r3, [r0, #0]
 8002dda:	e7d6      	b.n	8002d8a <_free_r+0x26>
 8002ddc:	6825      	ldr	r5, [r4, #0]
 8002dde:	1961      	adds	r1, r4, r5
 8002de0:	428b      	cmp	r3, r1
 8002de2:	bf04      	itt	eq
 8002de4:	6819      	ldreq	r1, [r3, #0]
 8002de6:	685b      	ldreq	r3, [r3, #4]
 8002de8:	6063      	str	r3, [r4, #4]
 8002dea:	bf04      	itt	eq
 8002dec:	1949      	addeq	r1, r1, r5
 8002dee:	6021      	streq	r1, [r4, #0]
 8002df0:	6054      	str	r4, [r2, #4]
 8002df2:	e7ca      	b.n	8002d8a <_free_r+0x26>
 8002df4:	b003      	add	sp, #12
 8002df6:	bd30      	pop	{r4, r5, pc}
 8002df8:	20000270 	.word	0x20000270

08002dfc <sbrk_aligned>:
 8002dfc:	b570      	push	{r4, r5, r6, lr}
 8002dfe:	4e0e      	ldr	r6, [pc, #56]	; (8002e38 <sbrk_aligned+0x3c>)
 8002e00:	460c      	mov	r4, r1
 8002e02:	6831      	ldr	r1, [r6, #0]
 8002e04:	4605      	mov	r5, r0
 8002e06:	b911      	cbnz	r1, 8002e0e <sbrk_aligned+0x12>
 8002e08:	f000 fba6 	bl	8003558 <_sbrk_r>
 8002e0c:	6030      	str	r0, [r6, #0]
 8002e0e:	4621      	mov	r1, r4
 8002e10:	4628      	mov	r0, r5
 8002e12:	f000 fba1 	bl	8003558 <_sbrk_r>
 8002e16:	1c43      	adds	r3, r0, #1
 8002e18:	d00a      	beq.n	8002e30 <sbrk_aligned+0x34>
 8002e1a:	1cc4      	adds	r4, r0, #3
 8002e1c:	f024 0403 	bic.w	r4, r4, #3
 8002e20:	42a0      	cmp	r0, r4
 8002e22:	d007      	beq.n	8002e34 <sbrk_aligned+0x38>
 8002e24:	1a21      	subs	r1, r4, r0
 8002e26:	4628      	mov	r0, r5
 8002e28:	f000 fb96 	bl	8003558 <_sbrk_r>
 8002e2c:	3001      	adds	r0, #1
 8002e2e:	d101      	bne.n	8002e34 <sbrk_aligned+0x38>
 8002e30:	f04f 34ff 	mov.w	r4, #4294967295
 8002e34:	4620      	mov	r0, r4
 8002e36:	bd70      	pop	{r4, r5, r6, pc}
 8002e38:	20000274 	.word	0x20000274

08002e3c <_malloc_r>:
 8002e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e40:	1ccd      	adds	r5, r1, #3
 8002e42:	f025 0503 	bic.w	r5, r5, #3
 8002e46:	3508      	adds	r5, #8
 8002e48:	2d0c      	cmp	r5, #12
 8002e4a:	bf38      	it	cc
 8002e4c:	250c      	movcc	r5, #12
 8002e4e:	2d00      	cmp	r5, #0
 8002e50:	4607      	mov	r7, r0
 8002e52:	db01      	blt.n	8002e58 <_malloc_r+0x1c>
 8002e54:	42a9      	cmp	r1, r5
 8002e56:	d905      	bls.n	8002e64 <_malloc_r+0x28>
 8002e58:	230c      	movs	r3, #12
 8002e5a:	603b      	str	r3, [r7, #0]
 8002e5c:	2600      	movs	r6, #0
 8002e5e:	4630      	mov	r0, r6
 8002e60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002f38 <_malloc_r+0xfc>
 8002e68:	f000 f868 	bl	8002f3c <__malloc_lock>
 8002e6c:	f8d8 3000 	ldr.w	r3, [r8]
 8002e70:	461c      	mov	r4, r3
 8002e72:	bb5c      	cbnz	r4, 8002ecc <_malloc_r+0x90>
 8002e74:	4629      	mov	r1, r5
 8002e76:	4638      	mov	r0, r7
 8002e78:	f7ff ffc0 	bl	8002dfc <sbrk_aligned>
 8002e7c:	1c43      	adds	r3, r0, #1
 8002e7e:	4604      	mov	r4, r0
 8002e80:	d155      	bne.n	8002f2e <_malloc_r+0xf2>
 8002e82:	f8d8 4000 	ldr.w	r4, [r8]
 8002e86:	4626      	mov	r6, r4
 8002e88:	2e00      	cmp	r6, #0
 8002e8a:	d145      	bne.n	8002f18 <_malloc_r+0xdc>
 8002e8c:	2c00      	cmp	r4, #0
 8002e8e:	d048      	beq.n	8002f22 <_malloc_r+0xe6>
 8002e90:	6823      	ldr	r3, [r4, #0]
 8002e92:	4631      	mov	r1, r6
 8002e94:	4638      	mov	r0, r7
 8002e96:	eb04 0903 	add.w	r9, r4, r3
 8002e9a:	f000 fb5d 	bl	8003558 <_sbrk_r>
 8002e9e:	4581      	cmp	r9, r0
 8002ea0:	d13f      	bne.n	8002f22 <_malloc_r+0xe6>
 8002ea2:	6821      	ldr	r1, [r4, #0]
 8002ea4:	1a6d      	subs	r5, r5, r1
 8002ea6:	4629      	mov	r1, r5
 8002ea8:	4638      	mov	r0, r7
 8002eaa:	f7ff ffa7 	bl	8002dfc <sbrk_aligned>
 8002eae:	3001      	adds	r0, #1
 8002eb0:	d037      	beq.n	8002f22 <_malloc_r+0xe6>
 8002eb2:	6823      	ldr	r3, [r4, #0]
 8002eb4:	442b      	add	r3, r5
 8002eb6:	6023      	str	r3, [r4, #0]
 8002eb8:	f8d8 3000 	ldr.w	r3, [r8]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d038      	beq.n	8002f32 <_malloc_r+0xf6>
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	42a2      	cmp	r2, r4
 8002ec4:	d12b      	bne.n	8002f1e <_malloc_r+0xe2>
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	e00f      	b.n	8002eec <_malloc_r+0xb0>
 8002ecc:	6822      	ldr	r2, [r4, #0]
 8002ece:	1b52      	subs	r2, r2, r5
 8002ed0:	d41f      	bmi.n	8002f12 <_malloc_r+0xd6>
 8002ed2:	2a0b      	cmp	r2, #11
 8002ed4:	d917      	bls.n	8002f06 <_malloc_r+0xca>
 8002ed6:	1961      	adds	r1, r4, r5
 8002ed8:	42a3      	cmp	r3, r4
 8002eda:	6025      	str	r5, [r4, #0]
 8002edc:	bf18      	it	ne
 8002ede:	6059      	strne	r1, [r3, #4]
 8002ee0:	6863      	ldr	r3, [r4, #4]
 8002ee2:	bf08      	it	eq
 8002ee4:	f8c8 1000 	streq.w	r1, [r8]
 8002ee8:	5162      	str	r2, [r4, r5]
 8002eea:	604b      	str	r3, [r1, #4]
 8002eec:	4638      	mov	r0, r7
 8002eee:	f104 060b 	add.w	r6, r4, #11
 8002ef2:	f000 f829 	bl	8002f48 <__malloc_unlock>
 8002ef6:	f026 0607 	bic.w	r6, r6, #7
 8002efa:	1d23      	adds	r3, r4, #4
 8002efc:	1af2      	subs	r2, r6, r3
 8002efe:	d0ae      	beq.n	8002e5e <_malloc_r+0x22>
 8002f00:	1b9b      	subs	r3, r3, r6
 8002f02:	50a3      	str	r3, [r4, r2]
 8002f04:	e7ab      	b.n	8002e5e <_malloc_r+0x22>
 8002f06:	42a3      	cmp	r3, r4
 8002f08:	6862      	ldr	r2, [r4, #4]
 8002f0a:	d1dd      	bne.n	8002ec8 <_malloc_r+0x8c>
 8002f0c:	f8c8 2000 	str.w	r2, [r8]
 8002f10:	e7ec      	b.n	8002eec <_malloc_r+0xb0>
 8002f12:	4623      	mov	r3, r4
 8002f14:	6864      	ldr	r4, [r4, #4]
 8002f16:	e7ac      	b.n	8002e72 <_malloc_r+0x36>
 8002f18:	4634      	mov	r4, r6
 8002f1a:	6876      	ldr	r6, [r6, #4]
 8002f1c:	e7b4      	b.n	8002e88 <_malloc_r+0x4c>
 8002f1e:	4613      	mov	r3, r2
 8002f20:	e7cc      	b.n	8002ebc <_malloc_r+0x80>
 8002f22:	230c      	movs	r3, #12
 8002f24:	603b      	str	r3, [r7, #0]
 8002f26:	4638      	mov	r0, r7
 8002f28:	f000 f80e 	bl	8002f48 <__malloc_unlock>
 8002f2c:	e797      	b.n	8002e5e <_malloc_r+0x22>
 8002f2e:	6025      	str	r5, [r4, #0]
 8002f30:	e7dc      	b.n	8002eec <_malloc_r+0xb0>
 8002f32:	605b      	str	r3, [r3, #4]
 8002f34:	deff      	udf	#255	; 0xff
 8002f36:	bf00      	nop
 8002f38:	20000270 	.word	0x20000270

08002f3c <__malloc_lock>:
 8002f3c:	4801      	ldr	r0, [pc, #4]	; (8002f44 <__malloc_lock+0x8>)
 8002f3e:	f7ff bf0f 	b.w	8002d60 <__retarget_lock_acquire_recursive>
 8002f42:	bf00      	nop
 8002f44:	2000026c 	.word	0x2000026c

08002f48 <__malloc_unlock>:
 8002f48:	4801      	ldr	r0, [pc, #4]	; (8002f50 <__malloc_unlock+0x8>)
 8002f4a:	f7ff bf0a 	b.w	8002d62 <__retarget_lock_release_recursive>
 8002f4e:	bf00      	nop
 8002f50:	2000026c 	.word	0x2000026c

08002f54 <__ssputs_r>:
 8002f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f58:	688e      	ldr	r6, [r1, #8]
 8002f5a:	461f      	mov	r7, r3
 8002f5c:	42be      	cmp	r6, r7
 8002f5e:	680b      	ldr	r3, [r1, #0]
 8002f60:	4682      	mov	sl, r0
 8002f62:	460c      	mov	r4, r1
 8002f64:	4690      	mov	r8, r2
 8002f66:	d82c      	bhi.n	8002fc2 <__ssputs_r+0x6e>
 8002f68:	898a      	ldrh	r2, [r1, #12]
 8002f6a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002f6e:	d026      	beq.n	8002fbe <__ssputs_r+0x6a>
 8002f70:	6965      	ldr	r5, [r4, #20]
 8002f72:	6909      	ldr	r1, [r1, #16]
 8002f74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f78:	eba3 0901 	sub.w	r9, r3, r1
 8002f7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002f80:	1c7b      	adds	r3, r7, #1
 8002f82:	444b      	add	r3, r9
 8002f84:	106d      	asrs	r5, r5, #1
 8002f86:	429d      	cmp	r5, r3
 8002f88:	bf38      	it	cc
 8002f8a:	461d      	movcc	r5, r3
 8002f8c:	0553      	lsls	r3, r2, #21
 8002f8e:	d527      	bpl.n	8002fe0 <__ssputs_r+0x8c>
 8002f90:	4629      	mov	r1, r5
 8002f92:	f7ff ff53 	bl	8002e3c <_malloc_r>
 8002f96:	4606      	mov	r6, r0
 8002f98:	b360      	cbz	r0, 8002ff4 <__ssputs_r+0xa0>
 8002f9a:	6921      	ldr	r1, [r4, #16]
 8002f9c:	464a      	mov	r2, r9
 8002f9e:	f000 faeb 	bl	8003578 <memcpy>
 8002fa2:	89a3      	ldrh	r3, [r4, #12]
 8002fa4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fac:	81a3      	strh	r3, [r4, #12]
 8002fae:	6126      	str	r6, [r4, #16]
 8002fb0:	6165      	str	r5, [r4, #20]
 8002fb2:	444e      	add	r6, r9
 8002fb4:	eba5 0509 	sub.w	r5, r5, r9
 8002fb8:	6026      	str	r6, [r4, #0]
 8002fba:	60a5      	str	r5, [r4, #8]
 8002fbc:	463e      	mov	r6, r7
 8002fbe:	42be      	cmp	r6, r7
 8002fc0:	d900      	bls.n	8002fc4 <__ssputs_r+0x70>
 8002fc2:	463e      	mov	r6, r7
 8002fc4:	6820      	ldr	r0, [r4, #0]
 8002fc6:	4632      	mov	r2, r6
 8002fc8:	4641      	mov	r1, r8
 8002fca:	f000 faab 	bl	8003524 <memmove>
 8002fce:	68a3      	ldr	r3, [r4, #8]
 8002fd0:	1b9b      	subs	r3, r3, r6
 8002fd2:	60a3      	str	r3, [r4, #8]
 8002fd4:	6823      	ldr	r3, [r4, #0]
 8002fd6:	4433      	add	r3, r6
 8002fd8:	6023      	str	r3, [r4, #0]
 8002fda:	2000      	movs	r0, #0
 8002fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fe0:	462a      	mov	r2, r5
 8002fe2:	f000 fad7 	bl	8003594 <_realloc_r>
 8002fe6:	4606      	mov	r6, r0
 8002fe8:	2800      	cmp	r0, #0
 8002fea:	d1e0      	bne.n	8002fae <__ssputs_r+0x5a>
 8002fec:	6921      	ldr	r1, [r4, #16]
 8002fee:	4650      	mov	r0, sl
 8002ff0:	f7ff feb8 	bl	8002d64 <_free_r>
 8002ff4:	230c      	movs	r3, #12
 8002ff6:	f8ca 3000 	str.w	r3, [sl]
 8002ffa:	89a3      	ldrh	r3, [r4, #12]
 8002ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003000:	81a3      	strh	r3, [r4, #12]
 8003002:	f04f 30ff 	mov.w	r0, #4294967295
 8003006:	e7e9      	b.n	8002fdc <__ssputs_r+0x88>

08003008 <_svfiprintf_r>:
 8003008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800300c:	4698      	mov	r8, r3
 800300e:	898b      	ldrh	r3, [r1, #12]
 8003010:	061b      	lsls	r3, r3, #24
 8003012:	b09d      	sub	sp, #116	; 0x74
 8003014:	4607      	mov	r7, r0
 8003016:	460d      	mov	r5, r1
 8003018:	4614      	mov	r4, r2
 800301a:	d50e      	bpl.n	800303a <_svfiprintf_r+0x32>
 800301c:	690b      	ldr	r3, [r1, #16]
 800301e:	b963      	cbnz	r3, 800303a <_svfiprintf_r+0x32>
 8003020:	2140      	movs	r1, #64	; 0x40
 8003022:	f7ff ff0b 	bl	8002e3c <_malloc_r>
 8003026:	6028      	str	r0, [r5, #0]
 8003028:	6128      	str	r0, [r5, #16]
 800302a:	b920      	cbnz	r0, 8003036 <_svfiprintf_r+0x2e>
 800302c:	230c      	movs	r3, #12
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	f04f 30ff 	mov.w	r0, #4294967295
 8003034:	e0d0      	b.n	80031d8 <_svfiprintf_r+0x1d0>
 8003036:	2340      	movs	r3, #64	; 0x40
 8003038:	616b      	str	r3, [r5, #20]
 800303a:	2300      	movs	r3, #0
 800303c:	9309      	str	r3, [sp, #36]	; 0x24
 800303e:	2320      	movs	r3, #32
 8003040:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003044:	f8cd 800c 	str.w	r8, [sp, #12]
 8003048:	2330      	movs	r3, #48	; 0x30
 800304a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80031f0 <_svfiprintf_r+0x1e8>
 800304e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003052:	f04f 0901 	mov.w	r9, #1
 8003056:	4623      	mov	r3, r4
 8003058:	469a      	mov	sl, r3
 800305a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800305e:	b10a      	cbz	r2, 8003064 <_svfiprintf_r+0x5c>
 8003060:	2a25      	cmp	r2, #37	; 0x25
 8003062:	d1f9      	bne.n	8003058 <_svfiprintf_r+0x50>
 8003064:	ebba 0b04 	subs.w	fp, sl, r4
 8003068:	d00b      	beq.n	8003082 <_svfiprintf_r+0x7a>
 800306a:	465b      	mov	r3, fp
 800306c:	4622      	mov	r2, r4
 800306e:	4629      	mov	r1, r5
 8003070:	4638      	mov	r0, r7
 8003072:	f7ff ff6f 	bl	8002f54 <__ssputs_r>
 8003076:	3001      	adds	r0, #1
 8003078:	f000 80a9 	beq.w	80031ce <_svfiprintf_r+0x1c6>
 800307c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800307e:	445a      	add	r2, fp
 8003080:	9209      	str	r2, [sp, #36]	; 0x24
 8003082:	f89a 3000 	ldrb.w	r3, [sl]
 8003086:	2b00      	cmp	r3, #0
 8003088:	f000 80a1 	beq.w	80031ce <_svfiprintf_r+0x1c6>
 800308c:	2300      	movs	r3, #0
 800308e:	f04f 32ff 	mov.w	r2, #4294967295
 8003092:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003096:	f10a 0a01 	add.w	sl, sl, #1
 800309a:	9304      	str	r3, [sp, #16]
 800309c:	9307      	str	r3, [sp, #28]
 800309e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80030a2:	931a      	str	r3, [sp, #104]	; 0x68
 80030a4:	4654      	mov	r4, sl
 80030a6:	2205      	movs	r2, #5
 80030a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030ac:	4850      	ldr	r0, [pc, #320]	; (80031f0 <_svfiprintf_r+0x1e8>)
 80030ae:	f7fd f897 	bl	80001e0 <memchr>
 80030b2:	9a04      	ldr	r2, [sp, #16]
 80030b4:	b9d8      	cbnz	r0, 80030ee <_svfiprintf_r+0xe6>
 80030b6:	06d0      	lsls	r0, r2, #27
 80030b8:	bf44      	itt	mi
 80030ba:	2320      	movmi	r3, #32
 80030bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030c0:	0711      	lsls	r1, r2, #28
 80030c2:	bf44      	itt	mi
 80030c4:	232b      	movmi	r3, #43	; 0x2b
 80030c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030ca:	f89a 3000 	ldrb.w	r3, [sl]
 80030ce:	2b2a      	cmp	r3, #42	; 0x2a
 80030d0:	d015      	beq.n	80030fe <_svfiprintf_r+0xf6>
 80030d2:	9a07      	ldr	r2, [sp, #28]
 80030d4:	4654      	mov	r4, sl
 80030d6:	2000      	movs	r0, #0
 80030d8:	f04f 0c0a 	mov.w	ip, #10
 80030dc:	4621      	mov	r1, r4
 80030de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030e2:	3b30      	subs	r3, #48	; 0x30
 80030e4:	2b09      	cmp	r3, #9
 80030e6:	d94d      	bls.n	8003184 <_svfiprintf_r+0x17c>
 80030e8:	b1b0      	cbz	r0, 8003118 <_svfiprintf_r+0x110>
 80030ea:	9207      	str	r2, [sp, #28]
 80030ec:	e014      	b.n	8003118 <_svfiprintf_r+0x110>
 80030ee:	eba0 0308 	sub.w	r3, r0, r8
 80030f2:	fa09 f303 	lsl.w	r3, r9, r3
 80030f6:	4313      	orrs	r3, r2
 80030f8:	9304      	str	r3, [sp, #16]
 80030fa:	46a2      	mov	sl, r4
 80030fc:	e7d2      	b.n	80030a4 <_svfiprintf_r+0x9c>
 80030fe:	9b03      	ldr	r3, [sp, #12]
 8003100:	1d19      	adds	r1, r3, #4
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	9103      	str	r1, [sp, #12]
 8003106:	2b00      	cmp	r3, #0
 8003108:	bfbb      	ittet	lt
 800310a:	425b      	neglt	r3, r3
 800310c:	f042 0202 	orrlt.w	r2, r2, #2
 8003110:	9307      	strge	r3, [sp, #28]
 8003112:	9307      	strlt	r3, [sp, #28]
 8003114:	bfb8      	it	lt
 8003116:	9204      	strlt	r2, [sp, #16]
 8003118:	7823      	ldrb	r3, [r4, #0]
 800311a:	2b2e      	cmp	r3, #46	; 0x2e
 800311c:	d10c      	bne.n	8003138 <_svfiprintf_r+0x130>
 800311e:	7863      	ldrb	r3, [r4, #1]
 8003120:	2b2a      	cmp	r3, #42	; 0x2a
 8003122:	d134      	bne.n	800318e <_svfiprintf_r+0x186>
 8003124:	9b03      	ldr	r3, [sp, #12]
 8003126:	1d1a      	adds	r2, r3, #4
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	9203      	str	r2, [sp, #12]
 800312c:	2b00      	cmp	r3, #0
 800312e:	bfb8      	it	lt
 8003130:	f04f 33ff 	movlt.w	r3, #4294967295
 8003134:	3402      	adds	r4, #2
 8003136:	9305      	str	r3, [sp, #20]
 8003138:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003200 <_svfiprintf_r+0x1f8>
 800313c:	7821      	ldrb	r1, [r4, #0]
 800313e:	2203      	movs	r2, #3
 8003140:	4650      	mov	r0, sl
 8003142:	f7fd f84d 	bl	80001e0 <memchr>
 8003146:	b138      	cbz	r0, 8003158 <_svfiprintf_r+0x150>
 8003148:	9b04      	ldr	r3, [sp, #16]
 800314a:	eba0 000a 	sub.w	r0, r0, sl
 800314e:	2240      	movs	r2, #64	; 0x40
 8003150:	4082      	lsls	r2, r0
 8003152:	4313      	orrs	r3, r2
 8003154:	3401      	adds	r4, #1
 8003156:	9304      	str	r3, [sp, #16]
 8003158:	f814 1b01 	ldrb.w	r1, [r4], #1
 800315c:	4825      	ldr	r0, [pc, #148]	; (80031f4 <_svfiprintf_r+0x1ec>)
 800315e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003162:	2206      	movs	r2, #6
 8003164:	f7fd f83c 	bl	80001e0 <memchr>
 8003168:	2800      	cmp	r0, #0
 800316a:	d038      	beq.n	80031de <_svfiprintf_r+0x1d6>
 800316c:	4b22      	ldr	r3, [pc, #136]	; (80031f8 <_svfiprintf_r+0x1f0>)
 800316e:	bb1b      	cbnz	r3, 80031b8 <_svfiprintf_r+0x1b0>
 8003170:	9b03      	ldr	r3, [sp, #12]
 8003172:	3307      	adds	r3, #7
 8003174:	f023 0307 	bic.w	r3, r3, #7
 8003178:	3308      	adds	r3, #8
 800317a:	9303      	str	r3, [sp, #12]
 800317c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800317e:	4433      	add	r3, r6
 8003180:	9309      	str	r3, [sp, #36]	; 0x24
 8003182:	e768      	b.n	8003056 <_svfiprintf_r+0x4e>
 8003184:	fb0c 3202 	mla	r2, ip, r2, r3
 8003188:	460c      	mov	r4, r1
 800318a:	2001      	movs	r0, #1
 800318c:	e7a6      	b.n	80030dc <_svfiprintf_r+0xd4>
 800318e:	2300      	movs	r3, #0
 8003190:	3401      	adds	r4, #1
 8003192:	9305      	str	r3, [sp, #20]
 8003194:	4619      	mov	r1, r3
 8003196:	f04f 0c0a 	mov.w	ip, #10
 800319a:	4620      	mov	r0, r4
 800319c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031a0:	3a30      	subs	r2, #48	; 0x30
 80031a2:	2a09      	cmp	r2, #9
 80031a4:	d903      	bls.n	80031ae <_svfiprintf_r+0x1a6>
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0c6      	beq.n	8003138 <_svfiprintf_r+0x130>
 80031aa:	9105      	str	r1, [sp, #20]
 80031ac:	e7c4      	b.n	8003138 <_svfiprintf_r+0x130>
 80031ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80031b2:	4604      	mov	r4, r0
 80031b4:	2301      	movs	r3, #1
 80031b6:	e7f0      	b.n	800319a <_svfiprintf_r+0x192>
 80031b8:	ab03      	add	r3, sp, #12
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	462a      	mov	r2, r5
 80031be:	4b0f      	ldr	r3, [pc, #60]	; (80031fc <_svfiprintf_r+0x1f4>)
 80031c0:	a904      	add	r1, sp, #16
 80031c2:	4638      	mov	r0, r7
 80031c4:	f3af 8000 	nop.w
 80031c8:	1c42      	adds	r2, r0, #1
 80031ca:	4606      	mov	r6, r0
 80031cc:	d1d6      	bne.n	800317c <_svfiprintf_r+0x174>
 80031ce:	89ab      	ldrh	r3, [r5, #12]
 80031d0:	065b      	lsls	r3, r3, #25
 80031d2:	f53f af2d 	bmi.w	8003030 <_svfiprintf_r+0x28>
 80031d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80031d8:	b01d      	add	sp, #116	; 0x74
 80031da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031de:	ab03      	add	r3, sp, #12
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	462a      	mov	r2, r5
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <_svfiprintf_r+0x1f4>)
 80031e6:	a904      	add	r1, sp, #16
 80031e8:	4638      	mov	r0, r7
 80031ea:	f000 f879 	bl	80032e0 <_printf_i>
 80031ee:	e7eb      	b.n	80031c8 <_svfiprintf_r+0x1c0>
 80031f0:	08003660 	.word	0x08003660
 80031f4:	0800366a 	.word	0x0800366a
 80031f8:	00000000 	.word	0x00000000
 80031fc:	08002f55 	.word	0x08002f55
 8003200:	08003666 	.word	0x08003666

08003204 <_printf_common>:
 8003204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003208:	4616      	mov	r6, r2
 800320a:	4699      	mov	r9, r3
 800320c:	688a      	ldr	r2, [r1, #8]
 800320e:	690b      	ldr	r3, [r1, #16]
 8003210:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003214:	4293      	cmp	r3, r2
 8003216:	bfb8      	it	lt
 8003218:	4613      	movlt	r3, r2
 800321a:	6033      	str	r3, [r6, #0]
 800321c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003220:	4607      	mov	r7, r0
 8003222:	460c      	mov	r4, r1
 8003224:	b10a      	cbz	r2, 800322a <_printf_common+0x26>
 8003226:	3301      	adds	r3, #1
 8003228:	6033      	str	r3, [r6, #0]
 800322a:	6823      	ldr	r3, [r4, #0]
 800322c:	0699      	lsls	r1, r3, #26
 800322e:	bf42      	ittt	mi
 8003230:	6833      	ldrmi	r3, [r6, #0]
 8003232:	3302      	addmi	r3, #2
 8003234:	6033      	strmi	r3, [r6, #0]
 8003236:	6825      	ldr	r5, [r4, #0]
 8003238:	f015 0506 	ands.w	r5, r5, #6
 800323c:	d106      	bne.n	800324c <_printf_common+0x48>
 800323e:	f104 0a19 	add.w	sl, r4, #25
 8003242:	68e3      	ldr	r3, [r4, #12]
 8003244:	6832      	ldr	r2, [r6, #0]
 8003246:	1a9b      	subs	r3, r3, r2
 8003248:	42ab      	cmp	r3, r5
 800324a:	dc26      	bgt.n	800329a <_printf_common+0x96>
 800324c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003250:	1e13      	subs	r3, r2, #0
 8003252:	6822      	ldr	r2, [r4, #0]
 8003254:	bf18      	it	ne
 8003256:	2301      	movne	r3, #1
 8003258:	0692      	lsls	r2, r2, #26
 800325a:	d42b      	bmi.n	80032b4 <_printf_common+0xb0>
 800325c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003260:	4649      	mov	r1, r9
 8003262:	4638      	mov	r0, r7
 8003264:	47c0      	blx	r8
 8003266:	3001      	adds	r0, #1
 8003268:	d01e      	beq.n	80032a8 <_printf_common+0xa4>
 800326a:	6823      	ldr	r3, [r4, #0]
 800326c:	6922      	ldr	r2, [r4, #16]
 800326e:	f003 0306 	and.w	r3, r3, #6
 8003272:	2b04      	cmp	r3, #4
 8003274:	bf02      	ittt	eq
 8003276:	68e5      	ldreq	r5, [r4, #12]
 8003278:	6833      	ldreq	r3, [r6, #0]
 800327a:	1aed      	subeq	r5, r5, r3
 800327c:	68a3      	ldr	r3, [r4, #8]
 800327e:	bf0c      	ite	eq
 8003280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003284:	2500      	movne	r5, #0
 8003286:	4293      	cmp	r3, r2
 8003288:	bfc4      	itt	gt
 800328a:	1a9b      	subgt	r3, r3, r2
 800328c:	18ed      	addgt	r5, r5, r3
 800328e:	2600      	movs	r6, #0
 8003290:	341a      	adds	r4, #26
 8003292:	42b5      	cmp	r5, r6
 8003294:	d11a      	bne.n	80032cc <_printf_common+0xc8>
 8003296:	2000      	movs	r0, #0
 8003298:	e008      	b.n	80032ac <_printf_common+0xa8>
 800329a:	2301      	movs	r3, #1
 800329c:	4652      	mov	r2, sl
 800329e:	4649      	mov	r1, r9
 80032a0:	4638      	mov	r0, r7
 80032a2:	47c0      	blx	r8
 80032a4:	3001      	adds	r0, #1
 80032a6:	d103      	bne.n	80032b0 <_printf_common+0xac>
 80032a8:	f04f 30ff 	mov.w	r0, #4294967295
 80032ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032b0:	3501      	adds	r5, #1
 80032b2:	e7c6      	b.n	8003242 <_printf_common+0x3e>
 80032b4:	18e1      	adds	r1, r4, r3
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	2030      	movs	r0, #48	; 0x30
 80032ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032be:	4422      	add	r2, r4
 80032c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80032c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032c8:	3302      	adds	r3, #2
 80032ca:	e7c7      	b.n	800325c <_printf_common+0x58>
 80032cc:	2301      	movs	r3, #1
 80032ce:	4622      	mov	r2, r4
 80032d0:	4649      	mov	r1, r9
 80032d2:	4638      	mov	r0, r7
 80032d4:	47c0      	blx	r8
 80032d6:	3001      	adds	r0, #1
 80032d8:	d0e6      	beq.n	80032a8 <_printf_common+0xa4>
 80032da:	3601      	adds	r6, #1
 80032dc:	e7d9      	b.n	8003292 <_printf_common+0x8e>
	...

080032e0 <_printf_i>:
 80032e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032e4:	7e0f      	ldrb	r7, [r1, #24]
 80032e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80032e8:	2f78      	cmp	r7, #120	; 0x78
 80032ea:	4691      	mov	r9, r2
 80032ec:	4680      	mov	r8, r0
 80032ee:	460c      	mov	r4, r1
 80032f0:	469a      	mov	sl, r3
 80032f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80032f6:	d807      	bhi.n	8003308 <_printf_i+0x28>
 80032f8:	2f62      	cmp	r7, #98	; 0x62
 80032fa:	d80a      	bhi.n	8003312 <_printf_i+0x32>
 80032fc:	2f00      	cmp	r7, #0
 80032fe:	f000 80d4 	beq.w	80034aa <_printf_i+0x1ca>
 8003302:	2f58      	cmp	r7, #88	; 0x58
 8003304:	f000 80c0 	beq.w	8003488 <_printf_i+0x1a8>
 8003308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800330c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003310:	e03a      	b.n	8003388 <_printf_i+0xa8>
 8003312:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003316:	2b15      	cmp	r3, #21
 8003318:	d8f6      	bhi.n	8003308 <_printf_i+0x28>
 800331a:	a101      	add	r1, pc, #4	; (adr r1, 8003320 <_printf_i+0x40>)
 800331c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003320:	08003379 	.word	0x08003379
 8003324:	0800338d 	.word	0x0800338d
 8003328:	08003309 	.word	0x08003309
 800332c:	08003309 	.word	0x08003309
 8003330:	08003309 	.word	0x08003309
 8003334:	08003309 	.word	0x08003309
 8003338:	0800338d 	.word	0x0800338d
 800333c:	08003309 	.word	0x08003309
 8003340:	08003309 	.word	0x08003309
 8003344:	08003309 	.word	0x08003309
 8003348:	08003309 	.word	0x08003309
 800334c:	08003491 	.word	0x08003491
 8003350:	080033b9 	.word	0x080033b9
 8003354:	0800344b 	.word	0x0800344b
 8003358:	08003309 	.word	0x08003309
 800335c:	08003309 	.word	0x08003309
 8003360:	080034b3 	.word	0x080034b3
 8003364:	08003309 	.word	0x08003309
 8003368:	080033b9 	.word	0x080033b9
 800336c:	08003309 	.word	0x08003309
 8003370:	08003309 	.word	0x08003309
 8003374:	08003453 	.word	0x08003453
 8003378:	682b      	ldr	r3, [r5, #0]
 800337a:	1d1a      	adds	r2, r3, #4
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	602a      	str	r2, [r5, #0]
 8003380:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003384:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003388:	2301      	movs	r3, #1
 800338a:	e09f      	b.n	80034cc <_printf_i+0x1ec>
 800338c:	6820      	ldr	r0, [r4, #0]
 800338e:	682b      	ldr	r3, [r5, #0]
 8003390:	0607      	lsls	r7, r0, #24
 8003392:	f103 0104 	add.w	r1, r3, #4
 8003396:	6029      	str	r1, [r5, #0]
 8003398:	d501      	bpl.n	800339e <_printf_i+0xbe>
 800339a:	681e      	ldr	r6, [r3, #0]
 800339c:	e003      	b.n	80033a6 <_printf_i+0xc6>
 800339e:	0646      	lsls	r6, r0, #25
 80033a0:	d5fb      	bpl.n	800339a <_printf_i+0xba>
 80033a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80033a6:	2e00      	cmp	r6, #0
 80033a8:	da03      	bge.n	80033b2 <_printf_i+0xd2>
 80033aa:	232d      	movs	r3, #45	; 0x2d
 80033ac:	4276      	negs	r6, r6
 80033ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033b2:	485a      	ldr	r0, [pc, #360]	; (800351c <_printf_i+0x23c>)
 80033b4:	230a      	movs	r3, #10
 80033b6:	e012      	b.n	80033de <_printf_i+0xfe>
 80033b8:	682b      	ldr	r3, [r5, #0]
 80033ba:	6820      	ldr	r0, [r4, #0]
 80033bc:	1d19      	adds	r1, r3, #4
 80033be:	6029      	str	r1, [r5, #0]
 80033c0:	0605      	lsls	r5, r0, #24
 80033c2:	d501      	bpl.n	80033c8 <_printf_i+0xe8>
 80033c4:	681e      	ldr	r6, [r3, #0]
 80033c6:	e002      	b.n	80033ce <_printf_i+0xee>
 80033c8:	0641      	lsls	r1, r0, #25
 80033ca:	d5fb      	bpl.n	80033c4 <_printf_i+0xe4>
 80033cc:	881e      	ldrh	r6, [r3, #0]
 80033ce:	4853      	ldr	r0, [pc, #332]	; (800351c <_printf_i+0x23c>)
 80033d0:	2f6f      	cmp	r7, #111	; 0x6f
 80033d2:	bf0c      	ite	eq
 80033d4:	2308      	moveq	r3, #8
 80033d6:	230a      	movne	r3, #10
 80033d8:	2100      	movs	r1, #0
 80033da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033de:	6865      	ldr	r5, [r4, #4]
 80033e0:	60a5      	str	r5, [r4, #8]
 80033e2:	2d00      	cmp	r5, #0
 80033e4:	bfa2      	ittt	ge
 80033e6:	6821      	ldrge	r1, [r4, #0]
 80033e8:	f021 0104 	bicge.w	r1, r1, #4
 80033ec:	6021      	strge	r1, [r4, #0]
 80033ee:	b90e      	cbnz	r6, 80033f4 <_printf_i+0x114>
 80033f0:	2d00      	cmp	r5, #0
 80033f2:	d04b      	beq.n	800348c <_printf_i+0x1ac>
 80033f4:	4615      	mov	r5, r2
 80033f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80033fa:	fb03 6711 	mls	r7, r3, r1, r6
 80033fe:	5dc7      	ldrb	r7, [r0, r7]
 8003400:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003404:	4637      	mov	r7, r6
 8003406:	42bb      	cmp	r3, r7
 8003408:	460e      	mov	r6, r1
 800340a:	d9f4      	bls.n	80033f6 <_printf_i+0x116>
 800340c:	2b08      	cmp	r3, #8
 800340e:	d10b      	bne.n	8003428 <_printf_i+0x148>
 8003410:	6823      	ldr	r3, [r4, #0]
 8003412:	07de      	lsls	r6, r3, #31
 8003414:	d508      	bpl.n	8003428 <_printf_i+0x148>
 8003416:	6923      	ldr	r3, [r4, #16]
 8003418:	6861      	ldr	r1, [r4, #4]
 800341a:	4299      	cmp	r1, r3
 800341c:	bfde      	ittt	le
 800341e:	2330      	movle	r3, #48	; 0x30
 8003420:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003424:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003428:	1b52      	subs	r2, r2, r5
 800342a:	6122      	str	r2, [r4, #16]
 800342c:	f8cd a000 	str.w	sl, [sp]
 8003430:	464b      	mov	r3, r9
 8003432:	aa03      	add	r2, sp, #12
 8003434:	4621      	mov	r1, r4
 8003436:	4640      	mov	r0, r8
 8003438:	f7ff fee4 	bl	8003204 <_printf_common>
 800343c:	3001      	adds	r0, #1
 800343e:	d14a      	bne.n	80034d6 <_printf_i+0x1f6>
 8003440:	f04f 30ff 	mov.w	r0, #4294967295
 8003444:	b004      	add	sp, #16
 8003446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800344a:	6823      	ldr	r3, [r4, #0]
 800344c:	f043 0320 	orr.w	r3, r3, #32
 8003450:	6023      	str	r3, [r4, #0]
 8003452:	4833      	ldr	r0, [pc, #204]	; (8003520 <_printf_i+0x240>)
 8003454:	2778      	movs	r7, #120	; 0x78
 8003456:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800345a:	6823      	ldr	r3, [r4, #0]
 800345c:	6829      	ldr	r1, [r5, #0]
 800345e:	061f      	lsls	r7, r3, #24
 8003460:	f851 6b04 	ldr.w	r6, [r1], #4
 8003464:	d402      	bmi.n	800346c <_printf_i+0x18c>
 8003466:	065f      	lsls	r7, r3, #25
 8003468:	bf48      	it	mi
 800346a:	b2b6      	uxthmi	r6, r6
 800346c:	07df      	lsls	r7, r3, #31
 800346e:	bf48      	it	mi
 8003470:	f043 0320 	orrmi.w	r3, r3, #32
 8003474:	6029      	str	r1, [r5, #0]
 8003476:	bf48      	it	mi
 8003478:	6023      	strmi	r3, [r4, #0]
 800347a:	b91e      	cbnz	r6, 8003484 <_printf_i+0x1a4>
 800347c:	6823      	ldr	r3, [r4, #0]
 800347e:	f023 0320 	bic.w	r3, r3, #32
 8003482:	6023      	str	r3, [r4, #0]
 8003484:	2310      	movs	r3, #16
 8003486:	e7a7      	b.n	80033d8 <_printf_i+0xf8>
 8003488:	4824      	ldr	r0, [pc, #144]	; (800351c <_printf_i+0x23c>)
 800348a:	e7e4      	b.n	8003456 <_printf_i+0x176>
 800348c:	4615      	mov	r5, r2
 800348e:	e7bd      	b.n	800340c <_printf_i+0x12c>
 8003490:	682b      	ldr	r3, [r5, #0]
 8003492:	6826      	ldr	r6, [r4, #0]
 8003494:	6961      	ldr	r1, [r4, #20]
 8003496:	1d18      	adds	r0, r3, #4
 8003498:	6028      	str	r0, [r5, #0]
 800349a:	0635      	lsls	r5, r6, #24
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	d501      	bpl.n	80034a4 <_printf_i+0x1c4>
 80034a0:	6019      	str	r1, [r3, #0]
 80034a2:	e002      	b.n	80034aa <_printf_i+0x1ca>
 80034a4:	0670      	lsls	r0, r6, #25
 80034a6:	d5fb      	bpl.n	80034a0 <_printf_i+0x1c0>
 80034a8:	8019      	strh	r1, [r3, #0]
 80034aa:	2300      	movs	r3, #0
 80034ac:	6123      	str	r3, [r4, #16]
 80034ae:	4615      	mov	r5, r2
 80034b0:	e7bc      	b.n	800342c <_printf_i+0x14c>
 80034b2:	682b      	ldr	r3, [r5, #0]
 80034b4:	1d1a      	adds	r2, r3, #4
 80034b6:	602a      	str	r2, [r5, #0]
 80034b8:	681d      	ldr	r5, [r3, #0]
 80034ba:	6862      	ldr	r2, [r4, #4]
 80034bc:	2100      	movs	r1, #0
 80034be:	4628      	mov	r0, r5
 80034c0:	f7fc fe8e 	bl	80001e0 <memchr>
 80034c4:	b108      	cbz	r0, 80034ca <_printf_i+0x1ea>
 80034c6:	1b40      	subs	r0, r0, r5
 80034c8:	6060      	str	r0, [r4, #4]
 80034ca:	6863      	ldr	r3, [r4, #4]
 80034cc:	6123      	str	r3, [r4, #16]
 80034ce:	2300      	movs	r3, #0
 80034d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034d4:	e7aa      	b.n	800342c <_printf_i+0x14c>
 80034d6:	6923      	ldr	r3, [r4, #16]
 80034d8:	462a      	mov	r2, r5
 80034da:	4649      	mov	r1, r9
 80034dc:	4640      	mov	r0, r8
 80034de:	47d0      	blx	sl
 80034e0:	3001      	adds	r0, #1
 80034e2:	d0ad      	beq.n	8003440 <_printf_i+0x160>
 80034e4:	6823      	ldr	r3, [r4, #0]
 80034e6:	079b      	lsls	r3, r3, #30
 80034e8:	d413      	bmi.n	8003512 <_printf_i+0x232>
 80034ea:	68e0      	ldr	r0, [r4, #12]
 80034ec:	9b03      	ldr	r3, [sp, #12]
 80034ee:	4298      	cmp	r0, r3
 80034f0:	bfb8      	it	lt
 80034f2:	4618      	movlt	r0, r3
 80034f4:	e7a6      	b.n	8003444 <_printf_i+0x164>
 80034f6:	2301      	movs	r3, #1
 80034f8:	4632      	mov	r2, r6
 80034fa:	4649      	mov	r1, r9
 80034fc:	4640      	mov	r0, r8
 80034fe:	47d0      	blx	sl
 8003500:	3001      	adds	r0, #1
 8003502:	d09d      	beq.n	8003440 <_printf_i+0x160>
 8003504:	3501      	adds	r5, #1
 8003506:	68e3      	ldr	r3, [r4, #12]
 8003508:	9903      	ldr	r1, [sp, #12]
 800350a:	1a5b      	subs	r3, r3, r1
 800350c:	42ab      	cmp	r3, r5
 800350e:	dcf2      	bgt.n	80034f6 <_printf_i+0x216>
 8003510:	e7eb      	b.n	80034ea <_printf_i+0x20a>
 8003512:	2500      	movs	r5, #0
 8003514:	f104 0619 	add.w	r6, r4, #25
 8003518:	e7f5      	b.n	8003506 <_printf_i+0x226>
 800351a:	bf00      	nop
 800351c:	08003671 	.word	0x08003671
 8003520:	08003682 	.word	0x08003682

08003524 <memmove>:
 8003524:	4288      	cmp	r0, r1
 8003526:	b510      	push	{r4, lr}
 8003528:	eb01 0402 	add.w	r4, r1, r2
 800352c:	d902      	bls.n	8003534 <memmove+0x10>
 800352e:	4284      	cmp	r4, r0
 8003530:	4623      	mov	r3, r4
 8003532:	d807      	bhi.n	8003544 <memmove+0x20>
 8003534:	1e43      	subs	r3, r0, #1
 8003536:	42a1      	cmp	r1, r4
 8003538:	d008      	beq.n	800354c <memmove+0x28>
 800353a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800353e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003542:	e7f8      	b.n	8003536 <memmove+0x12>
 8003544:	4402      	add	r2, r0
 8003546:	4601      	mov	r1, r0
 8003548:	428a      	cmp	r2, r1
 800354a:	d100      	bne.n	800354e <memmove+0x2a>
 800354c:	bd10      	pop	{r4, pc}
 800354e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003552:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003556:	e7f7      	b.n	8003548 <memmove+0x24>

08003558 <_sbrk_r>:
 8003558:	b538      	push	{r3, r4, r5, lr}
 800355a:	4d06      	ldr	r5, [pc, #24]	; (8003574 <_sbrk_r+0x1c>)
 800355c:	2300      	movs	r3, #0
 800355e:	4604      	mov	r4, r0
 8003560:	4608      	mov	r0, r1
 8003562:	602b      	str	r3, [r5, #0]
 8003564:	f7fd fc78 	bl	8000e58 <_sbrk>
 8003568:	1c43      	adds	r3, r0, #1
 800356a:	d102      	bne.n	8003572 <_sbrk_r+0x1a>
 800356c:	682b      	ldr	r3, [r5, #0]
 800356e:	b103      	cbz	r3, 8003572 <_sbrk_r+0x1a>
 8003570:	6023      	str	r3, [r4, #0]
 8003572:	bd38      	pop	{r3, r4, r5, pc}
 8003574:	20000268 	.word	0x20000268

08003578 <memcpy>:
 8003578:	440a      	add	r2, r1
 800357a:	4291      	cmp	r1, r2
 800357c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003580:	d100      	bne.n	8003584 <memcpy+0xc>
 8003582:	4770      	bx	lr
 8003584:	b510      	push	{r4, lr}
 8003586:	f811 4b01 	ldrb.w	r4, [r1], #1
 800358a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800358e:	4291      	cmp	r1, r2
 8003590:	d1f9      	bne.n	8003586 <memcpy+0xe>
 8003592:	bd10      	pop	{r4, pc}

08003594 <_realloc_r>:
 8003594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003598:	4680      	mov	r8, r0
 800359a:	4614      	mov	r4, r2
 800359c:	460e      	mov	r6, r1
 800359e:	b921      	cbnz	r1, 80035aa <_realloc_r+0x16>
 80035a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035a4:	4611      	mov	r1, r2
 80035a6:	f7ff bc49 	b.w	8002e3c <_malloc_r>
 80035aa:	b92a      	cbnz	r2, 80035b8 <_realloc_r+0x24>
 80035ac:	f7ff fbda 	bl	8002d64 <_free_r>
 80035b0:	4625      	mov	r5, r4
 80035b2:	4628      	mov	r0, r5
 80035b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035b8:	f000 f81b 	bl	80035f2 <_malloc_usable_size_r>
 80035bc:	4284      	cmp	r4, r0
 80035be:	4607      	mov	r7, r0
 80035c0:	d802      	bhi.n	80035c8 <_realloc_r+0x34>
 80035c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80035c6:	d812      	bhi.n	80035ee <_realloc_r+0x5a>
 80035c8:	4621      	mov	r1, r4
 80035ca:	4640      	mov	r0, r8
 80035cc:	f7ff fc36 	bl	8002e3c <_malloc_r>
 80035d0:	4605      	mov	r5, r0
 80035d2:	2800      	cmp	r0, #0
 80035d4:	d0ed      	beq.n	80035b2 <_realloc_r+0x1e>
 80035d6:	42bc      	cmp	r4, r7
 80035d8:	4622      	mov	r2, r4
 80035da:	4631      	mov	r1, r6
 80035dc:	bf28      	it	cs
 80035de:	463a      	movcs	r2, r7
 80035e0:	f7ff ffca 	bl	8003578 <memcpy>
 80035e4:	4631      	mov	r1, r6
 80035e6:	4640      	mov	r0, r8
 80035e8:	f7ff fbbc 	bl	8002d64 <_free_r>
 80035ec:	e7e1      	b.n	80035b2 <_realloc_r+0x1e>
 80035ee:	4635      	mov	r5, r6
 80035f0:	e7df      	b.n	80035b2 <_realloc_r+0x1e>

080035f2 <_malloc_usable_size_r>:
 80035f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035f6:	1f18      	subs	r0, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	bfbc      	itt	lt
 80035fc:	580b      	ldrlt	r3, [r1, r0]
 80035fe:	18c0      	addlt	r0, r0, r3
 8003600:	4770      	bx	lr
	...

08003604 <_init>:
 8003604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003606:	bf00      	nop
 8003608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800360a:	bc08      	pop	{r3}
 800360c:	469e      	mov	lr, r3
 800360e:	4770      	bx	lr

08003610 <_fini>:
 8003610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003612:	bf00      	nop
 8003614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003616:	bc08      	pop	{r3}
 8003618:	469e      	mov	lr, r3
 800361a:	4770      	bx	lr
